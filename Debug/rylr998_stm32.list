
rylr998_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f70  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000068  0800543c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800543c  00007544  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aff6  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002253  00000000  00000000  00012086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  000142e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d5  00000000  00000000  00014be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000127b9  00000000  00000000  000152bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3f8  00000000  00000000  00027a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689ea  00000000  00000000  00034e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  0009d89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a01b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005018 	.word	0x08005018

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005018 	.word	0x08005018

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	@ (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_DMA_Init+0x48>)
 8000698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_DMA_Init+0x48>)
 800069c:	2101      	movs	r1, #1
 800069e:	430a      	orrs	r2, r1
 80006a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <MX_DMA_Init+0x48>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	2201      	movs	r2, #1
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 feb0 	bl	8001418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fec2 	bl	8001442 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	200b      	movs	r0, #11
 80006c4:	f000 fea8 	bl	8001418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006c8:	200b      	movs	r0, #11
 80006ca:	f000 feba 	bl	8001442 <HAL_NVIC_EnableIRQ>

}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	@ 0x24
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	240c      	movs	r4, #12
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 fe11 	bl	8004314 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_GPIO_Init+0x98>)
 80006f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_GPIO_Init+0x98>)
 80006f8:	2104      	movs	r1, #4
 80006fa:	430a      	orrs	r2, r1
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_GPIO_Init+0x98>)
 8000700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000702:	2204      	movs	r2, #4
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_GPIO_Init+0x98>)
 800070c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_GPIO_Init+0x98>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_GPIO_Init+0x98>)
 8000718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_GPIO_Init+0x98>)
 8000724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_GPIO_Init+0x98>)
 8000728:	2102      	movs	r1, #2
 800072a:	430a      	orrs	r2, r1
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_GPIO_Init+0x98>)
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	2202      	movs	r2, #2
 8000734:	4013      	ands	r3, r2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	2108      	movs	r1, #8
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fa4b 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000746:	0021      	movs	r1, r4
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2208      	movs	r2, #8
 800074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2201      	movs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000760:	187b      	adds	r3, r7, r1
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <MX_GPIO_Init+0x9c>)
 8000764:	0019      	movs	r1, r3
 8000766:	0010      	movs	r0, r2
 8000768:	f001 f8ca 	bl	8001900 <HAL_GPIO_Init>

}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b009      	add	sp, #36	@ 0x24
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	50000400 	.word	0x50000400

0800077c <HAL_UARTEx_RxEventCallback>:
#define RX_BUFFER_SIZE 32
uint8_t rx_buff[RX_BUFFER_SIZE];  // Reception buffer



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	000a      	movs	r2, r1
 8000786:	1cbb      	adds	r3, r7, #2
 8000788:	801a      	strh	r2, [r3, #0]
    // Check if the event is an idle line event

	if((huart == &huart2)){
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x3c>)
 800078e:	429a      	cmp	r2, r3
 8000790:	d10e      	bne.n	80007b0 <HAL_UARTEx_RxEventCallback+0x34>



		//if (HAL_UARTEx_GetRxEventType(huart) == HAL_UART_RXEVENT_IDLE ||HAL_UARTEx_GetRxEventType(huart) == HAL_UART_RXEVENT_HT) {

			if (rx_buff[Size-1]=='\n'){
 8000792:	1cbb      	adds	r3, r7, #2
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x40>)
 800079a:	5cd3      	ldrb	r3, [r2, r3]
 800079c:	2b0a      	cmp	r3, #10
 800079e:	d101      	bne.n	80007a4 <HAL_UARTEx_RxEventCallback+0x28>
			rylr998_SetInterruptFlag();
 80007a0:	f000 f8b6 	bl	8000910 <rylr998_SetInterruptFlag>
			}
			HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buff, RX_BUFFER_SIZE);
 80007a4:	4905      	ldr	r1, [pc, #20]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x40>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2220      	movs	r2, #32
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 fad3 	bl	8003d56 <HAL_UARTEx_ReceiveToIdle_DMA>

		//}
	}

}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000024c 	.word	0x2000024c
 80007bc:	20000084 	.word	0x20000084

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fd0b 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f825 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f7ff ff85 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 80007d2:	f7ff ff5d 	bl	8000690 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007d6:	f000 fb3f 	bl	8000e58 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80007da:	f000 fb6b 	bl	8000eb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_to_send[]= "Hola";
 80007de:	003b      	movs	r3, r7
 80007e0:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <main+0x4c>)
 80007e2:	6811      	ldr	r1, [r2, #0]
 80007e4:	6019      	str	r1, [r3, #0]
 80007e6:	7912      	ldrb	r2, [r2, #4]
 80007e8:	711a      	strb	r2, [r3, #4]

  // HAL_UART_Transmit_DMA(&hlpuart1,tx_buff,strlen((char*)tx_buff));



  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buff, RX_BUFFER_SIZE);
 80007ea:	4909      	ldr	r1, [pc, #36]	@ (8000810 <main+0x50>)
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <main+0x54>)
 80007ee:	2220      	movs	r2, #32
 80007f0:	0018      	movs	r0, r3
 80007f2:	f003 fab0 	bl	8003d56 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(rylr998_GetInterruptFlag()){
 80007f6:	f000 f895 	bl	8000924 <rylr998_GetInterruptFlag>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d0fb      	beq.n	80007f6 <main+0x36>


		  rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE);
 80007fe:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <main+0x50>)
 8000800:	2120      	movs	r1, #32
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f928 	bl	8000a58 <rylr998_prase_reciver>
	  if(rylr998_GetInterruptFlag()){
 8000808:	e7f5      	b.n	80007f6 <main+0x36>
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	08005030 	.word	0x08005030
 8000810:	20000084 	.word	0x20000084
 8000814:	2000024c 	.word	0x2000024c

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b099      	sub	sp, #100	@ 0x64
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	242c      	movs	r4, #44	@ 0x2c
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2334      	movs	r3, #52	@ 0x34
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f003 fd73 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082e:	2318      	movs	r3, #24
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	0018      	movs	r0, r3
 8000834:	2314      	movs	r3, #20
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f003 fd6b 	bl	8004314 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083e:	003b      	movs	r3, r7
 8000840:	0018      	movs	r0, r3
 8000842:	2318      	movs	r3, #24
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f003 fd64 	bl	8004314 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <SystemClock_Config+0xe4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a2b      	ldr	r2, [pc, #172]	@ (8000900 <SystemClock_Config+0xe8>)
 8000852:	401a      	ands	r2, r3
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <SystemClock_Config+0xe4>)
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	0109      	lsls	r1, r1, #4
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2210      	movs	r2, #16
 8000870:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	02d2      	lsls	r2, r2, #11
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	03d2      	lsls	r2, r2, #15
 800088c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	187b      	adds	r3, r7, r1
 8000890:	0018      	movs	r0, r3
 8000892:	f001 f9c1 	bl	8001c18 <HAL_RCC_OscConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800089a:	f000 f833 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	2118      	movs	r1, #24
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	220f      	movs	r2, #15
 80008a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2203      	movs	r2, #3
 80008aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2101      	movs	r1, #1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fd24 	bl	8002310 <HAL_RCC_ClockConfig>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008cc:	f000 f81a 	bl	8000904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2206      	movs	r2, #6
 80008d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d6:	003b      	movs	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008dc:	003b      	movs	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	003b      	movs	r3, r7
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 ff37 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008ee:	f000 f809 	bl	8000904 <Error_Handler>
  }
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b019      	add	sp, #100	@ 0x64
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	40007000 	.word	0x40007000
 8000900:	ffffe7ff 	.word	0xffffe7ff

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <rylr998_SetInterruptFlag>:

/**
 * @brief  Sets IRQ flag whenever new data gets into gets recived in the Rx buffer
 *
 */
void rylr998_SetInterruptFlag(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	rylr998_interrupt_flag =1;
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <rylr998_SetInterruptFlag+0x10>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000a4 	.word	0x200000a4

08000924 <rylr998_GetInterruptFlag>:
/**
 * @brief  Returns the value of the flag
 * @retval flag status
 *
 */
uint8_t rylr998_GetInterruptFlag(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	return rylr998_interrupt_flag;
 8000928:	4b02      	ldr	r3, [pc, #8]	@ (8000934 <rylr998_GetInterruptFlag+0x10>)
 800092a:	781b      	ldrb	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	200000a4 	.word	0x200000a4

08000938 <rylr998_ClearInterruptFlag>:

/**
 * @brief  Clear the IRQ flag
 *
 */
void rylr998_ClearInterruptFlag(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	rylr998_interrupt_flag =0;
 800093c:	4b02      	ldr	r3, [pc, #8]	@ (8000948 <rylr998_ClearInterruptFlag+0x10>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000a4 	.word	0x200000a4

0800094c <rylr998_ResponseFind>:
 * @params RxBuffer sorted
 * @retval command selected
 *
 */
RYLR_RX_command_t rylr998_ResponseFind(uint8_t *rxBuffer)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

	RYLR_RX_command_t 	ret 					= RYLR_NOT_FOUND;
 8000954:	240f      	movs	r4, #15
 8000956:	193b      	adds	r3, r7, r4
 8000958:	220b      	movs	r2, #11
 800095a:	701a      	strb	r2, [r3, #0]
	if(!memcmp(rxBuffer, "ADDRESS\r\n", 9))
 800095c:	4937      	ldr	r1, [pc, #220]	@ (8000a3c <rylr998_ResponseFind+0xf0>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2209      	movs	r2, #9
 8000962:	0018      	movs	r0, r3
 8000964:	f003 fcc8 	bl	80042f8 <memcmp>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d105      	bne.n	8000978 <rylr998_ResponseFind+0x2c>
	{
		return ret = RYLR_ADDRESS;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	193b      	adds	r3, r7, r4
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	e05c      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+RCV", 4))
 8000978:	4931      	ldr	r1, [pc, #196]	@ (8000a40 <rylr998_ResponseFind+0xf4>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2204      	movs	r2, #4
 800097e:	0018      	movs	r0, r3
 8000980:	f003 fcba 	bl	80042f8 <memcmp>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d106      	bne.n	8000996 <rylr998_ResponseFind+0x4a>
	{
		return ret = RYLR_RCV;
 8000988:	210f      	movs	r1, #15
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2202      	movs	r2, #2
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	187b      	adds	r3, r7, r1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	e04d      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "OK+\r\n", 5))
 8000996:	492b      	ldr	r1, [pc, #172]	@ (8000a44 <rylr998_ResponseFind+0xf8>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2205      	movs	r2, #5
 800099c:	0018      	movs	r0, r3
 800099e:	f003 fcab 	bl	80042f8 <memcmp>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d106      	bne.n	80009b4 <rylr998_ResponseFind+0x68>
	{
		return ret = RYLR_OK;
 80009a6:	210f      	movs	r1, #15
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	e03e      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+READY\r\n", 8))
 80009b4:	4924      	ldr	r1, [pc, #144]	@ (8000a48 <rylr998_ResponseFind+0xfc>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2208      	movs	r2, #8
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 fc9c 	bl	80042f8 <memcmp>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d106      	bne.n	80009d2 <rylr998_ResponseFind+0x86>
	{
		return ret = RYLR_RDY;
 80009c4:	210f      	movs	r1, #15
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2203      	movs	r2, #3
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	e02f      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+ERR=", 5))
 80009d2:	491e      	ldr	r1, [pc, #120]	@ (8000a4c <rylr998_ResponseFind+0x100>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2205      	movs	r2, #5
 80009d8:	0018      	movs	r0, r3
 80009da:	f003 fc8d 	bl	80042f8 <memcmp>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d106      	bne.n	80009f0 <rylr998_ResponseFind+0xa4>
	{
		return ret = RYLR_ERR;
 80009e2:	210f      	movs	r1, #15
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	220a      	movs	r2, #10
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	e020      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+FACTORY\r\n", 10))
 80009f0:	4917      	ldr	r1, [pc, #92]	@ (8000a50 <rylr998_ResponseFind+0x104>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	220a      	movs	r2, #10
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 fc7e 	bl	80042f8 <memcmp>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d106      	bne.n	8000a0e <rylr998_ResponseFind+0xc2>
	{
		return ret = RYLR_FACTORY;
 8000a00:	210f      	movs	r1, #15
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2207      	movs	r2, #7
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	e011      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+IPR=", 5))
 8000a0e:	4911      	ldr	r1, [pc, #68]	@ (8000a54 <rylr998_ResponseFind+0x108>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2205      	movs	r2, #5
 8000a14:	0018      	movs	r0, r3
 8000a16:	f003 fc6f 	bl	80042f8 <memcmp>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d106      	bne.n	8000a2c <rylr998_ResponseFind+0xe0>
	{
		return ret = RYLR_IPR;
 8000a1e:	210f      	movs	r1, #15
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	e002      	b.n	8000a32 <rylr998_ResponseFind+0xe6>
	}
	return ret;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	781b      	ldrb	r3, [r3, #0]
}
 8000a32:	0018      	movs	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b005      	add	sp, #20
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	080050fc 	.word	0x080050fc
 8000a40:	08005108 	.word	0x08005108
 8000a44:	08005110 	.word	0x08005110
 8000a48:	08005118 	.word	0x08005118
 8000a4c:	08005124 	.word	0x08005124
 8000a50:	0800512c 	.word	0x0800512c
 8000a54:	08005138 	.word	0x08005138

08000a58 <rylr998_prase_reciver>:


RYLR_RX_data_t rx_packet;

void rylr998_prase_reciver(uint8_t *pBuff, uint8_t RX_BUFFER_SIZE)
{
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	000a      	movs	r2, r1
 8000a62:	1cfb      	adds	r3, r7, #3
 8000a64:	701a      	strb	r2, [r3, #0]

	static uint8_t aux_buff[32];
	static uint8_t start_indx=0;
	static uint8_t i;
	for (i = 0; i <RX_BUFFER_SIZE; i++){
 8000a66:	4b5d      	ldr	r3, [pc, #372]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	e024      	b.n	8000ab8 <rylr998_prase_reciver+0x60>
	    aux_buff[i] = pBuff[(start_indx + i) % RX_BUFFER_SIZE];
 8000a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8000be0 <rylr998_prase_reciver+0x188>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	001a      	movs	r2, r3
 8000a74:	4b59      	ldr	r3, [pc, #356]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	18d2      	adds	r2, r2, r3
 8000a7a:	1cfb      	adds	r3, r7, #3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f7ff fcbb 	bl	80003fc <__aeabi_idivmod>
 8000a86:	000b      	movs	r3, r1
 8000a88:	001a      	movs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	189b      	adds	r3, r3, r2
 8000a8e:	4a53      	ldr	r2, [pc, #332]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	7819      	ldrb	r1, [r3, #0]
 8000a94:	4b53      	ldr	r3, [pc, #332]	@ (8000be4 <rylr998_prase_reciver+0x18c>)
 8000a96:	5499      	strb	r1, [r3, r2]
	    if(aux_buff[i]=='\n'){
 8000a98:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b51      	ldr	r3, [pc, #324]	@ (8000be4 <rylr998_prase_reciver+0x18c>)
 8000aa0:	5c9b      	ldrb	r3, [r3, r2]
 8000aa2:	2b0a      	cmp	r3, #10
 8000aa4:	d102      	bne.n	8000aac <rylr998_prase_reciver+0x54>
	    	rylr998_ClearInterruptFlag();
 8000aa6:	f7ff ff47 	bl	8000938 <rylr998_ClearInterruptFlag>
	    	break;
 8000aaa:	e00b      	b.n	8000ac4 <rylr998_prase_reciver+0x6c>
	for (i = 0; i <RX_BUFFER_SIZE; i++){
 8000aac:	4b4b      	ldr	r3, [pc, #300]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b49      	ldr	r3, [pc, #292]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	4b48      	ldr	r3, [pc, #288]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	1cfa      	adds	r2, r7, #3
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8d4      	bhi.n	8000a6e <rylr998_prase_reciver+0x16>
	    }
	    if(i==RX_BUFFER_SIZE && aux_buff[i]!='\n'){
	    }

	}
	start_indx=(start_indx + i+1) % RX_BUFFER_SIZE;
 8000ac4:	4b46      	ldr	r3, [pc, #280]	@ (8000be0 <rylr998_prase_reciver+0x188>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b44      	ldr	r3, [pc, #272]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	18d3      	adds	r3, r2, r3
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	1cfb      	adds	r3, r7, #3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	0010      	movs	r0, r2
 8000ada:	f7ff fc8f 	bl	80003fc <__aeabi_idivmod>
 8000ade:	000b      	movs	r3, r1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8000be0 <rylr998_prase_reciver+0x188>)
 8000ae4:	701a      	strb	r2, [r3, #0]
	i=0;
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bdc <rylr998_prase_reciver+0x184>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]



            RYLR_RX_command_t cmd = rylr998_ResponseFind(aux_buff);
 8000aec:	250f      	movs	r5, #15
 8000aee:	197c      	adds	r4, r7, r5
 8000af0:	4b3c      	ldr	r3, [pc, #240]	@ (8000be4 <rylr998_prase_reciver+0x18c>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff ff2a 	bl	800094c <rylr998_ResponseFind>
 8000af8:	0003      	movs	r3, r0
 8000afa:	7023      	strb	r3, [r4, #0]

            // Handle different cases
            switch (cmd)
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b0a      	cmp	r3, #10
 8000b02:	d864      	bhi.n	8000bce <rylr998_prase_reciver+0x176>
 8000b04:	009a      	lsls	r2, r3, #2
 8000b06:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <rylr998_prase_reciver+0x190>)
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	469f      	mov	pc, r3

            	    char *token;


            	    // Parse ID address
            	    token = strtok(aux_buff, "=");  // Remove "+RCV="
 8000b0e:	4a37      	ldr	r2, [pc, #220]	@ (8000bec <rylr998_prase_reciver+0x194>)
 8000b10:	4b34      	ldr	r3, [pc, #208]	@ (8000be4 <rylr998_prase_reciver+0x18c>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f003 fc19 	bl	800434c <strtok>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	60bb      	str	r3, [r7, #8]
            	    token = strtok(NULL, ",");      // Get ID address
 8000b1e:	4b34      	ldr	r3, [pc, #208]	@ (8000bf0 <rylr998_prase_reciver+0x198>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	2000      	movs	r0, #0
 8000b24:	f003 fc12 	bl	800434c <strtok>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	60bb      	str	r3, [r7, #8]
            	    rx_packet.id = atoi(token);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f003 f979 	bl	8003e26 <atoi>
 8000b34:	0003      	movs	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000b3a:	801a      	strh	r2, [r3, #0]

            	    // Parse byte count
            	    token = strtok(NULL, ",");      // Get byte count
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <rylr998_prase_reciver+0x198>)
 8000b3e:	0019      	movs	r1, r3
 8000b40:	2000      	movs	r0, #0
 8000b42:	f003 fc03 	bl	800434c <strtok>
 8000b46:	0003      	movs	r3, r0
 8000b48:	60bb      	str	r3, [r7, #8]
            	    rx_packet.byte_count = atoi(token);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f003 f96a 	bl	8003e26 <atoi>
 8000b52:	0003      	movs	r3, r0
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000b58:	709a      	strb	r2, [r3, #2]

            	    // Parse actual data
            	    token = strtok(NULL, ",");
 8000b5a:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <rylr998_prase_reciver+0x198>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f003 fbf4 	bl	800434c <strtok>
 8000b64:	0003      	movs	r3, r0
 8000b66:	60bb      	str	r3, [r7, #8]
            	    strncpy(rx_packet.data, token, rx_packet.byte_count);  // Copy up to byte_count
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <rylr998_prase_reciver+0x1a0>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f003 fbd6 	bl	8004324 <strncpy>
            	    rx_packet.data[rx_packet.byte_count] = '\0';  // Ensure null termination
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	70da      	strb	r2, [r3, #3]

            	    // Parse RSSI
            	    token = strtok(NULL, ",");      // Get RSSI
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <rylr998_prase_reciver+0x198>)
 8000b88:	0019      	movs	r1, r3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f003 fbde 	bl	800434c <strtok>
 8000b90:	0003      	movs	r3, r0
 8000b92:	60bb      	str	r3, [r7, #8]
            	    rx_packet.rssi = atoi(token);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f003 f945 	bl	8003e26 <atoi>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	b259      	sxtb	r1, r3
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000ba2:	22f3      	movs	r2, #243	@ 0xf3
 8000ba4:	5499      	strb	r1, [r3, r2]

            	    // Parse SNR
            	    token = strtok(NULL, ",");      // Get SNR
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <rylr998_prase_reciver+0x198>)
 8000ba8:	0019      	movs	r1, r3
 8000baa:	2000      	movs	r0, #0
 8000bac:	f003 fbce 	bl	800434c <strtok>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	60bb      	str	r3, [r7, #8]
            	    rx_packet.snr = atoi(token);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f003 f935 	bl	8003e26 <atoi>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	b2d9      	uxtb	r1, r3
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <rylr998_prase_reciver+0x19c>)
 8000bc2:	22f4      	movs	r2, #244	@ 0xf4
 8000bc4:	5499      	strb	r1, [r3, r2]





                    break;
 8000bc6:	e003      	b.n	8000bd0 <rylr998_prase_reciver+0x178>
                    // Handle READY response
                    break;
                case RYLR_ERR:

                	while(1){  //TODO  for now, if something went wrong, the code gets stuck here.
                		Error_Handler();
 8000bc8:	f7ff fe9c 	bl	8000904 <Error_Handler>
 8000bcc:	e7fc      	b.n	8000bc8 <rylr998_prase_reciver+0x170>
                	}
                	break;
                default:
                    break;
 8000bce:	46c0      	nop			@ (mov r8, r8)
            }

            rylr998_ClearInterruptFlag();
 8000bd0:	f7ff feb2 	bl	8000938 <rylr998_ClearInterruptFlag>
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b004      	add	sp, #16
 8000bda:	bdb0      	pop	{r4, r5, r7, pc}
 8000bdc:	2000019e 	.word	0x2000019e
 8000be0:	2000019f 	.word	0x2000019f
 8000be4:	200001a0 	.word	0x200001a0
 8000be8:	08005148 	.word	0x08005148
 8000bec:	08005140 	.word	0x08005140
 8000bf0:	08005144 	.word	0x08005144
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	200000ab 	.word	0x200000ab

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <HAL_MspInit+0x24>)
 8000c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x24>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <HAL_MspInit+0x24>)
 8000c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c10:	4b03      	ldr	r3, [pc, #12]	@ (8000c20 <HAL_MspInit+0x24>)
 8000c12:	2180      	movs	r1, #128	@ 0x80
 8000c14:	0549      	lsls	r1, r1, #21
 8000c16:	430a      	orrs	r2, r1
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 fb1c 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fd71 	bl	8001746 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fd6d 	bl	8001746 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	2000031c 	.word	0x2000031c
 8000c78:	200002d4 	.word	0x200002d4

08000c7c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fd5f 	bl	8001746 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fd5b 	bl	8001746 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	200003ac 	.word	0x200003ac
 8000c9c:	20000364 	.word	0x20000364

08000ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <USART2_IRQHandler+0x14>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 fed6 	bl	8002a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	2000024c 	.word	0x2000024c

08000cb8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <LPUART1_IRQHandler+0x14>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 feca 	bl	8002a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	200001c4 	.word	0x200001c4

08000cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_kill>:

int _kill(int pid, int sig)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ce6:	f003 fbf1 	bl	80044cc <__errno>
 8000cea:	0003      	movs	r3, r0
 8000cec:	2216      	movs	r2, #22
 8000cee:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_exit>:

void _exit (int status)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d04:	2301      	movs	r3, #1
 8000d06:	425a      	negs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffe5 	bl	8000cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	e7fd      	b.n	8000d12 <_exit+0x16>

08000d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e00a      	b.n	8000d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d28:	e000      	b.n	8000d2c <_read+0x16>
 8000d2a:	bf00      	nop
 8000d2c:	0001      	movs	r1, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	b2ca      	uxtb	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbf0      	blt.n	8000d28 <_read+0x12>
  }

  return len;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e009      	b.n	8000d76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	60ba      	str	r2, [r7, #8]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	e000      	b.n	8000d70 <_write+0x20>
 8000d6e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbf1      	blt.n	8000d62 <_write+0x12>
  }
  return len;
 8000d7e:	687b      	ldr	r3, [r7, #4]
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b006      	add	sp, #24
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_close>:

int _close(int file)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	0192      	lsls	r2, r2, #6
 8000dac:	605a      	str	r2, [r3, #4]
  return 0;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_isatty>:

int _isatty(int file)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc0:	2301      	movs	r3, #1
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b004      	add	sp, #16
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f003 fb5c 	bl	80044cc <__errno>
 8000e14:	0003      	movs	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	18d2      	adds	r2, r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20002000 	.word	0x20002000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200001c0 	.word	0x200001c0
 8000e48:	20000548 	.word	0x20000548

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e5e:	4a14      	ldr	r2, [pc, #80]	@ (8000eb0 <MX_LPUART1_UART_Init+0x58>)
 8000e60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e62:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e64:	22e1      	movs	r2, #225	@ 0xe1
 8000e66:	0252      	lsls	r2, r2, #9
 8000e68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <MX_LPUART1_UART_Init+0x54>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 fd8a 	bl	80029b0 <HAL_UART_Init>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000ea0:	f7ff fd30 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	200001c4 	.word	0x200001c4
 8000eb0:	40004800 	.word	0x40004800

08000eb4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	@ (8000f10 <MX_USART2_UART_Init+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ec0:	22e1      	movs	r2, #225	@ 0xe1
 8000ec2:	0252      	lsls	r2, r2, #9
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <MX_USART2_UART_Init+0x58>)
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 fd59 	bl	80029b0 <HAL_UART_Init>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f02:	f7ff fcff 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000024c 	.word	0x2000024c
 8000f10:	40004400 	.word	0x40004400

08000f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b08b      	sub	sp, #44	@ 0x2c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	2414      	movs	r4, #20
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	0018      	movs	r0, r3
 8000f22:	2314      	movs	r3, #20
 8000f24:	001a      	movs	r2, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	f003 f9f4 	bl	8004314 <memset>
  if(uartHandle->Instance==LPUART1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a8b      	ldr	r2, [pc, #556]	@ (8001160 <HAL_UART_MspInit+0x24c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d000      	beq.n	8000f38 <HAL_UART_MspInit+0x24>
 8000f36:	e084      	b.n	8001042 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f38:	4b8a      	ldr	r3, [pc, #552]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8000f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f3c:	4b89      	ldr	r3, [pc, #548]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8000f3e:	2180      	movs	r1, #128	@ 0x80
 8000f40:	02c9      	lsls	r1, r1, #11
 8000f42:	430a      	orrs	r2, r1
 8000f44:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b87      	ldr	r3, [pc, #540]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8000f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f4a:	4b86      	ldr	r3, [pc, #536]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f52:	4b84      	ldr	r3, [pc, #528]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f56:	2201      	movs	r2, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5e:	0021      	movs	r1, r4
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2202      	movs	r2, #2
 8000f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2203      	movs	r2, #3
 8000f76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2206      	movs	r2, #6
 8000f7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	187a      	adds	r2, r7, r1
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fcba 	bl	8001900 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000f8c:	4b76      	ldr	r3, [pc, #472]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000f8e:	4a77      	ldr	r2, [pc, #476]	@ (800116c <HAL_UART_MspInit+0x258>)
 8000f90:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000f92:	4b75      	ldr	r3, [pc, #468]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000f94:	2205      	movs	r2, #5
 8000f96:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f98:	4b73      	ldr	r3, [pc, #460]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9e:	4b72      	ldr	r3, [pc, #456]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa4:	4b70      	ldr	r3, [pc, #448]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fa6:	2280      	movs	r2, #128	@ 0x80
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000faa:	4b6f      	ldr	r3, [pc, #444]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb0:	4b6d      	ldr	r3, [pc, #436]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000fc2:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 fa59 	bl	800147c <HAL_DMA_Init>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000fce:	f7ff fc99 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a64      	ldr	r2, [pc, #400]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fd6:	675a      	str	r2, [r3, #116]	@ 0x74
 8000fd8:	4b63      	ldr	r3, [pc, #396]	@ (8001168 <HAL_UART_MspInit+0x254>)
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000fde:	4b64      	ldr	r3, [pc, #400]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8000fe0:	4a64      	ldr	r2, [pc, #400]	@ (8001174 <HAL_UART_MspInit+0x260>)
 8000fe2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000fe4:	4b62      	ldr	r3, [pc, #392]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fea:	4b61      	ldr	r3, [pc, #388]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8000fec:	2210      	movs	r2, #16
 8000fee:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff6:	4b5e      	ldr	r3, [pc, #376]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8000ff8:	2280      	movs	r2, #128	@ 0x80
 8000ffa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001002:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001008:	4b59      	ldr	r3, [pc, #356]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b58      	ldr	r3, [pc, #352]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001014:	4b56      	ldr	r3, [pc, #344]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fa30 	bl	800147c <HAL_DMA_Init>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001020:	f7ff fc70 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 8001028:	671a      	str	r2, [r3, #112]	@ 0x70
 800102a:	4b51      	ldr	r3, [pc, #324]	@ (8001170 <HAL_UART_MspInit+0x25c>)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	201d      	movs	r0, #29
 8001036:	f000 f9ef 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800103a:	201d      	movs	r0, #29
 800103c:	f000 fa01 	bl	8001442 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001040:	e08a      	b.n	8001158 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a4c      	ldr	r2, [pc, #304]	@ (8001178 <HAL_UART_MspInit+0x264>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d000      	beq.n	800104e <HAL_UART_MspInit+0x13a>
 800104c:	e084      	b.n	8001158 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800104e:	4b45      	ldr	r3, [pc, #276]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8001050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001052:	4b44      	ldr	r3, [pc, #272]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	0289      	lsls	r1, r1, #10
 8001058:	430a      	orrs	r2, r1
 800105a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b41      	ldr	r3, [pc, #260]	@ (8001164 <HAL_UART_MspInit+0x250>)
 800105e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001060:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <HAL_UART_MspInit+0x250>)
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001068:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <HAL_UART_MspInit+0x250>)
 800106a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106c:	2201      	movs	r2, #1
 800106e:	4013      	ands	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|VCP_RX_Pin;
 8001074:	2114      	movs	r1, #20
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2282      	movs	r2, #130	@ 0x82
 800107a:	0212      	lsls	r2, r2, #8
 800107c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2202      	movs	r2, #2
 8001082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2203      	movs	r2, #3
 800108e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2204      	movs	r2, #4
 8001094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	187a      	adds	r2, r7, r1
 8001098:	23a0      	movs	r3, #160	@ 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fc2e 	bl	8001900 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80010a4:	4b35      	ldr	r3, [pc, #212]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010a6:	4a36      	ldr	r2, [pc, #216]	@ (8001180 <HAL_UART_MspInit+0x26c>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80010aa:	4b34      	ldr	r3, [pc, #208]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b0:	4b32      	ldr	r3, [pc, #200]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b6:	4b31      	ldr	r3, [pc, #196]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c2:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80010ce:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010d0:	2220      	movs	r2, #32
 80010d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010d4:	4b29      	ldr	r3, [pc, #164]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 f9cd 	bl	800147c <HAL_DMA_Init>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 80010e6:	f7ff fc0d 	bl	8000904 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a23      	ldr	r2, [pc, #140]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010ee:	675a      	str	r2, [r3, #116]	@ 0x74
 80010f0:	4b22      	ldr	r3, [pc, #136]	@ (800117c <HAL_UART_MspInit+0x268>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80010f6:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <HAL_UART_MspInit+0x270>)
 80010f8:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <HAL_UART_MspInit+0x274>)
 80010fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <HAL_UART_MspInit+0x270>)
 80010fe:	2204      	movs	r2, #4
 8001100:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001104:	2210      	movs	r2, #16
 8001106:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <HAL_UART_MspInit+0x270>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <HAL_UART_MspInit+0x270>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_UART_MspInit+0x270>)
 800112e:	0018      	movs	r0, r3
 8001130:	f000 f9a4 	bl	800147c <HAL_DMA_Init>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001138:	f7ff fbe4 	bl	8000904 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a11      	ldr	r2, [pc, #68]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001140:	671a      	str	r2, [r3, #112]	@ 0x70
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0x270>)
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	201c      	movs	r0, #28
 800114e:	f000 f963 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001152:	201c      	movs	r0, #28
 8001154:	f000 f975 	bl	8001442 <HAL_NVIC_EnableIRQ>
}
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b00b      	add	sp, #44	@ 0x2c
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	40004800 	.word	0x40004800
 8001164:	40021000 	.word	0x40021000
 8001168:	200002d4 	.word	0x200002d4
 800116c:	40020030 	.word	0x40020030
 8001170:	2000031c 	.word	0x2000031c
 8001174:	4002001c 	.word	0x4002001c
 8001178:	40004400 	.word	0x40004400
 800117c:	20000364 	.word	0x20000364
 8001180:	40020058 	.word	0x40020058
 8001184:	200003ac 	.word	0x200003ac
 8001188:	40020044 	.word	0x40020044

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	   ldr   r0, =_estack
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800118e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001190:	f7ff fe5c 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	@ (80011cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LoopForever+0xe>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <LoopForever+0x16>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f003 f98d 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff faff 	bl	80007c0 <main>

080011c2 <LoopForever>:

LoopForever:
    b LoopForever
 80011c2:	e7fe      	b.n	80011c2 <LoopForever>
	   ldr   r0, =_estack
 80011c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011d0:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 80011d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011d8:	20000544 	.word	0x20000544

080011dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_COMP_IRQHandler>
	...

080011e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_Init+0x3c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Init+0x3c>)
 80011f2:	2140      	movs	r1, #64	@ 0x40
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f811 	bl	8001220 <HAL_InitTick>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d003      	beq.n	800120a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e001      	b.n	800120e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120a:	f7ff fcf7 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_InitTick+0x5c>)
 800122a:	681c      	ldr	r4, [r3, #0]
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_InitTick+0x60>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	0019      	movs	r1, r3
 8001232:	23fa      	movs	r3, #250	@ 0xfa
 8001234:	0098      	lsls	r0, r3, #2
 8001236:	f7fe ff71 	bl	800011c <__udivsi3>
 800123a:	0003      	movs	r3, r0
 800123c:	0019      	movs	r1, r3
 800123e:	0020      	movs	r0, r4
 8001240:	f7fe ff6c 	bl	800011c <__udivsi3>
 8001244:	0003      	movs	r3, r0
 8001246:	0018      	movs	r0, r3
 8001248:	f000 f90b 	bl	8001462 <HAL_SYSTICK_Config>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d001      	beq.n	8001254 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e00f      	b.n	8001274 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d80b      	bhi.n	8001272 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	2301      	movs	r3, #1
 800125e:	425b      	negs	r3, r3
 8001260:	2200      	movs	r2, #0
 8001262:	0018      	movs	r0, r3
 8001264:	f000 f8d8 	bl	8001418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_InitTick+0x64>)
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b003      	add	sp, #12
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	001a      	movs	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	18d2      	adds	r2, r2, r3
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_IncTick+0x20>)
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	20000008 	.word	0x20000008
 80012a8:	200003f4 	.word	0x200003f4

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	200003f4 	.word	0x200003f4

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	0002      	movs	r2, r0
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80012d2:	d809      	bhi.n	80012e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	001a      	movs	r2, r3
 80012da:	231f      	movs	r3, #31
 80012dc:	401a      	ands	r2, r3
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <__NVIC_EnableIRQ+0x30>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	4091      	lsls	r1, r2
 80012e4:	000a      	movs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
  }
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	0002      	movs	r2, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b7f      	cmp	r3, #127	@ 0x7f
 8001308:	d828      	bhi.n	800135c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130a:	4a2f      	ldr	r2, [pc, #188]	@ (80013c8 <__NVIC_SetPriority+0xd4>)
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	33c0      	adds	r3, #192	@ 0xc0
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	589b      	ldr	r3, [r3, r2]
 800131a:	1dfa      	adds	r2, r7, #7
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	0011      	movs	r1, r2
 8001320:	2203      	movs	r2, #3
 8001322:	400a      	ands	r2, r1
 8001324:	00d2      	lsls	r2, r2, #3
 8001326:	21ff      	movs	r1, #255	@ 0xff
 8001328:	4091      	lsls	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	43d2      	mvns	r2, r2
 800132e:	401a      	ands	r2, r3
 8001330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	22ff      	movs	r2, #255	@ 0xff
 8001338:	401a      	ands	r2, r3
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0018      	movs	r0, r3
 8001340:	2303      	movs	r3, #3
 8001342:	4003      	ands	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001348:	481f      	ldr	r0, [pc, #124]	@ (80013c8 <__NVIC_SetPriority+0xd4>)
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	430a      	orrs	r2, r1
 8001354:	33c0      	adds	r3, #192	@ 0xc0
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800135a:	e031      	b.n	80013c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <__NVIC_SetPriority+0xd8>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0019      	movs	r1, r3
 8001364:	230f      	movs	r3, #15
 8001366:	400b      	ands	r3, r1
 8001368:	3b08      	subs	r3, #8
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3306      	adds	r3, #6
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1dfa      	adds	r2, r7, #7
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	0011      	movs	r1, r2
 800137c:	2203      	movs	r2, #3
 800137e:	400a      	ands	r2, r1
 8001380:	00d2      	lsls	r2, r2, #3
 8001382:	21ff      	movs	r1, #255	@ 0xff
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	43d2      	mvns	r2, r2
 800138a:	401a      	ands	r2, r3
 800138c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	019b      	lsls	r3, r3, #6
 8001392:	22ff      	movs	r2, #255	@ 0xff
 8001394:	401a      	ands	r2, r3
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	0018      	movs	r0, r3
 800139c:	2303      	movs	r3, #3
 800139e:	4003      	ands	r3, r0
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a4:	4809      	ldr	r0, [pc, #36]	@ (80013cc <__NVIC_SetPriority+0xd8>)
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	001c      	movs	r4, r3
 80013ac:	230f      	movs	r3, #15
 80013ae:	4023      	ands	r3, r4
 80013b0:	3b08      	subs	r3, #8
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	430a      	orrs	r2, r1
 80013b6:	3306      	adds	r3, #6
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	18c3      	adds	r3, r0, r3
 80013bc:	3304      	adds	r3, #4
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b003      	add	sp, #12
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	045b      	lsls	r3, r3, #17
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d301      	bcc.n	80013e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e4:	2301      	movs	r3, #1
 80013e6:	e010      	b.n	800140a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <SysTick_Config+0x44>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	3a01      	subs	r2, #1
 80013ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f0:	2301      	movs	r3, #1
 80013f2:	425b      	negs	r3, r3
 80013f4:	2103      	movs	r1, #3
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff ff7c 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SysTick_Config+0x44>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <SysTick_Config+0x44>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	210f      	movs	r1, #15
 8001424:	187b      	adds	r3, r7, r1
 8001426:	1c02      	adds	r2, r0, #0
 8001428:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	187b      	adds	r3, r7, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ff5d 	bl	80012f4 <__NVIC_SetPriority>
}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	0002      	movs	r2, r0
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b25b      	sxtb	r3, r3
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff ff33 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ffaf 	bl	80013d0 <SysTick_Config>
 8001472:	0003      	movs	r3, r0
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e061      	b.n	8001552 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a32      	ldr	r2, [pc, #200]	@ (800155c <HAL_DMA_Init+0xe0>)
 8001494:	4694      	mov	ip, r2
 8001496:	4463      	add	r3, ip
 8001498:	2114      	movs	r1, #20
 800149a:	0018      	movs	r0, r3
 800149c:	f7fe fe3e 	bl	800011c <__udivsi3>
 80014a0:	0003      	movs	r3, r0
 80014a2:	009a      	lsls	r2, r3, #2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001560 <HAL_DMA_Init+0xe4>)
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2225      	movs	r2, #37	@ 0x25
 80014b2:	2102      	movs	r1, #2
 80014b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4a28      	ldr	r2, [pc, #160]	@ (8001564 <HAL_DMA_Init+0xe8>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	01db      	lsls	r3, r3, #7
 8001504:	429a      	cmp	r2, r3
 8001506:	d018      	beq.n	800153a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <HAL_DMA_Init+0xec>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	211c      	movs	r1, #28
 8001512:	400b      	ands	r3, r1
 8001514:	210f      	movs	r1, #15
 8001516:	4099      	lsls	r1, r3
 8001518:	000b      	movs	r3, r1
 800151a:	43d9      	mvns	r1, r3
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_DMA_Init+0xec>)
 800151e:	400a      	ands	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_DMA_Init+0xec>)
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	201c      	movs	r0, #28
 8001530:	4003      	ands	r3, r0
 8001532:	409a      	lsls	r2, r3
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_DMA_Init+0xec>)
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2225      	movs	r2, #37	@ 0x25
 8001544:	2101      	movs	r1, #1
 8001546:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2224      	movs	r2, #36	@ 0x24
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	bffdfff8 	.word	0xbffdfff8
 8001560:	40020000 	.word	0x40020000
 8001564:	ffff800f 	.word	0xffff800f
 8001568:	400200a8 	.word	0x400200a8

0800156c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2317      	movs	r3, #23
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2224      	movs	r2, #36	@ 0x24
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_DMA_Start_IT+0x24>
 800158c:	2302      	movs	r3, #2
 800158e:	e04f      	b.n	8001630 <HAL_DMA_Start_IT+0xc4>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2224      	movs	r2, #36	@ 0x24
 8001594:	2101      	movs	r1, #1
 8001596:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2225      	movs	r2, #37	@ 0x25
 800159c:	5c9b      	ldrb	r3, [r3, r2]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d13a      	bne.n	800161a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2225      	movs	r2, #37	@ 0x25
 80015a8:	2102      	movs	r1, #2
 80015aa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	438a      	bics	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f96a 	bl	80018a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	210e      	movs	r1, #14
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00f      	b.n	8001608 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2104      	movs	r1, #4
 80015f4:	438a      	bics	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	210a      	movs	r1, #10
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e007      	b.n	800162a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2224      	movs	r2, #36	@ 0x24
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001622:	2317      	movs	r3, #23
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2202      	movs	r2, #2
 8001628:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800162a:	2317      	movs	r3, #23
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b006      	add	sp, #24
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	230f      	movs	r3, #15
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2225      	movs	r2, #37	@ 0x25
 800164c:	5c9b      	ldrb	r3, [r3, r2]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2224      	movs	r2, #36	@ 0x24
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e024      	b.n	80016b0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	210e      	movs	r1, #14
 8001672:	438a      	bics	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	438a      	bics	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	221c      	movs	r2, #28
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	2101      	movs	r1, #1
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2225      	movs	r2, #37	@ 0x25
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2224      	movs	r2, #36	@ 0x24
 80016a6:	2100      	movs	r1, #0
 80016a8:	5499      	strb	r1, [r3, r2]

    return status;
 80016aa:	230f      	movs	r3, #15
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	210f      	movs	r1, #15
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2225      	movs	r2, #37	@ 0x25
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d006      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e02a      	b.n	8001738 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	210e      	movs	r1, #14
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	221c      	movs	r2, #28
 8001708:	401a      	ands	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	2101      	movs	r1, #1
 8001710:	4091      	lsls	r1, r2
 8001712:	000a      	movs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2225      	movs	r2, #37	@ 0x25
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2224      	movs	r2, #36	@ 0x24
 8001722:	2100      	movs	r1, #0
 8001724:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	0010      	movs	r0, r2
 8001736:	4798      	blx	r3
    }
  }
  return status;
 8001738:	230f      	movs	r3, #15
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	221c      	movs	r2, #28
 8001764:	4013      	ands	r3, r2
 8001766:	2204      	movs	r2, #4
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4013      	ands	r3, r2
 8001770:	d026      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x7a>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2204      	movs	r2, #4
 8001776:	4013      	ands	r3, r2
 8001778:	d022      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2220      	movs	r2, #32
 8001782:	4013      	ands	r3, r2
 8001784:	d107      	bne.n	8001796 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2104      	movs	r1, #4
 8001792:	438a      	bics	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	221c      	movs	r2, #28
 800179c:	401a      	ands	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	2104      	movs	r1, #4
 80017a4:	4091      	lsls	r1, r2
 80017a6:	000a      	movs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x6e>
 80017b2:	e071      	b.n	8001898 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	0010      	movs	r0, r2
 80017bc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80017be:	e06b      	b.n	8001898 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	221c      	movs	r2, #28
 80017c6:	4013      	ands	r3, r2
 80017c8:	2202      	movs	r2, #2
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	d02d      	beq.n	8001830 <HAL_DMA_IRQHandler+0xea>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d029      	beq.n	8001830 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2220      	movs	r2, #32
 80017e4:	4013      	ands	r3, r2
 80017e6:	d10b      	bne.n	8001800 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	210a      	movs	r1, #10
 80017f4:	438a      	bics	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2225      	movs	r2, #37	@ 0x25
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001804:	221c      	movs	r2, #28
 8001806:	401a      	ands	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	2102      	movs	r1, #2
 800180e:	4091      	lsls	r1, r2
 8001810:	000a      	movs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	@ 0x24
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d039      	beq.n	8001898 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	0010      	movs	r0, r2
 800182c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800182e:	e033      	b.n	8001898 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	221c      	movs	r2, #28
 8001836:	4013      	ands	r3, r2
 8001838:	2208      	movs	r2, #8
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	d02a      	beq.n	800189a <HAL_DMA_IRQHandler+0x154>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2208      	movs	r2, #8
 8001848:	4013      	ands	r3, r2
 800184a:	d026      	beq.n	800189a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	210e      	movs	r1, #14
 8001858:	438a      	bics	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	221c      	movs	r2, #28
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2101      	movs	r1, #1
 800186a:	4091      	lsls	r1, r2
 800186c:	000a      	movs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2225      	movs	r2, #37	@ 0x25
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2224      	movs	r2, #36	@ 0x24
 8001882:	2100      	movs	r1, #0
 8001884:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	0010      	movs	r0, r2
 8001896:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46c0      	nop			@ (mov r8, r8)
}
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b4:	221c      	movs	r2, #28
 80018b6:	401a      	ands	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	2101      	movs	r1, #1
 80018be:	4091      	lsls	r1, r2
 80018c0:	000a      	movs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d108      	bne.n	80018e6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018e4:	e007      	b.n	80018f6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	60da      	str	r2, [r3, #12]
}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001916:	e149      	b.n	8001bac <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4091      	lsls	r1, r2
 8001922:	000a      	movs	r2, r1
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d100      	bne.n	8001930 <HAL_GPIO_Init+0x30>
 800192e:	e13a      	b.n	8001ba6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	4013      	ands	r3, r2
 8001938:	2b01      	cmp	r3, #1
 800193a:	d005      	beq.n	8001948 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001944:	2b02      	cmp	r3, #2
 8001946:	d130      	bne.n	80019aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	409a      	lsls	r2, r3
 8001956:	0013      	movs	r3, r2
 8001958:	43da      	mvns	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	409a      	lsls	r2, r3
 800196a:	0013      	movs	r3, r2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197e:	2201      	movs	r2, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	43da      	mvns	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	2201      	movs	r2, #1
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2203      	movs	r2, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d017      	beq.n	80019e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2203      	movs	r2, #3
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d123      	bne.n	8001a3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	58d3      	ldr	r3, [r2, r3]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2207      	movs	r2, #7
 8001a04:	4013      	ands	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2107      	movs	r1, #7
 8001a1e:	400b      	ands	r3, r1
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	6939      	ldr	r1, [r7, #16]
 8001a38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2203      	movs	r2, #3
 8001a58:	401a      	ands	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	23c0      	movs	r3, #192	@ 0xc0
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d100      	bne.n	8001a7c <HAL_GPIO_Init+0x17c>
 8001a7a:	e094      	b.n	8001ba6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7c:	4b51      	ldr	r3, [pc, #324]	@ (8001bc4 <HAL_GPIO_Init+0x2c4>)
 8001a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a80:	4b50      	ldr	r3, [pc, #320]	@ (8001bc4 <HAL_GPIO_Init+0x2c4>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	430a      	orrs	r2, r1
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a88:	4a4f      	ldr	r2, [pc, #316]	@ (8001bc8 <HAL_GPIO_Init+0x2c8>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	589b      	ldr	r3, [r3, r2]
 8001a94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	23a0      	movs	r3, #160	@ 0xa0
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x1de>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a44      	ldr	r2, [pc, #272]	@ (8001bcc <HAL_GPIO_Init+0x2cc>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x1da>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a43      	ldr	r2, [pc, #268]	@ (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x1d6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a42      	ldr	r2, [pc, #264]	@ (8001bd4 <HAL_GPIO_Init+0x2d4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x1d2>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	@ (8001bc8 <HAL_GPIO_Init+0x2c8>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	035b      	lsls	r3, r3, #13
 8001b16:	4013      	ands	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	039b      	lsls	r3, r3, #14
 8001b40:	4013      	ands	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	029b      	lsls	r3, r3, #10
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	025b      	lsls	r3, r3, #9
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <HAL_GPIO_Init+0x2d8>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	40da      	lsrs	r2, r3
 8001bb4:	1e13      	subs	r3, r2, #0
 8001bb6:	d000      	beq.n	8001bba <HAL_GPIO_Init+0x2ba>
 8001bb8:	e6ae      	b.n	8001918 <HAL_GPIO_Init+0x18>
  }
}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b006      	add	sp, #24
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	50000400 	.word	0x50000400
 8001bd0:	50000800 	.word	0x50000800
 8001bd4:	50001c00 	.word	0x50001c00
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	0008      	movs	r0, r1
 8001be6:	0011      	movs	r1, r2
 8001be8:	1cbb      	adds	r3, r7, #2
 8001bea:	1c02      	adds	r2, r0, #0
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	1c7b      	adds	r3, r7, #1
 8001bf0:	1c0a      	adds	r2, r1, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf4:	1c7b      	adds	r3, r7, #1
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfc:	1cbb      	adds	r3, r7, #2
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c06:	1cbb      	adds	r3, r7, #2
 8001c08:	881a      	ldrh	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b002      	add	sp, #8
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f000 fb6c 	bl	8002304 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2c:	4bc8      	ldr	r3, [pc, #800]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	220c      	movs	r2, #12
 8001c32:	4013      	ands	r3, r2
 8001c34:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c36:	4bc6      	ldr	r3, [pc, #792]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	025b      	lsls	r3, r3, #9
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCC_OscConfig+0x36>
 8001c4c:	e07d      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d007      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x68>
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	4bba      	ldr	r3, [pc, #744]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	029b      	lsls	r3, r3, #10
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d100      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5a>
 8001c70:	e06a      	b.n	8001d48 <HAL_RCC_OscConfig+0x130>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d166      	bne.n	8001d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f000 fb42 	bl	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x84>
 8001c8c:	4bb0      	ldr	r3, [pc, #704]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4baf      	ldr	r3, [pc, #700]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	0249      	lsls	r1, r1, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e027      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	23a0      	movs	r3, #160	@ 0xa0
 8001ca2:	02db      	lsls	r3, r3, #11
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xae>
 8001ca8:	4ba9      	ldr	r3, [pc, #676]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4ba8      	ldr	r3, [pc, #672]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	02c9      	lsls	r1, r1, #11
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4ba5      	ldr	r3, [pc, #660]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0249      	lsls	r1, r1, #9
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e012      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cc6:	4ba2      	ldr	r3, [pc, #648]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4ba1      	ldr	r3, [pc, #644]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	49a1      	ldr	r1, [pc, #644]	@ (8001f54 <HAL_RCC_OscConfig+0x33c>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b9f      	ldr	r3, [pc, #636]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4b9b      	ldr	r3, [pc, #620]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	499c      	ldr	r1, [pc, #624]	@ (8001f58 <HAL_RCC_OscConfig+0x340>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fada 	bl	80012ac <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fad5 	bl	80012ac <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	@ 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e2f9      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d10:	4b8f      	ldr	r3, [pc, #572]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0xe6>
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fac5 	bl	80012ac <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fac0 	bl	80012ac <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e2e4      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d3a:	4b85      	ldr	r3, [pc, #532]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	029b      	lsls	r3, r3, #10
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x110>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x13e>
 8001d54:	e099      	b.n	8001e8a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	2220      	movs	r2, #32
 8001d60:	4013      	ands	r3, r2
 8001d62:	d009      	beq.n	8001d78 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d64:	4b7a      	ldr	r3, [pc, #488]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b79      	ldr	r3, [pc, #484]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	2220      	movs	r2, #32
 8001d74:	4393      	bics	r3, r2
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d13e      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ea>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d13b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d8a:	4b71      	ldr	r3, [pc, #452]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4013      	ands	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_RCC_OscConfig+0x186>
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e2b2      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	4b68      	ldr	r3, [pc, #416]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001db4:	4b66      	ldr	r3, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2209      	movs	r2, #9
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	4b64      	ldr	r3, [pc, #400]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc6:	f000 fbeb 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8001dca:	0001      	movs	r1, r0
 8001dcc:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	4a62      	ldr	r2, [pc, #392]	@ (8001f60 <HAL_RCC_OscConfig+0x348>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	000a      	movs	r2, r1
 8001ddc:	40da      	lsrs	r2, r3
 8001dde:	4b61      	ldr	r3, [pc, #388]	@ (8001f64 <HAL_RCC_OscConfig+0x34c>)
 8001de0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001de2:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <HAL_RCC_OscConfig+0x350>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2513      	movs	r5, #19
 8001de8:	197c      	adds	r4, r7, r5
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff fa18 	bl	8001220 <HAL_InitTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001df4:	197b      	adds	r3, r7, r5
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d046      	beq.n	8001e8a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001dfc:	197b      	adds	r3, r7, r5
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	e280      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d027      	beq.n	8001e58 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e08:	4b51      	ldr	r3, [pc, #324]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	4b4f      	ldr	r3, [pc, #316]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fa47 	bl	80012ac <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa42 	bl	80012ac <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e266      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e36:	4b46      	ldr	r3, [pc, #280]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f1      	beq.n	8001e24 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b43      	ldr	r3, [pc, #268]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a45      	ldr	r2, [pc, #276]	@ (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	021a      	lsls	r2, r3, #8
 8001e50:	4b3f      	ldr	r3, [pc, #252]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	4b3d      	ldr	r3, [pc, #244]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fa22 	bl	80012ac <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fa1d 	bl	80012ac <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e241      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e80:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2204      	movs	r2, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f1      	bne.n	8001e6e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2210      	movs	r2, #16
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x27e>
 8001e94:	e0a1      	b.n	8001fda <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d140      	bne.n	8001f1e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x29c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e227      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb4:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f6c <HAL_RCC_OscConfig+0x354>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	0a19      	lsrs	r1, r3, #8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	061a      	lsls	r2, r3, #24
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	0b5b      	lsrs	r3, r3, #13
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	2280      	movs	r2, #128	@ 0x80
 8001ee6:	0212      	lsls	r2, r2, #8
 8001ee8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	491a      	ldr	r1, [pc, #104]	@ (8001f60 <HAL_RCC_OscConfig+0x348>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_RCC_OscConfig+0x34c>)
 8001efc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_RCC_OscConfig+0x350>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2513      	movs	r5, #19
 8001f04:	197c      	adds	r4, r7, r5
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff f98a 	bl	8001220 <HAL_InitTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f10:	197b      	adds	r3, r7, r5
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d060      	beq.n	8001fda <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001f18:	197b      	adds	r3, r7, r5
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	e1f2      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03f      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f9ba 	bl	80012ac <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f3c:	e018      	b.n	8001f70 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f9b5 	bl	80012ac <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d911      	bls.n	8001f70 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1d9      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	fffeffff 	.word	0xfffeffff
 8001f58:	fffbffff 	.word	0xfffbffff
 8001f5c:	ffffe0ff 	.word	0xffffe0ff
 8001f60:	08005174 	.word	0x08005174
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f70:	4bc9      	ldr	r3, [pc, #804]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0e0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4bc6      	ldr	r3, [pc, #792]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4ac6      	ldr	r2, [pc, #792]	@ (800229c <HAL_RCC_OscConfig+0x684>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	4bc3      	ldr	r3, [pc, #780]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f90:	4bc1      	ldr	r3, [pc, #772]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	0a19      	lsrs	r1, r3, #8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	061a      	lsls	r2, r3, #24
 8001f9e:	4bbe      	ldr	r3, [pc, #760]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	e019      	b.n	8001fda <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fa6:	4bbc      	ldr	r3, [pc, #752]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4bbb      	ldr	r3, [pc, #748]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fac:	49bc      	ldr	r1, [pc, #752]	@ (80022a0 <HAL_RCC_OscConfig+0x688>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f97b 	bl	80012ac <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f976 	bl	80012ac <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e19a      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fce:	4bb2      	ldr	r3, [pc, #712]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2208      	movs	r2, #8
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d036      	beq.n	8002052 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d019      	beq.n	8002020 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fec:	4baa      	ldr	r3, [pc, #680]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ff0:	4ba9      	ldr	r3, [pc, #676]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f958 	bl	80012ac <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f953 	bl	80012ac <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e177      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002014:	4ba0      	ldr	r3, [pc, #640]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d0f1      	beq.n	8002002 <HAL_RCC_OscConfig+0x3ea>
 800201e:	e018      	b.n	8002052 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002020:	4b9d      	ldr	r3, [pc, #628]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002024:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff f93e 	bl	80012ac <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002036:	f7ff f939 	bl	80012ac <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e15d      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002048:	4b93      	ldr	r3, [pc, #588]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800204a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d1f1      	bne.n	8002036 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d100      	bne.n	800205e <HAL_RCC_OscConfig+0x446>
 800205c:	e0ae      	b.n	80021bc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2023      	movs	r0, #35	@ 0x23
 8002060:	183b      	adds	r3, r7, r0
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b8c      	ldr	r3, [pc, #560]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	055b      	lsls	r3, r3, #21
 800206e:	4013      	ands	r3, r2
 8002070:	d109      	bne.n	8002086 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b89      	ldr	r3, [pc, #548]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002076:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002078:	2180      	movs	r1, #128	@ 0x80
 800207a:	0549      	lsls	r1, r1, #21
 800207c:	430a      	orrs	r2, r1
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002080:	183b      	adds	r3, r7, r0
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b87      	ldr	r3, [pc, #540]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d11a      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b84      	ldr	r3, [pc, #528]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a0:	f7ff f904 	bl	80012ac <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff f8ff 	bl	80012ac <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	@ 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e123      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b79      	ldr	r3, [pc, #484]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4cc>
 80020d4:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020da:	2180      	movs	r1, #128	@ 0x80
 80020dc:	0049      	lsls	r1, r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80020e2:	e031      	b.n	8002148 <HAL_RCC_OscConfig+0x530>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x4ee>
 80020ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020f0:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020f2:	496b      	ldr	r1, [pc, #428]	@ (80022a0 <HAL_RCC_OscConfig+0x688>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020fe:	496a      	ldr	r1, [pc, #424]	@ (80022a8 <HAL_RCC_OscConfig+0x690>)
 8002100:	400a      	ands	r2, r1
 8002102:	651a      	str	r2, [r3, #80]	@ 0x50
 8002104:	e020      	b.n	8002148 <HAL_RCC_OscConfig+0x530>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	23a0      	movs	r3, #160	@ 0xa0
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	429a      	cmp	r2, r3
 8002110:	d10e      	bne.n	8002130 <HAL_RCC_OscConfig+0x518>
 8002112:	4b61      	ldr	r3, [pc, #388]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	00c9      	lsls	r1, r1, #3
 800211c:	430a      	orrs	r2, r1
 800211e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002120:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002122:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002124:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002126:	2180      	movs	r1, #128	@ 0x80
 8002128:	0049      	lsls	r1, r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	651a      	str	r2, [r3, #80]	@ 0x50
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x530>
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002132:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002134:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002136:	495a      	ldr	r1, [pc, #360]	@ (80022a0 <HAL_RCC_OscConfig+0x688>)
 8002138:	400a      	ands	r2, r1
 800213a:	651a      	str	r2, [r3, #80]	@ 0x50
 800213c:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800213e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002140:	4b55      	ldr	r3, [pc, #340]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002142:	4959      	ldr	r1, [pc, #356]	@ (80022a8 <HAL_RCC_OscConfig+0x690>)
 8002144:	400a      	ands	r2, r1
 8002146:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff f8ac 	bl	80012ac <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002158:	e009      	b.n	800216e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff f8a7 	bl	80012ac <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	4a51      	ldr	r2, [pc, #324]	@ (80022ac <HAL_RCC_OscConfig+0x694>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0ca      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216e:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4013      	ands	r3, r2
 8002178:	d0ef      	beq.n	800215a <HAL_RCC_OscConfig+0x542>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7ff f896 	bl	80012ac <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002184:	e009      	b.n	800219a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff f891 	bl	80012ac <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	4a46      	ldr	r2, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x694>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0b4      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219a:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800219c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1ef      	bne.n	8002186 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a6:	2323      	movs	r3, #35	@ 0x23
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021b6:	493e      	ldr	r1, [pc, #248]	@ (80022b0 <HAL_RCC_OscConfig+0x698>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d100      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5ae>
 80021c4:	e09d      	b.n	8002302 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x5b6>
 80021cc:	e076      	b.n	80022bc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d145      	bne.n	8002262 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021dc:	4935      	ldr	r1, [pc, #212]	@ (80022b4 <HAL_RCC_OscConfig+0x69c>)
 80021de:	400a      	ands	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff f863 	bl	80012ac <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f85e 	bl	80012ac <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e082      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	049b      	lsls	r3, r3, #18
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4a2a      	ldr	r2, [pc, #168]	@ (80022b8 <HAL_RCC_OscConfig+0x6a0>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	431a      	orrs	r2, r3
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002226:	430a      	orrs	r2, r1
 8002228:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002230:	2180      	movs	r1, #128	@ 0x80
 8002232:	0449      	lsls	r1, r1, #17
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f838 	bl	80012ac <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff f833 	bl	80012ac <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e057      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	4013      	ands	r3, r2
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x62a>
 8002260:	e04f      	b.n	8002302 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002268:	4912      	ldr	r1, [pc, #72]	@ (80022b4 <HAL_RCC_OscConfig+0x69c>)
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff f81d 	bl	80012ac <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff f818 	bl	80012ac <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e03c      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800228a:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x660>
 8002296:	e034      	b.n	8002302 <HAL_RCC_OscConfig+0x6ea>
 8002298:	40021000 	.word	0x40021000
 800229c:	ffff1fff 	.word	0xffff1fff
 80022a0:	fffffeff 	.word	0xfffffeff
 80022a4:	40007000 	.word	0x40007000
 80022a8:	fffffbff 	.word	0xfffffbff
 80022ac:	00001388 	.word	0x00001388
 80022b0:	efffffff 	.word	0xefffffff
 80022b4:	feffffff 	.word	0xfeffffff
 80022b8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_OscConfig+0x6f4>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	429a      	cmp	r2, r3
 80022dc:	d10f      	bne.n	80022fe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	23f0      	movs	r3, #240	@ 0xf0
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	401a      	ands	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	23c0      	movs	r3, #192	@ 0xc0
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	401a      	ands	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b00a      	add	sp, #40	@ 0x28
 800230a:	bdb0      	pop	{r4, r5, r7, pc}
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e128      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b96      	ldr	r3, [pc, #600]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	4013      	ands	r3, r2
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d91e      	bls.n	8002370 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b93      	ldr	r3, [pc, #588]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4393      	bics	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	4b90      	ldr	r3, [pc, #576]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002344:	f7fe ffb2 	bl	80012ac <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	e009      	b.n	8002362 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234e:	f7fe ffad 	bl	80012ac <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a8a      	ldr	r2, [pc, #552]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e109      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b87      	ldr	r3, [pc, #540]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	4013      	ands	r3, r2
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b83      	ldr	r3, [pc, #524]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	22f0      	movs	r2, #240	@ 0xf0
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b7f      	ldr	r3, [pc, #508]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d100      	bne.n	800239a <HAL_RCC_ClockConfig+0x8a>
 8002398:	e089      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a2:	4b79      	ldr	r3, [pc, #484]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	029b      	lsls	r3, r3, #10
 80023aa:	4013      	ands	r3, r2
 80023ac:	d120      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0e1      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ba:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	049b      	lsls	r3, r3, #18
 80023c2:	4013      	ands	r3, r2
 80023c4:	d114      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0d5      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0ca      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023e0:	4b69      	ldr	r3, [pc, #420]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0c2      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f0:	4b65      	ldr	r3, [pc, #404]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4393      	bics	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4b62      	ldr	r3, [pc, #392]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7fe ff52 	bl	80012ac <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d111      	bne.n	8002438 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	e009      	b.n	800242a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7fe ff49 	bl	80012ac <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0a5      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800242a:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	220c      	movs	r2, #12
 8002430:	4013      	ands	r3, r2
 8002432:	2b08      	cmp	r3, #8
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_ClockConfig+0x106>
 8002436:	e03a      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d111      	bne.n	8002464 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	e009      	b.n	8002456 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002442:	f7fe ff33 	bl	80012ac <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e08f      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002456:	4b4c      	ldr	r3, [pc, #304]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	220c      	movs	r2, #12
 800245c:	4013      	ands	r3, r2
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d1ef      	bne.n	8002442 <HAL_RCC_ClockConfig+0x132>
 8002462:	e024      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d11b      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800246c:	e009      	b.n	8002482 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe ff1d 	bl	80012ac <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a42      	ldr	r2, [pc, #264]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e079      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	220c      	movs	r2, #12
 8002488:	4013      	ands	r3, r2
 800248a:	2b04      	cmp	r3, #4
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_ClockConfig+0x15e>
 800248e:	e00e      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe ff0c 	bl	80012ac <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	4a3a      	ldr	r2, [pc, #232]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e068      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024a4:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	220c      	movs	r2, #12
 80024aa:	4013      	ands	r3, r2
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ae:	4b34      	ldr	r3, [pc, #208]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4013      	ands	r3, r2
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d21e      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024bc:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4393      	bics	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024ce:	f7fe feed 	bl	80012ac <HAL_GetTick>
 80024d2:	0003      	movs	r3, r0
 80024d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	e009      	b.n	80024ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe fee8 	bl	80012ac <HAL_GetTick>
 80024dc:	0002      	movs	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e044      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ec:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d1ee      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a20      	ldr	r2, [pc, #128]	@ (800258c <HAL_RCC_ClockConfig+0x27c>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2208      	movs	r2, #8
 800251e:	4013      	ands	r3, r2
 8002520:	d00a      	beq.n	8002538 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <HAL_RCC_ClockConfig+0x280>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00da      	lsls	r2, r3, #3
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002538:	f000 f832 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800253c:	0001      	movs	r1, r0
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	220f      	movs	r2, #15
 8002546:	4013      	ands	r3, r2
 8002548:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <HAL_RCC_ClockConfig+0x284>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	000a      	movs	r2, r1
 800254e:	40da      	lsrs	r2, r3
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <HAL_RCC_ClockConfig+0x28c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	250b      	movs	r5, #11
 800255a:	197c      	adds	r4, r7, r5
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fe5f 	bl	8001220 <HAL_InitTick>
 8002562:	0003      	movs	r3, r0
 8002564:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002566:	197b      	adds	r3, r7, r5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800256e:	197b      	adds	r3, r7, r5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	e000      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	40022000 	.word	0x40022000
 8002584:	00001388 	.word	0x00001388
 8002588:	40021000 	.word	0x40021000
 800258c:	fffff8ff 	.word	0xfffff8ff
 8002590:	ffffc7ff 	.word	0xffffc7ff
 8002594:	08005174 	.word	0x08005174
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b08e      	sub	sp, #56	@ 0x38
 80025a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025a6:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ae:	230c      	movs	r3, #12
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d014      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x40>
 80025b6:	d900      	bls.n	80025ba <HAL_RCC_GetSysClockFreq+0x1a>
 80025b8:	e07b      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x112>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d002      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x24>
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x3a>
 80025c2:	e076      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025c4:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2210      	movs	r2, #16
 80025ca:	4013      	ands	r3, r2
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025ce:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80025d0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025d2:	e07c      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80025d4:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x140>)
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80025d8:	e079      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025da:	4b42      	ldr	r3, [pc, #264]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x144>)
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80025de:	e076      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	0c9a      	lsrs	r2, r3, #18
 80025e4:	230f      	movs	r3, #15
 80025e6:	401a      	ands	r2, r3
 80025e8:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x148>)
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f0:	0d9a      	lsrs	r2, r3, #22
 80025f2:	2303      	movs	r3, #3
 80025f4:	4013      	ands	r3, r2
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	4013      	ands	r3, r2
 8002604:	d01a      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	4a35      	ldr	r2, [pc, #212]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002610:	2300      	movs	r3, #0
 8002612:	69b8      	ldr	r0, [r7, #24]
 8002614:	69f9      	ldr	r1, [r7, #28]
 8002616:	f7fd ff17 	bl	8000448 <__aeabi_lmul>
 800261a:	0002      	movs	r2, r0
 800261c:	000b      	movs	r3, r1
 800261e:	0010      	movs	r0, r2
 8002620:	0019      	movs	r1, r3
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f7fd feeb 	bl	8000408 <__aeabi_uldivmod>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	0013      	movs	r3, r2
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
 800263a:	e037      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800263c:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x138>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2210      	movs	r2, #16
 8002642:	4013      	ands	r3, r2
 8002644:	d01a      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002650:	2300      	movs	r3, #0
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	f7fd fef7 	bl	8000448 <__aeabi_lmul>
 800265a:	0002      	movs	r2, r0
 800265c:	000b      	movs	r3, r1
 800265e:	0010      	movs	r0, r2
 8002660:	0019      	movs	r1, r3
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f7fd fecb 	bl	8000408 <__aeabi_uldivmod>
 8002672:	0002      	movs	r2, r0
 8002674:	000b      	movs	r3, r1
 8002676:	0013      	movs	r3, r2
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
 800267a:	e017      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267e:	0018      	movs	r0, r3
 8002680:	2300      	movs	r3, #0
 8002682:	0019      	movs	r1, r3
 8002684:	4a16      	ldr	r2, [pc, #88]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002686:	2300      	movs	r3, #0
 8002688:	f7fd fede 	bl	8000448 <__aeabi_lmul>
 800268c:	0002      	movs	r2, r0
 800268e:	000b      	movs	r3, r1
 8002690:	0010      	movs	r0, r2
 8002692:	0019      	movs	r1, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	001c      	movs	r4, r3
 8002698:	2300      	movs	r3, #0
 800269a:	001d      	movs	r5, r3
 800269c:	0022      	movs	r2, r4
 800269e:	002b      	movs	r3, r5
 80026a0:	f7fd feb2 	bl	8000408 <__aeabi_uldivmod>
 80026a4:	0002      	movs	r2, r0
 80026a6:	000b      	movs	r3, r1
 80026a8:	0013      	movs	r3, r2
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80026ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80026b0:	e00d      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	2207      	movs	r2, #7
 80026ba:	4013      	ands	r3, r2
 80026bc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	3301      	adds	r3, #1
 80026c2:	2280      	movs	r2, #128	@ 0x80
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80026cc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b00e      	add	sp, #56	@ 0x38
 80026d6:	bdb0      	pop	{r4, r5, r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	003d0900 	.word	0x003d0900
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200
 80026e8:	0800518c 	.word	0x0800518c

080026ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b02      	ldr	r3, [pc, #8]	@ (80026fc <HAL_RCC_GetHCLKFreq+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	20000000 	.word	0x20000000

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff2 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002708:	0001      	movs	r1, r0
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	2207      	movs	r2, #7
 8002712:	4013      	ands	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	40d9      	lsrs	r1, r3
 800271a:	000b      	movs	r3, r1
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	40021000 	.word	0x40021000
 8002728:	08005184 	.word	0x08005184

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002730:	f7ff ffdc 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002734:	0001      	movs	r1, r0
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	0adb      	lsrs	r3, r3, #11
 800273c:	2207      	movs	r2, #7
 800273e:	4013      	ands	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	40d9      	lsrs	r1, r3
 8002746:	000b      	movs	r3, r1
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	40021000 	.word	0x40021000
 8002754:	08005184 	.word	0x08005184

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002760:	2017      	movs	r0, #23
 8002762:	183b      	adds	r3, r7, r0
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2220      	movs	r2, #32
 800276e:	4013      	ands	r3, r2
 8002770:	d100      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002772:	e0c7      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002774:	4b84      	ldr	r3, [pc, #528]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	055b      	lsls	r3, r3, #21
 800277c:	4013      	ands	r3, r2
 800277e:	d109      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	4b81      	ldr	r3, [pc, #516]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002784:	4b80      	ldr	r3, [pc, #512]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002786:	2180      	movs	r1, #128	@ 0x80
 8002788:	0549      	lsls	r1, r1, #21
 800278a:	430a      	orrs	r2, r1
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800278e:	183b      	adds	r3, r7, r0
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b7d      	ldr	r3, [pc, #500]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d11a      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a0:	4b7a      	ldr	r3, [pc, #488]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b79      	ldr	r3, [pc, #484]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80027a6:	2180      	movs	r1, #128	@ 0x80
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fd7d 	bl	80012ac <HAL_GetTick>
 80027b2:	0003      	movs	r3, r0
 80027b4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	e008      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7fe fd78 	bl	80012ac <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0d9      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b70      	ldr	r3, [pc, #448]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	23c0      	movs	r3, #192	@ 0xc0
 80027dc:	039b      	lsls	r3, r3, #14
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	23c0      	movs	r3, #192	@ 0xc0
 80027e8:	039b      	lsls	r3, r3, #14
 80027ea:	4013      	ands	r3, r2
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d013      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	23c0      	movs	r3, #192	@ 0xc0
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	401a      	ands	r2, r3
 80027fc:	23c0      	movs	r3, #192	@ 0xc0
 80027fe:	029b      	lsls	r3, r3, #10
 8002800:	429a      	cmp	r2, r3
 8002802:	d10a      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002804:	4b60      	ldr	r3, [pc, #384]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	401a      	ands	r2, r3
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	429a      	cmp	r2, r3
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0b1      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800281a:	4b5b      	ldr	r3, [pc, #364]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800281c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800281e:	23c0      	movs	r3, #192	@ 0xc0
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d03b      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	23c0      	movs	r3, #192	@ 0xc0
 8002832:	029b      	lsls	r3, r3, #10
 8002834:	4013      	ands	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d033      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2220      	movs	r2, #32
 8002842:	4013      	ands	r3, r2
 8002844:	d02e      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002846:	4b50      	ldr	r3, [pc, #320]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284a:	4a51      	ldr	r2, [pc, #324]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002852:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002854:	4b4c      	ldr	r3, [pc, #304]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	0309      	lsls	r1, r1, #12
 800285a:	430a      	orrs	r2, r1
 800285c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285e:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002862:	4b49      	ldr	r3, [pc, #292]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002864:	494b      	ldr	r1, [pc, #300]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002866:	400a      	ands	r2, r1
 8002868:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800286a:	4b47      	ldr	r3, [pc, #284]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d014      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fd17 	bl	80012ac <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002882:	e009      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fd12 	bl	80012ac <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a42      	ldr	r2, [pc, #264]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e072      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002898:	4b3b      	ldr	r3, [pc, #236]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800289a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0ef      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2220      	movs	r2, #32
 80028aa:	4013      	ands	r3, r2
 80028ac:	d01f      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	23c0      	movs	r3, #192	@ 0xc0
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	401a      	ands	r2, r3
 80028b8:	23c0      	movs	r3, #192	@ 0xc0
 80028ba:	029b      	lsls	r3, r3, #10
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10c      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x182>
 80028c0:	4b31      	ldr	r3, [pc, #196]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a35      	ldr	r2, [pc, #212]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	23c0      	movs	r3, #192	@ 0xc0
 80028d0:	039b      	lsls	r3, r3, #14
 80028d2:	401a      	ands	r2, r3
 80028d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4b2b      	ldr	r3, [pc, #172]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	23c0      	movs	r3, #192	@ 0xc0
 80028e4:	029b      	lsls	r3, r3, #10
 80028e6:	401a      	ands	r2, r3
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ee:	2317      	movs	r3, #23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b23      	ldr	r3, [pc, #140]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028fe:	4928      	ldr	r1, [pc, #160]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002900:	400a      	ands	r2, r1
 8002902:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	220c      	movs	r2, #12
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800291e:	430a      	orrs	r2, r1
 8002920:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800292c:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002930:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800293c:	430a      	orrs	r2, r1
 800293e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2208      	movs	r2, #8
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294a:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	4a16      	ldr	r2, [pc, #88]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800295a:	430a      	orrs	r2, r1
 800295c:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2280      	movs	r2, #128	@ 0x80
 8002964:	4013      	ands	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296c:	4a0f      	ldr	r2, [pc, #60]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002978:	430a      	orrs	r2, r1
 800297a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b006      	add	sp, #24
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
 8002990:	fffcffff 	.word	0xfffcffff
 8002994:	fff7ffff 	.word	0xfff7ffff
 8002998:	00001388 	.word	0x00001388
 800299c:	ffcfffff 	.word	0xffcfffff
 80029a0:	efffffff 	.word	0xefffffff
 80029a4:	fffff3ff 	.word	0xfffff3ff
 80029a8:	ffffcfff 	.word	0xffffcfff
 80029ac:	fff3ffff 	.word	0xfff3ffff

080029b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e044      	b.n	8002a4c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2278      	movs	r2, #120	@ 0x78
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fe fa9d 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2224      	movs	r2, #36	@ 0x24
 80029de:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fb32 	bl	800305c <UART_SetConfig>
 80029f8:	0003      	movs	r3, r0
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e024      	b.n	8002a4c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fd6f 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	490d      	ldr	r1, [pc, #52]	@ (8002a54 <HAL_UART_Init+0xa4>)
 8002a1e:	400a      	ands	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	212a      	movs	r1, #42	@ 0x2a
 8002a2e:	438a      	bics	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 fe07 	bl	8003658 <UART_CheckIdleState>
 8002a4a:	0003      	movs	r3, r0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	ffffb7ff 	.word	0xffffb7ff

08002a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b0ab      	sub	sp, #172	@ 0xac
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	22a4      	movs	r2, #164	@ 0xa4
 8002a68:	18b9      	adds	r1, r7, r2
 8002a6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	20a0      	movs	r0, #160	@ 0xa0
 8002a74:	1839      	adds	r1, r7, r0
 8002a76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	219c      	movs	r1, #156	@ 0x9c
 8002a80:	1879      	adds	r1, r7, r1
 8002a82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a84:	0011      	movs	r1, r2
 8002a86:	18bb      	adds	r3, r7, r2
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a99      	ldr	r2, [pc, #612]	@ (8002cf0 <HAL_UART_IRQHandler+0x298>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2298      	movs	r2, #152	@ 0x98
 8002a90:	18bc      	adds	r4, r7, r2
 8002a92:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a94:	18bb      	adds	r3, r7, r2
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d114      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d00f      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aa6:	183b      	adds	r3, r7, r0
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	4013      	ands	r3, r2
 8002aae:	d00a      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <HAL_UART_IRQHandler+0x62>
 8002ab8:	e2a0      	b.n	8002ffc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	0010      	movs	r0, r2
 8002ac2:	4798      	blx	r3
      }
      return;
 8002ac4:	e29a      	b.n	8002ffc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ac6:	2398      	movs	r3, #152	@ 0x98
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d100      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x7a>
 8002ad0:	e114      	b.n	8002cfc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ad2:	239c      	movs	r3, #156	@ 0x9c
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	d106      	bne.n	8002aec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ade:	23a0      	movs	r3, #160	@ 0xa0
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a83      	ldr	r2, [pc, #524]	@ (8002cf4 <HAL_UART_IRQHandler+0x29c>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d100      	bne.n	8002aec <HAL_UART_IRQHandler+0x94>
 8002aea:	e107      	b.n	8002cfc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aec:	23a4      	movs	r3, #164	@ 0xa4
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d012      	beq.n	8002b1e <HAL_UART_IRQHandler+0xc6>
 8002af8:	23a0      	movs	r3, #160	@ 0xa0
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2284      	movs	r2, #132	@ 0x84
 8002b12:	589b      	ldr	r3, [r3, r2]
 8002b14:	2201      	movs	r2, #1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2184      	movs	r1, #132	@ 0x84
 8002b1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1e:	23a4      	movs	r3, #164	@ 0xa4
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d011      	beq.n	8002b4e <HAL_UART_IRQHandler+0xf6>
 8002b2a:	239c      	movs	r3, #156	@ 0x9c
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2284      	movs	r2, #132	@ 0x84
 8002b42:	589b      	ldr	r3, [r3, r2]
 8002b44:	2204      	movs	r2, #4
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2184      	movs	r1, #132	@ 0x84
 8002b4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b4e:	23a4      	movs	r3, #164	@ 0xa4
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2204      	movs	r2, #4
 8002b56:	4013      	ands	r3, r2
 8002b58:	d011      	beq.n	8002b7e <HAL_UART_IRQHandler+0x126>
 8002b5a:	239c      	movs	r3, #156	@ 0x9c
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2284      	movs	r2, #132	@ 0x84
 8002b72:	589b      	ldr	r3, [r3, r2]
 8002b74:	2202      	movs	r2, #2
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2184      	movs	r1, #132	@ 0x84
 8002b7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b7e:	23a4      	movs	r3, #164	@ 0xa4
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4013      	ands	r3, r2
 8002b88:	d017      	beq.n	8002bba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b8a:	23a0      	movs	r3, #160	@ 0xa0
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2220      	movs	r2, #32
 8002b92:	4013      	ands	r3, r2
 8002b94:	d105      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b96:	239c      	movs	r3, #156	@ 0x9c
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2284      	movs	r2, #132	@ 0x84
 8002bae:	589b      	ldr	r3, [r3, r2]
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2184      	movs	r1, #132	@ 0x84
 8002bb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bba:	23a4      	movs	r3, #164	@ 0xa4
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x198>
 8002bc8:	23a0      	movs	r3, #160	@ 0xa0
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	04db      	lsls	r3, r3, #19
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2284      	movs	r2, #132	@ 0x84
 8002be4:	589b      	ldr	r3, [r3, r2]
 8002be6:	2220      	movs	r2, #32
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2184      	movs	r1, #132	@ 0x84
 8002bee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2284      	movs	r2, #132	@ 0x84
 8002bf4:	589b      	ldr	r3, [r3, r2]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d100      	bne.n	8002bfc <HAL_UART_IRQHandler+0x1a4>
 8002bfa:	e201      	b.n	8003000 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bfc:	23a4      	movs	r3, #164	@ 0xa4
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c08:	23a0      	movs	r3, #160	@ 0xa0
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	4013      	ands	r3, r2
 8002c12:	d008      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	0010      	movs	r0, r2
 8002c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2284      	movs	r2, #132	@ 0x84
 8002c2a:	589b      	ldr	r3, [r3, r2]
 8002c2c:	2194      	movs	r1, #148	@ 0x94
 8002c2e:	187a      	adds	r2, r7, r1
 8002c30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2240      	movs	r2, #64	@ 0x40
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b40      	cmp	r3, #64	@ 0x40
 8002c3e:	d004      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2228      	movs	r2, #40	@ 0x28
 8002c46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c48:	d047      	beq.n	8002cda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 fed9 	bl	8003a04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b40      	cmp	r3, #64	@ 0x40
 8002c5e:	d137      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c60:	f3ef 8310 	mrs	r3, PRIMASK
 8002c64:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c68:	2090      	movs	r0, #144	@ 0x90
 8002c6a:	183a      	adds	r2, r7, r0
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c74:	f383 8810 	msr	PRIMASK, r3
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2140      	movs	r1, #64	@ 0x40
 8002c86:	438a      	bics	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	183b      	adds	r3, r7, r0
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d012      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <HAL_UART_IRQHandler+0x2a0>)
 8002ca6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fe fd03 	bl	80016b8 <HAL_DMA_Abort_IT>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d01a      	beq.n	8002cec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e012      	b.n	8002cec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f9bf 	bl	800304c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cce:	e00d      	b.n	8002cec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f9ba 	bl	800304c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	e008      	b.n	8002cec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 f9b5 	bl	800304c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2284      	movs	r2, #132	@ 0x84
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002cea:	e189      	b.n	8003000 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	46c0      	nop			@ (mov r8, r8)
    return;
 8002cee:	e187      	b.n	8003000 <HAL_UART_IRQHandler+0x5a8>
 8002cf0:	0000080f 	.word	0x0000080f
 8002cf4:	04000120 	.word	0x04000120
 8002cf8:	08003cc3 	.word	0x08003cc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d000      	beq.n	8002d06 <HAL_UART_IRQHandler+0x2ae>
 8002d04:	e13b      	b.n	8002f7e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d06:	23a4      	movs	r3, #164	@ 0xa4
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d100      	bne.n	8002d14 <HAL_UART_IRQHandler+0x2bc>
 8002d12:	e134      	b.n	8002f7e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d14:	23a0      	movs	r3, #160	@ 0xa0
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <HAL_UART_IRQHandler+0x2ca>
 8002d20:	e12d      	b.n	8002f7e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2210      	movs	r2, #16
 8002d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2240      	movs	r2, #64	@ 0x40
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b40      	cmp	r3, #64	@ 0x40
 8002d36:	d000      	beq.n	8002d3a <HAL_UART_IRQHandler+0x2e2>
 8002d38:	e0a1      	b.n	8002e7e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	217e      	movs	r1, #126	@ 0x7e
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d100      	bne.n	8002d52 <HAL_UART_IRQHandler+0x2fa>
 8002d50:	e158      	b.n	8003004 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2258      	movs	r2, #88	@ 0x58
 8002d56:	5a9b      	ldrh	r3, [r3, r2]
 8002d58:	187a      	adds	r2, r7, r1
 8002d5a:	8812      	ldrh	r2, [r2, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d300      	bcc.n	8002d62 <HAL_UART_IRQHandler+0x30a>
 8002d60:	e150      	b.n	8003004 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	187a      	adds	r2, r7, r1
 8002d66:	215a      	movs	r1, #90	@ 0x5a
 8002d68:	8812      	ldrh	r2, [r2, #0]
 8002d6a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2220      	movs	r2, #32
 8002d76:	4013      	ands	r3, r2
 8002d78:	d16f      	bne.n	8002e5a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d84:	2301      	movs	r3, #1
 8002d86:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	499e      	ldr	r1, [pc, #632]	@ (8003014 <HAL_UART_IRQHandler+0x5bc>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dac:	f3ef 8310 	mrs	r3, PRIMASK
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002db6:	2301      	movs	r3, #1
 8002db8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	438a      	bics	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dde:	f3ef 8310 	mrs	r3, PRIMASK
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de8:	2301      	movs	r3, #1
 8002dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2140      	movs	r1, #64	@ 0x40
 8002e00:	438a      	bics	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e06:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0a:	f383 8810 	msr	PRIMASK, r3
}
 8002e0e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	2120      	movs	r1, #32
 8002e16:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e22:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e28:	2301      	movs	r3, #1
 8002e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e2e:	f383 8810 	msr	PRIMASK, r3
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2110      	movs	r1, #16
 8002e40:	438a      	bics	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e4a:	f383 8810 	msr	PRIMASK, r3
}
 8002e4e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7fe fbef 	bl	8001638 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2258      	movs	r2, #88	@ 0x58
 8002e64:	5a9a      	ldrh	r2, [r3, r2]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	215a      	movs	r1, #90	@ 0x5a
 8002e6a:	5a5b      	ldrh	r3, [r3, r1]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0011      	movs	r1, r2
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd fc80 	bl	800077c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e7c:	e0c2      	b.n	8003004 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2258      	movs	r2, #88	@ 0x58
 8002e82:	5a99      	ldrh	r1, [r3, r2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	225a      	movs	r2, #90	@ 0x5a
 8002e88:	5a9b      	ldrh	r3, [r3, r2]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	208e      	movs	r0, #142	@ 0x8e
 8002e8e:	183b      	adds	r3, r7, r0
 8002e90:	1a8a      	subs	r2, r1, r2
 8002e92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	225a      	movs	r2, #90	@ 0x5a
 8002e98:	5a9b      	ldrh	r3, [r3, r2]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d100      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x44a>
 8002ea0:	e0b2      	b.n	8003008 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002ea2:	183b      	adds	r3, r7, r0
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d100      	bne.n	8002eac <HAL_UART_IRQHandler+0x454>
 8002eaa:	e0ad      	b.n	8003008 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eac:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb4:	2488      	movs	r4, #136	@ 0x88
 8002eb6:	193a      	adds	r2, r7, r4
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4951      	ldr	r1, [pc, #324]	@ (8003018 <HAL_UART_IRQHandler+0x5c0>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f383 8810 	msr	PRIMASK, r3
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	2484      	movs	r4, #132	@ 0x84
 8002eee:	193a      	adds	r2, r7, r4
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f383 8810 	msr	PRIMASK, r3
}
 8002f1a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	2120      	movs	r1, #32
 8002f22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f30:	f3ef 8310 	mrs	r3, PRIMASK
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f38:	2480      	movs	r4, #128	@ 0x80
 8002f3a:	193a      	adds	r2, r7, r4
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2110      	movs	r1, #16
 8002f56:	438a      	bics	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	f383 8810 	msr	PRIMASK, r3
}
 8002f66:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7fd fc00 	bl	800077c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f7c:	e044      	b.n	8003008 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f7e:	23a4      	movs	r3, #164	@ 0xa4
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	035b      	lsls	r3, r3, #13
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d010      	beq.n	8002fae <HAL_UART_IRQHandler+0x556>
 8002f8c:	239c      	movs	r3, #156	@ 0x9c
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	03db      	lsls	r3, r3, #15
 8002f96:	4013      	ands	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	0352      	lsls	r2, r2, #13
 8002fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 fecd 	bl	8003d46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fac:	e02f      	b.n	800300e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fae:	23a4      	movs	r3, #164	@ 0xa4
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2280      	movs	r2, #128	@ 0x80
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fba:	23a0      	movs	r3, #160	@ 0xa0
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01e      	beq.n	800300c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	4798      	blx	r3
    }
    return;
 8002fd8:	e018      	b.n	800300c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fda:	23a4      	movs	r3, #164	@ 0xa4
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_UART_IRQHandler+0x5b6>
 8002fe6:	23a0      	movs	r3, #160	@ 0xa0
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2240      	movs	r2, #64	@ 0x40
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00d      	beq.n	800300e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 fe7b 	bl	8003cf0 <UART_EndTransmit_IT>
    return;
 8002ffa:	e008      	b.n	800300e <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e006      	b.n	800300e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	e004      	b.n	800300e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	e002      	b.n	800300e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003008:	46c0      	nop			@ (mov r8, r8)
 800300a:	e000      	b.n	800300e <HAL_UART_IRQHandler+0x5b6>
    return;
 800300c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800300e:	46bd      	mov	sp, r7
 8003010:	b02b      	add	sp, #172	@ 0xac
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	fffffeff 	.word	0xfffffeff
 8003018:	fffffedf 	.word	0xfffffedf

0800301c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003044:	46c0      	nop			@ (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b08e      	sub	sp, #56	@ 0x38
 8003060:	af00      	add	r7, sp, #0
 8003062:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003064:	231a      	movs	r3, #26
 8003066:	2218      	movs	r2, #24
 8003068:	189b      	adds	r3, r3, r2
 800306a:	19db      	adds	r3, r3, r7
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	431a      	orrs	r2, r3
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4ab4      	ldr	r2, [pc, #720]	@ (8003360 <UART_SetConfig+0x304>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4aaf      	ldr	r2, [pc, #700]	@ (8003364 <UART_SetConfig+0x308>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4aa9      	ldr	r2, [pc, #676]	@ (8003368 <UART_SetConfig+0x30c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030cc:	4313      	orrs	r3, r2
 80030ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4aa5      	ldr	r2, [pc, #660]	@ (800336c <UART_SetConfig+0x310>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4aa1      	ldr	r2, [pc, #644]	@ (8003370 <UART_SetConfig+0x314>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d131      	bne.n	8003154 <UART_SetConfig+0xf8>
 80030f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003374 <UART_SetConfig+0x318>)
 80030f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f4:	220c      	movs	r2, #12
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d01d      	beq.n	8003138 <UART_SetConfig+0xdc>
 80030fc:	d823      	bhi.n	8003146 <UART_SetConfig+0xea>
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d00c      	beq.n	800311c <UART_SetConfig+0xc0>
 8003102:	d820      	bhi.n	8003146 <UART_SetConfig+0xea>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <UART_SetConfig+0xb2>
 8003108:	2b04      	cmp	r3, #4
 800310a:	d00e      	beq.n	800312a <UART_SetConfig+0xce>
 800310c:	e01b      	b.n	8003146 <UART_SetConfig+0xea>
 800310e:	231b      	movs	r3, #27
 8003110:	2218      	movs	r2, #24
 8003112:	189b      	adds	r3, r3, r2
 8003114:	19db      	adds	r3, r3, r7
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e065      	b.n	80031e8 <UART_SetConfig+0x18c>
 800311c:	231b      	movs	r3, #27
 800311e:	2218      	movs	r2, #24
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2202      	movs	r2, #2
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e05e      	b.n	80031e8 <UART_SetConfig+0x18c>
 800312a:	231b      	movs	r3, #27
 800312c:	2218      	movs	r2, #24
 800312e:	189b      	adds	r3, r3, r2
 8003130:	19db      	adds	r3, r3, r7
 8003132:	2204      	movs	r2, #4
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e057      	b.n	80031e8 <UART_SetConfig+0x18c>
 8003138:	231b      	movs	r3, #27
 800313a:	2218      	movs	r2, #24
 800313c:	189b      	adds	r3, r3, r2
 800313e:	19db      	adds	r3, r3, r7
 8003140:	2208      	movs	r2, #8
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e050      	b.n	80031e8 <UART_SetConfig+0x18c>
 8003146:	231b      	movs	r3, #27
 8003148:	2218      	movs	r2, #24
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2210      	movs	r2, #16
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e049      	b.n	80031e8 <UART_SetConfig+0x18c>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a83      	ldr	r2, [pc, #524]	@ (8003368 <UART_SetConfig+0x30c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d13e      	bne.n	80031dc <UART_SetConfig+0x180>
 800315e:	4b85      	ldr	r3, [pc, #532]	@ (8003374 <UART_SetConfig+0x318>)
 8003160:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003162:	23c0      	movs	r3, #192	@ 0xc0
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4013      	ands	r3, r2
 8003168:	22c0      	movs	r2, #192	@ 0xc0
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	4293      	cmp	r3, r2
 800316e:	d027      	beq.n	80031c0 <UART_SetConfig+0x164>
 8003170:	22c0      	movs	r2, #192	@ 0xc0
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	4293      	cmp	r3, r2
 8003176:	d82a      	bhi.n	80031ce <UART_SetConfig+0x172>
 8003178:	2280      	movs	r2, #128	@ 0x80
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	4293      	cmp	r3, r2
 800317e:	d011      	beq.n	80031a4 <UART_SetConfig+0x148>
 8003180:	2280      	movs	r2, #128	@ 0x80
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	4293      	cmp	r3, r2
 8003186:	d822      	bhi.n	80031ce <UART_SetConfig+0x172>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <UART_SetConfig+0x13a>
 800318c:	2280      	movs	r2, #128	@ 0x80
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <UART_SetConfig+0x156>
 8003194:	e01b      	b.n	80031ce <UART_SetConfig+0x172>
 8003196:	231b      	movs	r3, #27
 8003198:	2218      	movs	r2, #24
 800319a:	189b      	adds	r3, r3, r2
 800319c:	19db      	adds	r3, r3, r7
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e021      	b.n	80031e8 <UART_SetConfig+0x18c>
 80031a4:	231b      	movs	r3, #27
 80031a6:	2218      	movs	r2, #24
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	19db      	adds	r3, r3, r7
 80031ac:	2202      	movs	r2, #2
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e01a      	b.n	80031e8 <UART_SetConfig+0x18c>
 80031b2:	231b      	movs	r3, #27
 80031b4:	2218      	movs	r2, #24
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	19db      	adds	r3, r3, r7
 80031ba:	2204      	movs	r2, #4
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e013      	b.n	80031e8 <UART_SetConfig+0x18c>
 80031c0:	231b      	movs	r3, #27
 80031c2:	2218      	movs	r2, #24
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	19db      	adds	r3, r3, r7
 80031c8:	2208      	movs	r2, #8
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e00c      	b.n	80031e8 <UART_SetConfig+0x18c>
 80031ce:	231b      	movs	r3, #27
 80031d0:	2218      	movs	r2, #24
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	19db      	adds	r3, r3, r7
 80031d6:	2210      	movs	r2, #16
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e005      	b.n	80031e8 <UART_SetConfig+0x18c>
 80031dc:	231b      	movs	r3, #27
 80031de:	2218      	movs	r2, #24
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	2210      	movs	r2, #16
 80031e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5e      	ldr	r2, [pc, #376]	@ (8003368 <UART_SetConfig+0x30c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d000      	beq.n	80031f4 <UART_SetConfig+0x198>
 80031f2:	e084      	b.n	80032fe <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031f4:	231b      	movs	r3, #27
 80031f6:	2218      	movs	r2, #24
 80031f8:	189b      	adds	r3, r3, r2
 80031fa:	19db      	adds	r3, r3, r7
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d01d      	beq.n	800323e <UART_SetConfig+0x1e2>
 8003202:	dc20      	bgt.n	8003246 <UART_SetConfig+0x1ea>
 8003204:	2b04      	cmp	r3, #4
 8003206:	d015      	beq.n	8003234 <UART_SetConfig+0x1d8>
 8003208:	dc1d      	bgt.n	8003246 <UART_SetConfig+0x1ea>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <UART_SetConfig+0x1b8>
 800320e:	2b02      	cmp	r3, #2
 8003210:	d005      	beq.n	800321e <UART_SetConfig+0x1c2>
 8003212:	e018      	b.n	8003246 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7ff fa74 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8003218:	0003      	movs	r3, r0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800321c:	e01c      	b.n	8003258 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321e:	4b55      	ldr	r3, [pc, #340]	@ (8003374 <UART_SetConfig+0x318>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	4013      	ands	r3, r2
 8003226:	d002      	beq.n	800322e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003228:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <UART_SetConfig+0x31c>)
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800322c:	e014      	b.n	8003258 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800322e:	4b53      	ldr	r3, [pc, #332]	@ (800337c <UART_SetConfig+0x320>)
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003232:	e011      	b.n	8003258 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003234:	f7ff f9b4 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8003238:	0003      	movs	r3, r0
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800323c:	e00c      	b.n	8003258 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003244:	e008      	b.n	8003258 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800324a:	231a      	movs	r3, #26
 800324c:	2218      	movs	r2, #24
 800324e:	189b      	adds	r3, r3, r2
 8003250:	19db      	adds	r3, r3, r7
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
        break;
 8003256:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d100      	bne.n	8003260 <UART_SetConfig+0x204>
 800325e:	e12f      	b.n	80034c0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	0013      	movs	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	189b      	adds	r3, r3, r2
 800326a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326c:	429a      	cmp	r2, r3
 800326e:	d305      	bcc.n	800327c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d906      	bls.n	800328a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800327c:	231a      	movs	r3, #26
 800327e:	2218      	movs	r2, #24
 8003280:	189b      	adds	r3, r3, r2
 8003282:	19db      	adds	r3, r3, r7
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e11a      	b.n	80034c0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	6939      	ldr	r1, [r7, #16]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	000b      	movs	r3, r1
 8003298:	0e1b      	lsrs	r3, r3, #24
 800329a:	0010      	movs	r0, r2
 800329c:	0205      	lsls	r5, r0, #8
 800329e:	431d      	orrs	r5, r3
 80032a0:	000b      	movs	r3, r1
 80032a2:	021c      	lsls	r4, r3, #8
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68b8      	ldr	r0, [r7, #8]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	1900      	adds	r0, r0, r4
 80032b6:	4169      	adcs	r1, r5
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f7fd f89f 	bl	8000408 <__aeabi_uldivmod>
 80032ca:	0002      	movs	r2, r0
 80032cc:	000b      	movs	r3, r1
 80032ce:	0013      	movs	r3, r2
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d4:	23c0      	movs	r3, #192	@ 0xc0
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d309      	bcc.n	80032f0 <UART_SetConfig+0x294>
 80032dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	035b      	lsls	r3, r3, #13
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d204      	bcs.n	80032f0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	e0e7      	b.n	80034c0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80032f0:	231a      	movs	r3, #26
 80032f2:	2218      	movs	r2, #24
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e0e0      	b.n	80034c0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	2380      	movs	r3, #128	@ 0x80
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	429a      	cmp	r2, r3
 8003308:	d000      	beq.n	800330c <UART_SetConfig+0x2b0>
 800330a:	e082      	b.n	8003412 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800330c:	231b      	movs	r3, #27
 800330e:	2218      	movs	r2, #24
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d834      	bhi.n	8003384 <UART_SetConfig+0x328>
 800331a:	009a      	lsls	r2, r3, #2
 800331c:	4b18      	ldr	r3, [pc, #96]	@ (8003380 <UART_SetConfig+0x324>)
 800331e:	18d3      	adds	r3, r2, r3
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7ff f9ec 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8003328:	0003      	movs	r3, r0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800332c:	e033      	b.n	8003396 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800332e:	f7ff f9fd 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8003332:	0003      	movs	r3, r0
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003336:	e02e      	b.n	8003396 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003338:	4b0e      	ldr	r3, [pc, #56]	@ (8003374 <UART_SetConfig+0x318>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2210      	movs	r2, #16
 800333e:	4013      	ands	r3, r2
 8003340:	d002      	beq.n	8003348 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003342:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <UART_SetConfig+0x31c>)
 8003344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003346:	e026      	b.n	8003396 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <UART_SetConfig+0x320>)
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800334c:	e023      	b.n	8003396 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334e:	f7ff f927 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8003352:	0003      	movs	r3, r0
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003356:	e01e      	b.n	8003396 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800335e:	e01a      	b.n	8003396 <UART_SetConfig+0x33a>
 8003360:	efff69f3 	.word	0xefff69f3
 8003364:	ffffcfff 	.word	0xffffcfff
 8003368:	40004800 	.word	0x40004800
 800336c:	fffff4ff 	.word	0xfffff4ff
 8003370:	40004400 	.word	0x40004400
 8003374:	40021000 	.word	0x40021000
 8003378:	003d0900 	.word	0x003d0900
 800337c:	00f42400 	.word	0x00f42400
 8003380:	08005198 	.word	0x08005198
      default:
        pclk = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003388:	231a      	movs	r3, #26
 800338a:	2218      	movs	r2, #24
 800338c:	189b      	adds	r3, r3, r2
 800338e:	19db      	adds	r3, r3, r7
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
        break;
 8003394:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d100      	bne.n	800339e <UART_SetConfig+0x342>
 800339c:	e090      	b.n	80034c0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	005a      	lsls	r2, r3, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f7fc feb3 	bl	800011c <__udivsi3>
 80033b6:	0003      	movs	r3, r0
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d921      	bls.n	8003404 <UART_SetConfig+0x3a8>
 80033c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	025b      	lsls	r3, r3, #9
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d21c      	bcs.n	8003404 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	200e      	movs	r0, #14
 80033d0:	2418      	movs	r4, #24
 80033d2:	1903      	adds	r3, r0, r4
 80033d4:	19db      	adds	r3, r3, r7
 80033d6:	210f      	movs	r1, #15
 80033d8:	438a      	bics	r2, r1
 80033da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2207      	movs	r2, #7
 80033e4:	4013      	ands	r3, r2
 80033e6:	b299      	uxth	r1, r3
 80033e8:	1903      	adds	r3, r0, r4
 80033ea:	19db      	adds	r3, r3, r7
 80033ec:	1902      	adds	r2, r0, r4
 80033ee:	19d2      	adds	r2, r2, r7
 80033f0:	8812      	ldrh	r2, [r2, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1902      	adds	r2, r0, r4
 80033fc:	19d2      	adds	r2, r2, r7
 80033fe:	8812      	ldrh	r2, [r2, #0]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e05d      	b.n	80034c0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003404:	231a      	movs	r3, #26
 8003406:	2218      	movs	r2, #24
 8003408:	189b      	adds	r3, r3, r2
 800340a:	19db      	adds	r3, r3, r7
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e056      	b.n	80034c0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003412:	231b      	movs	r3, #27
 8003414:	2218      	movs	r2, #24
 8003416:	189b      	adds	r3, r3, r2
 8003418:	19db      	adds	r3, r3, r7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d822      	bhi.n	8003466 <UART_SetConfig+0x40a>
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	4b2f      	ldr	r3, [pc, #188]	@ (80034e0 <UART_SetConfig+0x484>)
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800342a:	f7ff f969 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 800342e:	0003      	movs	r3, r0
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003432:	e021      	b.n	8003478 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7ff f97a 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8003438:	0003      	movs	r3, r0
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800343c:	e01c      	b.n	8003478 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800343e:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <UART_SetConfig+0x488>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	4013      	ands	r3, r2
 8003446:	d002      	beq.n	800344e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003448:	4b27      	ldr	r3, [pc, #156]	@ (80034e8 <UART_SetConfig+0x48c>)
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800344c:	e014      	b.n	8003478 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800344e:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <UART_SetConfig+0x490>)
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003452:	e011      	b.n	8003478 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003454:	f7ff f8a4 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8003458:	0003      	movs	r3, r0
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800345c:	e00c      	b.n	8003478 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003464:	e008      	b.n	8003478 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800346a:	231a      	movs	r3, #26
 800346c:	2218      	movs	r2, #24
 800346e:	189b      	adds	r3, r3, r2
 8003470:	19db      	adds	r3, r3, r7
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
        break;
 8003476:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d020      	beq.n	80034c0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	085a      	lsrs	r2, r3, #1
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	18d2      	adds	r2, r2, r3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0019      	movs	r1, r3
 800348e:	0010      	movs	r0, r2
 8003490:	f7fc fe44 	bl	800011c <__udivsi3>
 8003494:	0003      	movs	r3, r0
 8003496:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	2b0f      	cmp	r3, #15
 800349c:	d90a      	bls.n	80034b4 <UART_SetConfig+0x458>
 800349e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	025b      	lsls	r3, r3, #9
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d205      	bcs.n	80034b4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	e005      	b.n	80034c0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80034b4:	231a      	movs	r3, #26
 80034b6:	2218      	movs	r2, #24
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2200      	movs	r2, #0
 80034c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2200      	movs	r2, #0
 80034ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034cc:	231a      	movs	r3, #26
 80034ce:	2218      	movs	r2, #24
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b00e      	add	sp, #56	@ 0x38
 80034dc:	bdb0      	pop	{r4, r5, r7, pc}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	080051bc 	.word	0x080051bc
 80034e4:	40021000 	.word	0x40021000
 80034e8:	003d0900 	.word	0x003d0900
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	2201      	movs	r2, #1
 80034fe:	4013      	ands	r3, r2
 8003500:	d00b      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a4a      	ldr	r2, [pc, #296]	@ (8003634 <UART_AdvFeatureConfig+0x144>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2202      	movs	r2, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d00b      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a43      	ldr	r2, [pc, #268]	@ (8003638 <UART_AdvFeatureConfig+0x148>)
 800352c:	4013      	ands	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	2204      	movs	r2, #4
 8003542:	4013      	ands	r3, r2
 8003544:	d00b      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a3b      	ldr	r2, [pc, #236]	@ (800363c <UART_AdvFeatureConfig+0x14c>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	2208      	movs	r2, #8
 8003564:	4013      	ands	r3, r2
 8003566:	d00b      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a34      	ldr	r2, [pc, #208]	@ (8003640 <UART_AdvFeatureConfig+0x150>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	2210      	movs	r2, #16
 8003586:	4013      	ands	r3, r2
 8003588:	d00b      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <UART_AdvFeatureConfig+0x154>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	2220      	movs	r2, #32
 80035a8:	4013      	ands	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a25      	ldr	r2, [pc, #148]	@ (8003648 <UART_AdvFeatureConfig+0x158>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2240      	movs	r2, #64	@ 0x40
 80035ca:	4013      	ands	r3, r2
 80035cc:	d01d      	beq.n	800360a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <UART_AdvFeatureConfig+0x15c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	035b      	lsls	r3, r3, #13
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d10b      	bne.n	800360a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a15      	ldr	r2, [pc, #84]	@ (8003650 <UART_AdvFeatureConfig+0x160>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	2280      	movs	r2, #128	@ 0x80
 8003610:	4013      	ands	r3, r2
 8003612:	d00b      	beq.n	800362c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a0e      	ldr	r2, [pc, #56]	@ (8003654 <UART_AdvFeatureConfig+0x164>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }
}
 800362c:	46c0      	nop			@ (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fffdffff 	.word	0xfffdffff
 8003638:	fffeffff 	.word	0xfffeffff
 800363c:	fffbffff 	.word	0xfffbffff
 8003640:	ffff7fff 	.word	0xffff7fff
 8003644:	ffffefff 	.word	0xffffefff
 8003648:	ffffdfff 	.word	0xffffdfff
 800364c:	ffefffff 	.word	0xffefffff
 8003650:	ff9fffff 	.word	0xff9fffff
 8003654:	fff7ffff 	.word	0xfff7ffff

08003658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b092      	sub	sp, #72	@ 0x48
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2284      	movs	r2, #132	@ 0x84
 8003664:	2100      	movs	r1, #0
 8003666:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003668:	f7fd fe20 	bl	80012ac <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2208      	movs	r2, #8
 8003678:	4013      	ands	r3, r2
 800367a:	2b08      	cmp	r3, #8
 800367c:	d12c      	bne.n	80036d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003680:	2280      	movs	r2, #128	@ 0x80
 8003682:	0391      	lsls	r1, r2, #14
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4a46      	ldr	r2, [pc, #280]	@ (80037a0 <UART_CheckIdleState+0x148>)
 8003688:	9200      	str	r2, [sp, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	f000 f88c 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d021      	beq.n	80036d8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003694:	f3ef 8310 	mrs	r3, PRIMASK
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800369c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800369e:	2301      	movs	r3, #1
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	f383 8810 	msr	PRIMASK, r3
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2180      	movs	r1, #128	@ 0x80
 80036b6:	438a      	bics	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2278      	movs	r2, #120	@ 0x78
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e05f      	b.n	8003798 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2204      	movs	r2, #4
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d146      	bne.n	8003774 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	2280      	movs	r2, #128	@ 0x80
 80036ea:	03d1      	lsls	r1, r2, #15
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4a2c      	ldr	r2, [pc, #176]	@ (80037a0 <UART_CheckIdleState+0x148>)
 80036f0:	9200      	str	r2, [sp, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f000 f858 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d03b      	beq.n	8003774 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	60fb      	str	r3, [r7, #12]
  return(result);
 8003702:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003704:	637b      	str	r3, [r7, #52]	@ 0x34
 8003706:	2301      	movs	r3, #1
 8003708:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			@ (mov r8, r8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4921      	ldr	r1, [pc, #132]	@ (80037a4 <UART_CheckIdleState+0x14c>)
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f383 8810 	msr	PRIMASK, r3
}
 800372c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372e:	f3ef 8310 	mrs	r3, PRIMASK
 8003732:	61bb      	str	r3, [r7, #24]
  return(result);
 8003734:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2101      	movs	r1, #1
 8003750:	438a      	bics	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2280      	movs	r2, #128	@ 0x80
 8003764:	2120      	movs	r1, #32
 8003766:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2278      	movs	r2, #120	@ 0x78
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e011      	b.n	8003798 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2280      	movs	r2, #128	@ 0x80
 800377e:	2120      	movs	r1, #32
 8003780:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2278      	movs	r2, #120	@ 0x78
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b010      	add	sp, #64	@ 0x40
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	01ffffff 	.word	0x01ffffff
 80037a4:	fffffedf 	.word	0xfffffedf

080037a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	e04b      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3301      	adds	r3, #1
 80037be:	d048      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fd fd74 	bl	80012ac <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e04b      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2204      	movs	r2, #4
 80037e2:	4013      	ands	r3, r2
 80037e4:	d035      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2208      	movs	r2, #8
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d111      	bne.n	8003818 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f900 	bl	8003a04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2284      	movs	r2, #132	@ 0x84
 8003808:	2108      	movs	r1, #8
 800380a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2278      	movs	r2, #120	@ 0x78
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e02c      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	401a      	ands	r2, r3
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	429a      	cmp	r2, r3
 800382a:	d112      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2280      	movs	r2, #128	@ 0x80
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f8e3 	bl	8003a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2284      	movs	r2, #132	@ 0x84
 8003842:	2120      	movs	r1, #32
 8003844:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2278      	movs	r2, #120	@ 0x78
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	001a      	movs	r2, r3
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d0a4      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b090      	sub	sp, #64	@ 0x40
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	1dbb      	adds	r3, r7, #6
 8003888:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1dba      	adds	r2, r7, #6
 8003894:	2158      	movs	r1, #88	@ 0x58
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2284      	movs	r2, #132	@ 0x84
 800389e:	2100      	movs	r1, #0
 80038a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2280      	movs	r2, #128	@ 0x80
 80038a6:	2122      	movs	r1, #34	@ 0x22
 80038a8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b6:	4a3e      	ldr	r2, [pc, #248]	@ (80039b0 <UART_Start_Receive_DMA+0x134>)
 80038b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038be:	4a3d      	ldr	r2, [pc, #244]	@ (80039b4 <UART_Start_Receive_DMA+0x138>)
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c6:	4a3c      	ldr	r2, [pc, #240]	@ (80039b8 <UART_Start_Receive_DMA+0x13c>)
 80038c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	2200      	movs	r2, #0
 80038d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3324      	adds	r3, #36	@ 0x24
 80038dc:	0019      	movs	r1, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e2:	001a      	movs	r2, r3
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	f7fd fe40 	bl	800156c <HAL_DMA_Start_IT>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d009      	beq.n	8003904 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2284      	movs	r2, #132	@ 0x84
 80038f4:	2110      	movs	r1, #16
 80038f6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2280      	movs	r2, #128	@ 0x80
 80038fc:	2120      	movs	r1, #32
 80038fe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e050      	b.n	80039a6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d019      	beq.n	8003940 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390c:	f3ef 8310 	mrs	r3, PRIMASK
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003916:	2301      	movs	r3, #1
 8003918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			@ (mov r8, r8)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	0049      	lsls	r1, r1, #1
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003936:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003940:	f3ef 8310 	mrs	r3, PRIMASK
 8003944:	613b      	str	r3, [r7, #16]
  return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2101      	movs	r1, #1
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003972:	f3ef 8310 	mrs	r3, PRIMASK
 8003976:	61fb      	str	r3, [r7, #28]
  return(result);
 8003978:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
 800397c:	2301      	movs	r3, #1
 800397e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	f383 8810 	msr	PRIMASK, r3
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2140      	movs	r1, #64	@ 0x40
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	f383 8810 	msr	PRIMASK, r3
}
 80039a2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b010      	add	sp, #64	@ 0x40
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	08003acd 	.word	0x08003acd
 80039b4:	08003bfd 	.word	0x08003bfd
 80039b8:	08003c3f 	.word	0x08003c3f

080039bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	2301      	movs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	21c0      	movs	r1, #192	@ 0xc0
 80039e6:	438a      	bics	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b006      	add	sp, #24
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	@ 0x38
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	617b      	str	r3, [r7, #20]
  return(result);
 8003a12:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f383 8810 	msr	PRIMASK, r3
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4926      	ldr	r1, [pc, #152]	@ (8003ac8 <UART_EndRxTransfer+0xc4>)
 8003a2e:	400a      	ands	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a42:	623b      	str	r3, [r7, #32]
  return(result);
 8003a44:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a48:	2301      	movs	r3, #1
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2101      	movs	r1, #1
 8003a60:	438a      	bics	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d118      	bne.n	8003aaa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a78:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a82:	2301      	movs	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2110      	movs	r1, #16
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	2120      	movs	r1, #32
 8003ab0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b00e      	add	sp, #56	@ 0x38
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	fffffedf 	.word	0xfffffedf

08003acc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b094      	sub	sp, #80	@ 0x50
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d16f      	bne.n	8003bc6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae8:	225a      	movs	r2, #90	@ 0x5a
 8003aea:	2100      	movs	r1, #0
 8003aec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003af4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af8:	2301      	movs	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	493a      	ldr	r1, [pc, #232]	@ (8003bf8 <UART_DMAReceiveCplt+0x12c>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b20:	f3ef 8310 	mrs	r3, PRIMASK
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	438a      	bics	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b52:	f3ef 8310 	mrs	r3, PRIMASK
 8003b56:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b62:	f383 8810 	msr	PRIMASK, r3
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2140      	movs	r1, #64	@ 0x40
 8003b74:	438a      	bics	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	f383 8810 	msr	PRIMASK, r3
}
 8003b82:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b86:	2280      	movs	r2, #128	@ 0x80
 8003b88:	2120      	movs	r1, #32
 8003b8a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d118      	bne.n	8003bc6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc8:	2200      	movs	r2, #0
 8003bca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d108      	bne.n	8003be6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd6:	2258      	movs	r2, #88	@ 0x58
 8003bd8:	5a9a      	ldrh	r2, [r3, r2]
 8003bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fc fdcc 	bl	800077c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003be4:	e003      	b.n	8003bee <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7ff fa1f 	bl	800302c <HAL_UART_RxCpltCallback>
}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b014      	add	sp, #80	@ 0x50
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	fffffeff 	.word	0xfffffeff

08003bfc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10a      	bne.n	8003c2e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2258      	movs	r2, #88	@ 0x58
 8003c1c:	5a9b      	ldrh	r3, [r3, r2]
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7fc fda8 	bl	800077c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c2c:	e003      	b.n	8003c36 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7ff fa03 	bl	800303c <HAL_UART_RxHalfCpltCallback>
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c50:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2280      	movs	r2, #128	@ 0x80
 8003c56:	589b      	ldr	r3, [r3, r2]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2280      	movs	r2, #128	@ 0x80
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b80      	cmp	r3, #128	@ 0x80
 8003c66:	d10a      	bne.n	8003c7e <UART_DMAError+0x40>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b21      	cmp	r3, #33	@ 0x21
 8003c6c:	d107      	bne.n	8003c7e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2252      	movs	r2, #82	@ 0x52
 8003c72:	2100      	movs	r1, #0
 8003c74:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff fe9f 	bl	80039bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2240      	movs	r2, #64	@ 0x40
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d10a      	bne.n	8003ca2 <UART_DMAError+0x64>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b22      	cmp	r3, #34	@ 0x22
 8003c90:	d107      	bne.n	8003ca2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	225a      	movs	r2, #90	@ 0x5a
 8003c96:	2100      	movs	r1, #0
 8003c98:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff feb1 	bl	8003a04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2284      	movs	r2, #132	@ 0x84
 8003ca6:	589b      	ldr	r3, [r3, r2]
 8003ca8:	2210      	movs	r2, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2184      	movs	r1, #132	@ 0x84
 8003cb0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff f9c9 	bl	800304c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b006      	add	sp, #24
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	225a      	movs	r2, #90	@ 0x5a
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2252      	movs	r2, #82	@ 0x52
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff f9b2 	bl	800304c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	2301      	movs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			@ (mov r8, r8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2140      	movs	r1, #64	@ 0x40
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7ff f96f 	bl	800301c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d56:	b5b0      	push	{r4, r5, r7, lr}
 8003d58:	b08a      	sub	sp, #40	@ 0x28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	1dbb      	adds	r3, r7, #6
 8003d62:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2280      	movs	r2, #128	@ 0x80
 8003d68:	589b      	ldr	r3, [r3, r2]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d156      	bne.n	8003e1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003d74:	1dbb      	adds	r3, r7, #6
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e04e      	b.n	8003e1e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d109      	bne.n	8003da0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2201      	movs	r2, #1
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d001      	beq.n	8003da0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e03e      	b.n	8003e1e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003dac:	2527      	movs	r5, #39	@ 0x27
 8003dae:	197c      	adds	r4, r7, r5
 8003db0:	1dbb      	adds	r3, r7, #6
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fd5f 	bl	800387c <UART_Start_Receive_DMA>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003dc2:	197b      	adds	r3, r7, r5
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d124      	bne.n	8003e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d11c      	bne.n	8003e0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dda:	f3ef 8310 	mrs	r3, PRIMASK
 8003dde:	617b      	str	r3, [r7, #20]
  return(result);
 8003de0:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	2301      	movs	r3, #1
 8003de6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2110      	movs	r1, #16
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	e003      	b.n	8003e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e0c:	2327      	movs	r3, #39	@ 0x27
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003e14:	2327      	movs	r3, #39	@ 0x27
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b00a      	add	sp, #40	@ 0x28
 8003e24:	bdb0      	pop	{r4, r5, r7, pc}

08003e26 <atoi>:
 8003e26:	b510      	push	{r4, lr}
 8003e28:	220a      	movs	r2, #10
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f000 f948 	bl	80040c0 <strtol>
 8003e30:	bd10      	pop	{r4, pc}
	...

08003e34 <malloc>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	4b03      	ldr	r3, [pc, #12]	@ (8003e44 <malloc+0x10>)
 8003e38:	0001      	movs	r1, r0
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	f000 f826 	bl	8003e8c <_malloc_r>
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	20000018 	.word	0x20000018

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e88 <sbrk_aligned+0x40>)
 8003e4c:	000d      	movs	r5, r1
 8003e4e:	6831      	ldr	r1, [r6, #0]
 8003e50:	0004      	movs	r4, r0
 8003e52:	2900      	cmp	r1, #0
 8003e54:	d102      	bne.n	8003e5c <sbrk_aligned+0x14>
 8003e56:	f000 fb13 	bl	8004480 <_sbrk_r>
 8003e5a:	6030      	str	r0, [r6, #0]
 8003e5c:	0029      	movs	r1, r5
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f000 fb0e 	bl	8004480 <_sbrk_r>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d103      	bne.n	8003e70 <sbrk_aligned+0x28>
 8003e68:	2501      	movs	r5, #1
 8003e6a:	426d      	negs	r5, r5
 8003e6c:	0028      	movs	r0, r5
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	2303      	movs	r3, #3
 8003e72:	1cc5      	adds	r5, r0, #3
 8003e74:	439d      	bics	r5, r3
 8003e76:	42a8      	cmp	r0, r5
 8003e78:	d0f8      	beq.n	8003e6c <sbrk_aligned+0x24>
 8003e7a:	1a29      	subs	r1, r5, r0
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	f000 faff 	bl	8004480 <_sbrk_r>
 8003e82:	3001      	adds	r0, #1
 8003e84:	d1f2      	bne.n	8003e6c <sbrk_aligned+0x24>
 8003e86:	e7ef      	b.n	8003e68 <sbrk_aligned+0x20>
 8003e88:	200003f8 	.word	0x200003f8

08003e8c <_malloc_r>:
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	2203      	movs	r2, #3
 8003e90:	1ccb      	adds	r3, r1, #3
 8003e92:	4393      	bics	r3, r2
 8003e94:	3308      	adds	r3, #8
 8003e96:	0005      	movs	r5, r0
 8003e98:	001f      	movs	r7, r3
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d234      	bcs.n	8003f08 <_malloc_r+0x7c>
 8003e9e:	270c      	movs	r7, #12
 8003ea0:	42b9      	cmp	r1, r7
 8003ea2:	d833      	bhi.n	8003f0c <_malloc_r+0x80>
 8003ea4:	0028      	movs	r0, r5
 8003ea6:	f000 f871 	bl	8003f8c <__malloc_lock>
 8003eaa:	4e37      	ldr	r6, [pc, #220]	@ (8003f88 <_malloc_r+0xfc>)
 8003eac:	6833      	ldr	r3, [r6, #0]
 8003eae:	001c      	movs	r4, r3
 8003eb0:	2c00      	cmp	r4, #0
 8003eb2:	d12f      	bne.n	8003f14 <_malloc_r+0x88>
 8003eb4:	0039      	movs	r1, r7
 8003eb6:	0028      	movs	r0, r5
 8003eb8:	f7ff ffc6 	bl	8003e48 <sbrk_aligned>
 8003ebc:	0004      	movs	r4, r0
 8003ebe:	1c43      	adds	r3, r0, #1
 8003ec0:	d15f      	bne.n	8003f82 <_malloc_r+0xf6>
 8003ec2:	6834      	ldr	r4, [r6, #0]
 8003ec4:	9400      	str	r4, [sp, #0]
 8003ec6:	9b00      	ldr	r3, [sp, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d14a      	bne.n	8003f62 <_malloc_r+0xd6>
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	d052      	beq.n	8003f76 <_malloc_r+0xea>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	0028      	movs	r0, r5
 8003ed4:	18e3      	adds	r3, r4, r3
 8003ed6:	9900      	ldr	r1, [sp, #0]
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	f000 fad1 	bl	8004480 <_sbrk_r>
 8003ede:	9b01      	ldr	r3, [sp, #4]
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	d148      	bne.n	8003f76 <_malloc_r+0xea>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	0028      	movs	r0, r5
 8003ee8:	1aff      	subs	r7, r7, r3
 8003eea:	0039      	movs	r1, r7
 8003eec:	f7ff ffac 	bl	8003e48 <sbrk_aligned>
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d040      	beq.n	8003f76 <_malloc_r+0xea>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	6833      	ldr	r3, [r6, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	d133      	bne.n	8003f6a <_malloc_r+0xde>
 8003f02:	9b00      	ldr	r3, [sp, #0]
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	e019      	b.n	8003f3c <_malloc_r+0xb0>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dac9      	bge.n	8003ea0 <_malloc_r+0x14>
 8003f0c:	230c      	movs	r3, #12
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	2000      	movs	r0, #0
 8003f12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f14:	6821      	ldr	r1, [r4, #0]
 8003f16:	1bc9      	subs	r1, r1, r7
 8003f18:	d420      	bmi.n	8003f5c <_malloc_r+0xd0>
 8003f1a:	290b      	cmp	r1, #11
 8003f1c:	d90a      	bls.n	8003f34 <_malloc_r+0xa8>
 8003f1e:	19e2      	adds	r2, r4, r7
 8003f20:	6027      	str	r7, [r4, #0]
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	d104      	bne.n	8003f30 <_malloc_r+0xa4>
 8003f26:	6032      	str	r2, [r6, #0]
 8003f28:	6863      	ldr	r3, [r4, #4]
 8003f2a:	6011      	str	r1, [r2, #0]
 8003f2c:	6053      	str	r3, [r2, #4]
 8003f2e:	e005      	b.n	8003f3c <_malloc_r+0xb0>
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e7f9      	b.n	8003f28 <_malloc_r+0x9c>
 8003f34:	6862      	ldr	r2, [r4, #4]
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	d10e      	bne.n	8003f58 <_malloc_r+0xcc>
 8003f3a:	6032      	str	r2, [r6, #0]
 8003f3c:	0028      	movs	r0, r5
 8003f3e:	f000 f82d 	bl	8003f9c <__malloc_unlock>
 8003f42:	0020      	movs	r0, r4
 8003f44:	2207      	movs	r2, #7
 8003f46:	300b      	adds	r0, #11
 8003f48:	1d23      	adds	r3, r4, #4
 8003f4a:	4390      	bics	r0, r2
 8003f4c:	1ac2      	subs	r2, r0, r3
 8003f4e:	4298      	cmp	r0, r3
 8003f50:	d0df      	beq.n	8003f12 <_malloc_r+0x86>
 8003f52:	1a1b      	subs	r3, r3, r0
 8003f54:	50a3      	str	r3, [r4, r2]
 8003f56:	e7dc      	b.n	8003f12 <_malloc_r+0x86>
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	e7ef      	b.n	8003f3c <_malloc_r+0xb0>
 8003f5c:	0023      	movs	r3, r4
 8003f5e:	6864      	ldr	r4, [r4, #4]
 8003f60:	e7a6      	b.n	8003eb0 <_malloc_r+0x24>
 8003f62:	9c00      	ldr	r4, [sp, #0]
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	e7ad      	b.n	8003ec6 <_malloc_r+0x3a>
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	42a3      	cmp	r3, r4
 8003f70:	d1fb      	bne.n	8003f6a <_malloc_r+0xde>
 8003f72:	2300      	movs	r3, #0
 8003f74:	e7da      	b.n	8003f2c <_malloc_r+0xa0>
 8003f76:	230c      	movs	r3, #12
 8003f78:	0028      	movs	r0, r5
 8003f7a:	602b      	str	r3, [r5, #0]
 8003f7c:	f000 f80e 	bl	8003f9c <__malloc_unlock>
 8003f80:	e7c6      	b.n	8003f10 <_malloc_r+0x84>
 8003f82:	6007      	str	r7, [r0, #0]
 8003f84:	e7da      	b.n	8003f3c <_malloc_r+0xb0>
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	200003fc 	.word	0x200003fc

08003f8c <__malloc_lock>:
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	4802      	ldr	r0, [pc, #8]	@ (8003f98 <__malloc_lock+0xc>)
 8003f90:	f000 fac7 	bl	8004522 <__retarget_lock_acquire_recursive>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	20000540 	.word	0x20000540

08003f9c <__malloc_unlock>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <__malloc_unlock+0xc>)
 8003fa0:	f000 fac0 	bl	8004524 <__retarget_lock_release_recursive>
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	20000540 	.word	0x20000540

08003fac <_strtol_l.constprop.0>:
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	0017      	movs	r7, r2
 8003fb2:	001e      	movs	r6, r3
 8003fb4:	9003      	str	r0, [sp, #12]
 8003fb6:	9101      	str	r1, [sp, #4]
 8003fb8:	2b24      	cmp	r3, #36	@ 0x24
 8003fba:	d844      	bhi.n	8004046 <_strtol_l.constprop.0+0x9a>
 8003fbc:	000c      	movs	r4, r1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d041      	beq.n	8004046 <_strtol_l.constprop.0+0x9a>
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <_strtol_l.constprop.0+0x10c>)
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	469c      	mov	ip, r3
 8003fc8:	0023      	movs	r3, r4
 8003fca:	4661      	mov	r1, ip
 8003fcc:	781d      	ldrb	r5, [r3, #0]
 8003fce:	3401      	adds	r4, #1
 8003fd0:	5d48      	ldrb	r0, [r1, r5]
 8003fd2:	0001      	movs	r1, r0
 8003fd4:	4011      	ands	r1, r2
 8003fd6:	4210      	tst	r0, r2
 8003fd8:	d1f6      	bne.n	8003fc8 <_strtol_l.constprop.0+0x1c>
 8003fda:	2d2d      	cmp	r5, #45	@ 0x2d
 8003fdc:	d13a      	bne.n	8004054 <_strtol_l.constprop.0+0xa8>
 8003fde:	7825      	ldrb	r5, [r4, #0]
 8003fe0:	1c9c      	adds	r4, r3, #2
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	0033      	movs	r3, r6
 8003fea:	4393      	bics	r3, r2
 8003fec:	d109      	bne.n	8004002 <_strtol_l.constprop.0+0x56>
 8003fee:	2d30      	cmp	r5, #48	@ 0x30
 8003ff0:	d136      	bne.n	8004060 <_strtol_l.constprop.0+0xb4>
 8003ff2:	2120      	movs	r1, #32
 8003ff4:	7823      	ldrb	r3, [r4, #0]
 8003ff6:	438b      	bics	r3, r1
 8003ff8:	2b58      	cmp	r3, #88	@ 0x58
 8003ffa:	d131      	bne.n	8004060 <_strtol_l.constprop.0+0xb4>
 8003ffc:	0016      	movs	r6, r2
 8003ffe:	7865      	ldrb	r5, [r4, #1]
 8004000:	3402      	adds	r4, #2
 8004002:	4a2e      	ldr	r2, [pc, #184]	@ (80040bc <_strtol_l.constprop.0+0x110>)
 8004004:	9b00      	ldr	r3, [sp, #0]
 8004006:	4694      	mov	ip, r2
 8004008:	4463      	add	r3, ip
 800400a:	0031      	movs	r1, r6
 800400c:	0018      	movs	r0, r3
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	f7fc f90a 	bl	8000228 <__aeabi_uidivmod>
 8004014:	2200      	movs	r2, #0
 8004016:	4684      	mov	ip, r0
 8004018:	0010      	movs	r0, r2
 800401a:	002b      	movs	r3, r5
 800401c:	3b30      	subs	r3, #48	@ 0x30
 800401e:	2b09      	cmp	r3, #9
 8004020:	d825      	bhi.n	800406e <_strtol_l.constprop.0+0xc2>
 8004022:	001d      	movs	r5, r3
 8004024:	42ae      	cmp	r6, r5
 8004026:	dd31      	ble.n	800408c <_strtol_l.constprop.0+0xe0>
 8004028:	1c53      	adds	r3, r2, #1
 800402a:	d009      	beq.n	8004040 <_strtol_l.constprop.0+0x94>
 800402c:	2201      	movs	r2, #1
 800402e:	4252      	negs	r2, r2
 8004030:	4584      	cmp	ip, r0
 8004032:	d305      	bcc.n	8004040 <_strtol_l.constprop.0+0x94>
 8004034:	d101      	bne.n	800403a <_strtol_l.constprop.0+0x8e>
 8004036:	42a9      	cmp	r1, r5
 8004038:	db25      	blt.n	8004086 <_strtol_l.constprop.0+0xda>
 800403a:	2201      	movs	r2, #1
 800403c:	4370      	muls	r0, r6
 800403e:	1828      	adds	r0, r5, r0
 8004040:	7825      	ldrb	r5, [r4, #0]
 8004042:	3401      	adds	r4, #1
 8004044:	e7e9      	b.n	800401a <_strtol_l.constprop.0+0x6e>
 8004046:	f000 fa41 	bl	80044cc <__errno>
 800404a:	2316      	movs	r3, #22
 800404c:	6003      	str	r3, [r0, #0]
 800404e:	2000      	movs	r0, #0
 8004050:	b005      	add	sp, #20
 8004052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004054:	9100      	str	r1, [sp, #0]
 8004056:	2d2b      	cmp	r5, #43	@ 0x2b
 8004058:	d1c5      	bne.n	8003fe6 <_strtol_l.constprop.0+0x3a>
 800405a:	7825      	ldrb	r5, [r4, #0]
 800405c:	1c9c      	adds	r4, r3, #2
 800405e:	e7c2      	b.n	8003fe6 <_strtol_l.constprop.0+0x3a>
 8004060:	2e00      	cmp	r6, #0
 8004062:	d1ce      	bne.n	8004002 <_strtol_l.constprop.0+0x56>
 8004064:	3608      	adds	r6, #8
 8004066:	2d30      	cmp	r5, #48	@ 0x30
 8004068:	d0cb      	beq.n	8004002 <_strtol_l.constprop.0+0x56>
 800406a:	3602      	adds	r6, #2
 800406c:	e7c9      	b.n	8004002 <_strtol_l.constprop.0+0x56>
 800406e:	002b      	movs	r3, r5
 8004070:	3b41      	subs	r3, #65	@ 0x41
 8004072:	2b19      	cmp	r3, #25
 8004074:	d801      	bhi.n	800407a <_strtol_l.constprop.0+0xce>
 8004076:	3d37      	subs	r5, #55	@ 0x37
 8004078:	e7d4      	b.n	8004024 <_strtol_l.constprop.0+0x78>
 800407a:	002b      	movs	r3, r5
 800407c:	3b61      	subs	r3, #97	@ 0x61
 800407e:	2b19      	cmp	r3, #25
 8004080:	d804      	bhi.n	800408c <_strtol_l.constprop.0+0xe0>
 8004082:	3d57      	subs	r5, #87	@ 0x57
 8004084:	e7ce      	b.n	8004024 <_strtol_l.constprop.0+0x78>
 8004086:	2201      	movs	r2, #1
 8004088:	4252      	negs	r2, r2
 800408a:	e7d9      	b.n	8004040 <_strtol_l.constprop.0+0x94>
 800408c:	1c53      	adds	r3, r2, #1
 800408e:	d108      	bne.n	80040a2 <_strtol_l.constprop.0+0xf6>
 8004090:	2322      	movs	r3, #34	@ 0x22
 8004092:	9a03      	ldr	r2, [sp, #12]
 8004094:	9802      	ldr	r0, [sp, #8]
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	2f00      	cmp	r7, #0
 800409a:	d0d9      	beq.n	8004050 <_strtol_l.constprop.0+0xa4>
 800409c:	1e63      	subs	r3, r4, #1
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	e007      	b.n	80040b2 <_strtol_l.constprop.0+0x106>
 80040a2:	9b00      	ldr	r3, [sp, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d000      	beq.n	80040aa <_strtol_l.constprop.0+0xfe>
 80040a8:	4240      	negs	r0, r0
 80040aa:	2f00      	cmp	r7, #0
 80040ac:	d0d0      	beq.n	8004050 <_strtol_l.constprop.0+0xa4>
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d1f4      	bne.n	800409c <_strtol_l.constprop.0+0xf0>
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	e7cb      	b.n	8004050 <_strtol_l.constprop.0+0xa4>
 80040b8:	080051e1 	.word	0x080051e1
 80040bc:	7fffffff 	.word	0x7fffffff

080040c0 <strtol>:
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4c04      	ldr	r4, [pc, #16]	@ (80040d4 <strtol+0x14>)
 80040c4:	0013      	movs	r3, r2
 80040c6:	000a      	movs	r2, r1
 80040c8:	0001      	movs	r1, r0
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	f7ff ff6e 	bl	8003fac <_strtol_l.constprop.0>
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	20000018 	.word	0x20000018

080040d8 <std>:
 80040d8:	2300      	movs	r3, #0
 80040da:	b510      	push	{r4, lr}
 80040dc:	0004      	movs	r4, r0
 80040de:	6003      	str	r3, [r0, #0]
 80040e0:	6043      	str	r3, [r0, #4]
 80040e2:	6083      	str	r3, [r0, #8]
 80040e4:	8181      	strh	r1, [r0, #12]
 80040e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80040e8:	81c2      	strh	r2, [r0, #14]
 80040ea:	6103      	str	r3, [r0, #16]
 80040ec:	6143      	str	r3, [r0, #20]
 80040ee:	6183      	str	r3, [r0, #24]
 80040f0:	0019      	movs	r1, r3
 80040f2:	2208      	movs	r2, #8
 80040f4:	305c      	adds	r0, #92	@ 0x5c
 80040f6:	f000 f90d 	bl	8004314 <memset>
 80040fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <std+0x50>)
 80040fc:	6224      	str	r4, [r4, #32]
 80040fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004100:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <std+0x54>)
 8004102:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <std+0x58>)
 8004106:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004108:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <std+0x5c>)
 800410a:	6323      	str	r3, [r4, #48]	@ 0x30
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <std+0x60>)
 800410e:	429c      	cmp	r4, r3
 8004110:	d005      	beq.n	800411e <std+0x46>
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <std+0x64>)
 8004114:	429c      	cmp	r4, r3
 8004116:	d002      	beq.n	800411e <std+0x46>
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <std+0x68>)
 800411a:	429c      	cmp	r4, r3
 800411c:	d103      	bne.n	8004126 <std+0x4e>
 800411e:	0020      	movs	r0, r4
 8004120:	3058      	adds	r0, #88	@ 0x58
 8004122:	f000 f9fd 	bl	8004520 <__retarget_lock_init_recursive>
 8004126:	bd10      	pop	{r4, pc}
 8004128:	08004261 	.word	0x08004261
 800412c:	08004289 	.word	0x08004289
 8004130:	080042c1 	.word	0x080042c1
 8004134:	080042ed 	.word	0x080042ed
 8004138:	20000400 	.word	0x20000400
 800413c:	20000468 	.word	0x20000468
 8004140:	200004d0 	.word	0x200004d0

08004144 <stdio_exit_handler>:
 8004144:	b510      	push	{r4, lr}
 8004146:	4a03      	ldr	r2, [pc, #12]	@ (8004154 <stdio_exit_handler+0x10>)
 8004148:	4903      	ldr	r1, [pc, #12]	@ (8004158 <stdio_exit_handler+0x14>)
 800414a:	4804      	ldr	r0, [pc, #16]	@ (800415c <stdio_exit_handler+0x18>)
 800414c:	f000 f86c 	bl	8004228 <_fwalk_sglue>
 8004150:	bd10      	pop	{r4, pc}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	2000000c 	.word	0x2000000c
 8004158:	08004a01 	.word	0x08004a01
 800415c:	2000001c 	.word	0x2000001c

08004160 <cleanup_stdio>:
 8004160:	6841      	ldr	r1, [r0, #4]
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <cleanup_stdio+0x30>)
 8004164:	b510      	push	{r4, lr}
 8004166:	0004      	movs	r4, r0
 8004168:	4299      	cmp	r1, r3
 800416a:	d001      	beq.n	8004170 <cleanup_stdio+0x10>
 800416c:	f000 fc48 	bl	8004a00 <_fflush_r>
 8004170:	68a1      	ldr	r1, [r4, #8]
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <cleanup_stdio+0x34>)
 8004174:	4299      	cmp	r1, r3
 8004176:	d002      	beq.n	800417e <cleanup_stdio+0x1e>
 8004178:	0020      	movs	r0, r4
 800417a:	f000 fc41 	bl	8004a00 <_fflush_r>
 800417e:	68e1      	ldr	r1, [r4, #12]
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <cleanup_stdio+0x38>)
 8004182:	4299      	cmp	r1, r3
 8004184:	d002      	beq.n	800418c <cleanup_stdio+0x2c>
 8004186:	0020      	movs	r0, r4
 8004188:	f000 fc3a 	bl	8004a00 <_fflush_r>
 800418c:	bd10      	pop	{r4, pc}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	20000400 	.word	0x20000400
 8004194:	20000468 	.word	0x20000468
 8004198:	200004d0 	.word	0x200004d0

0800419c <global_stdio_init.part.0>:
 800419c:	b510      	push	{r4, lr}
 800419e:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <global_stdio_init.part.0+0x28>)
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <global_stdio_init.part.0+0x2c>)
 80041a2:	2104      	movs	r1, #4
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	4809      	ldr	r0, [pc, #36]	@ (80041cc <global_stdio_init.part.0+0x30>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	f7ff ff95 	bl	80040d8 <std>
 80041ae:	2201      	movs	r2, #1
 80041b0:	2109      	movs	r1, #9
 80041b2:	4807      	ldr	r0, [pc, #28]	@ (80041d0 <global_stdio_init.part.0+0x34>)
 80041b4:	f7ff ff90 	bl	80040d8 <std>
 80041b8:	2202      	movs	r2, #2
 80041ba:	2112      	movs	r1, #18
 80041bc:	4805      	ldr	r0, [pc, #20]	@ (80041d4 <global_stdio_init.part.0+0x38>)
 80041be:	f7ff ff8b 	bl	80040d8 <std>
 80041c2:	bd10      	pop	{r4, pc}
 80041c4:	20000538 	.word	0x20000538
 80041c8:	08004145 	.word	0x08004145
 80041cc:	20000400 	.word	0x20000400
 80041d0:	20000468 	.word	0x20000468
 80041d4:	200004d0 	.word	0x200004d0

080041d8 <__sfp_lock_acquire>:
 80041d8:	b510      	push	{r4, lr}
 80041da:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <__sfp_lock_acquire+0xc>)
 80041dc:	f000 f9a1 	bl	8004522 <__retarget_lock_acquire_recursive>
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	20000541 	.word	0x20000541

080041e8 <__sfp_lock_release>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4802      	ldr	r0, [pc, #8]	@ (80041f4 <__sfp_lock_release+0xc>)
 80041ec:	f000 f99a 	bl	8004524 <__retarget_lock_release_recursive>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	20000541 	.word	0x20000541

080041f8 <__sinit>:
 80041f8:	b510      	push	{r4, lr}
 80041fa:	0004      	movs	r4, r0
 80041fc:	f7ff ffec 	bl	80041d8 <__sfp_lock_acquire>
 8004200:	6a23      	ldr	r3, [r4, #32]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <__sinit+0x14>
 8004206:	f7ff ffef 	bl	80041e8 <__sfp_lock_release>
 800420a:	bd10      	pop	{r4, pc}
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <__sinit+0x28>)
 800420e:	6223      	str	r3, [r4, #32]
 8004210:	4b04      	ldr	r3, [pc, #16]	@ (8004224 <__sinit+0x2c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f6      	bne.n	8004206 <__sinit+0xe>
 8004218:	f7ff ffc0 	bl	800419c <global_stdio_init.part.0>
 800421c:	e7f3      	b.n	8004206 <__sinit+0xe>
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	08004161 	.word	0x08004161
 8004224:	20000538 	.word	0x20000538

08004228 <_fwalk_sglue>:
 8004228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800422a:	0014      	movs	r4, r2
 800422c:	2600      	movs	r6, #0
 800422e:	9000      	str	r0, [sp, #0]
 8004230:	9101      	str	r1, [sp, #4]
 8004232:	68a5      	ldr	r5, [r4, #8]
 8004234:	6867      	ldr	r7, [r4, #4]
 8004236:	3f01      	subs	r7, #1
 8004238:	d504      	bpl.n	8004244 <_fwalk_sglue+0x1c>
 800423a:	6824      	ldr	r4, [r4, #0]
 800423c:	2c00      	cmp	r4, #0
 800423e:	d1f8      	bne.n	8004232 <_fwalk_sglue+0xa>
 8004240:	0030      	movs	r0, r6
 8004242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004244:	89ab      	ldrh	r3, [r5, #12]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d908      	bls.n	800425c <_fwalk_sglue+0x34>
 800424a:	220e      	movs	r2, #14
 800424c:	5eab      	ldrsh	r3, [r5, r2]
 800424e:	3301      	adds	r3, #1
 8004250:	d004      	beq.n	800425c <_fwalk_sglue+0x34>
 8004252:	0029      	movs	r1, r5
 8004254:	9800      	ldr	r0, [sp, #0]
 8004256:	9b01      	ldr	r3, [sp, #4]
 8004258:	4798      	blx	r3
 800425a:	4306      	orrs	r6, r0
 800425c:	3568      	adds	r5, #104	@ 0x68
 800425e:	e7ea      	b.n	8004236 <_fwalk_sglue+0xe>

08004260 <__sread>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	000c      	movs	r4, r1
 8004264:	250e      	movs	r5, #14
 8004266:	5f49      	ldrsh	r1, [r1, r5]
 8004268:	f000 f8f6 	bl	8004458 <_read_r>
 800426c:	2800      	cmp	r0, #0
 800426e:	db03      	blt.n	8004278 <__sread+0x18>
 8004270:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004272:	181b      	adds	r3, r3, r0
 8004274:	6563      	str	r3, [r4, #84]	@ 0x54
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	4a02      	ldr	r2, [pc, #8]	@ (8004284 <__sread+0x24>)
 800427c:	4013      	ands	r3, r2
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	e7f9      	b.n	8004276 <__sread+0x16>
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	ffffefff 	.word	0xffffefff

08004288 <__swrite>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	001f      	movs	r7, r3
 800428c:	898b      	ldrh	r3, [r1, #12]
 800428e:	0005      	movs	r5, r0
 8004290:	000c      	movs	r4, r1
 8004292:	0016      	movs	r6, r2
 8004294:	05db      	lsls	r3, r3, #23
 8004296:	d505      	bpl.n	80042a4 <__swrite+0x1c>
 8004298:	230e      	movs	r3, #14
 800429a:	5ec9      	ldrsh	r1, [r1, r3]
 800429c:	2200      	movs	r2, #0
 800429e:	2302      	movs	r3, #2
 80042a0:	f000 f8c6 	bl	8004430 <_lseek_r>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <__swrite+0x34>)
 80042a8:	0028      	movs	r0, r5
 80042aa:	4013      	ands	r3, r2
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	0032      	movs	r2, r6
 80042b0:	230e      	movs	r3, #14
 80042b2:	5ee1      	ldrsh	r1, [r4, r3]
 80042b4:	003b      	movs	r3, r7
 80042b6:	f000 f8f5 	bl	80044a4 <_write_r>
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042bc:	ffffefff 	.word	0xffffefff

080042c0 <__sseek>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	000c      	movs	r4, r1
 80042c4:	250e      	movs	r5, #14
 80042c6:	5f49      	ldrsh	r1, [r1, r5]
 80042c8:	f000 f8b2 	bl	8004430 <_lseek_r>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	1c42      	adds	r2, r0, #1
 80042d0:	d103      	bne.n	80042da <__sseek+0x1a>
 80042d2:	4a05      	ldr	r2, [pc, #20]	@ (80042e8 <__sseek+0x28>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	2280      	movs	r2, #128	@ 0x80
 80042dc:	0152      	lsls	r2, r2, #5
 80042de:	4313      	orrs	r3, r2
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80042e4:	e7f8      	b.n	80042d8 <__sseek+0x18>
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	ffffefff 	.word	0xffffefff

080042ec <__sclose>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	230e      	movs	r3, #14
 80042f0:	5ec9      	ldrsh	r1, [r1, r3]
 80042f2:	f000 f88b 	bl	800440c <_close_r>
 80042f6:	bd10      	pop	{r4, pc}

080042f8 <memcmp>:
 80042f8:	b530      	push	{r4, r5, lr}
 80042fa:	2400      	movs	r4, #0
 80042fc:	3901      	subs	r1, #1
 80042fe:	42a2      	cmp	r2, r4
 8004300:	d101      	bne.n	8004306 <memcmp+0xe>
 8004302:	2000      	movs	r0, #0
 8004304:	e005      	b.n	8004312 <memcmp+0x1a>
 8004306:	5d03      	ldrb	r3, [r0, r4]
 8004308:	3401      	adds	r4, #1
 800430a:	5d0d      	ldrb	r5, [r1, r4]
 800430c:	42ab      	cmp	r3, r5
 800430e:	d0f6      	beq.n	80042fe <memcmp+0x6>
 8004310:	1b58      	subs	r0, r3, r5
 8004312:	bd30      	pop	{r4, r5, pc}

08004314 <memset>:
 8004314:	0003      	movs	r3, r0
 8004316:	1882      	adds	r2, r0, r2
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	7019      	strb	r1, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <strncpy>:
 8004324:	0003      	movs	r3, r0
 8004326:	b530      	push	{r4, r5, lr}
 8004328:	001d      	movs	r5, r3
 800432a:	2a00      	cmp	r2, #0
 800432c:	d006      	beq.n	800433c <strncpy+0x18>
 800432e:	780c      	ldrb	r4, [r1, #0]
 8004330:	3a01      	subs	r2, #1
 8004332:	3301      	adds	r3, #1
 8004334:	702c      	strb	r4, [r5, #0]
 8004336:	3101      	adds	r1, #1
 8004338:	2c00      	cmp	r4, #0
 800433a:	d1f5      	bne.n	8004328 <strncpy+0x4>
 800433c:	2100      	movs	r1, #0
 800433e:	189a      	adds	r2, r3, r2
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <strncpy+0x22>
 8004344:	bd30      	pop	{r4, r5, pc}
 8004346:	7019      	strb	r1, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	e7f9      	b.n	8004340 <strncpy+0x1c>

0800434c <strtok>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	4b16      	ldr	r3, [pc, #88]	@ (80043a8 <strtok+0x5c>)
 8004350:	0005      	movs	r5, r0
 8004352:	681f      	ldr	r7, [r3, #0]
 8004354:	000e      	movs	r6, r1
 8004356:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004358:	2c00      	cmp	r4, #0
 800435a:	d11d      	bne.n	8004398 <strtok+0x4c>
 800435c:	2050      	movs	r0, #80	@ 0x50
 800435e:	f7ff fd69 	bl	8003e34 <malloc>
 8004362:	1e02      	subs	r2, r0, #0
 8004364:	6478      	str	r0, [r7, #68]	@ 0x44
 8004366:	d104      	bne.n	8004372 <strtok+0x26>
 8004368:	215b      	movs	r1, #91	@ 0x5b
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <strtok+0x60>)
 800436c:	4810      	ldr	r0, [pc, #64]	@ (80043b0 <strtok+0x64>)
 800436e:	f000 f8db 	bl	8004528 <__assert_func>
 8004372:	6004      	str	r4, [r0, #0]
 8004374:	6044      	str	r4, [r0, #4]
 8004376:	6084      	str	r4, [r0, #8]
 8004378:	60c4      	str	r4, [r0, #12]
 800437a:	6104      	str	r4, [r0, #16]
 800437c:	6144      	str	r4, [r0, #20]
 800437e:	6184      	str	r4, [r0, #24]
 8004380:	6284      	str	r4, [r0, #40]	@ 0x28
 8004382:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8004384:	6304      	str	r4, [r0, #48]	@ 0x30
 8004386:	6344      	str	r4, [r0, #52]	@ 0x34
 8004388:	6384      	str	r4, [r0, #56]	@ 0x38
 800438a:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800438c:	6404      	str	r4, [r0, #64]	@ 0x40
 800438e:	6444      	str	r4, [r0, #68]	@ 0x44
 8004390:	6484      	str	r4, [r0, #72]	@ 0x48
 8004392:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8004394:	7704      	strb	r4, [r0, #28]
 8004396:	6244      	str	r4, [r0, #36]	@ 0x24
 8004398:	0031      	movs	r1, r6
 800439a:	0028      	movs	r0, r5
 800439c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800439e:	2301      	movs	r3, #1
 80043a0:	f000 f808 	bl	80043b4 <__strtok_r>
 80043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	20000018 	.word	0x20000018
 80043ac:	080052e1 	.word	0x080052e1
 80043b0:	080052f8 	.word	0x080052f8

080043b4 <__strtok_r>:
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	1e04      	subs	r4, r0, #0
 80043b8:	d102      	bne.n	80043c0 <__strtok_r+0xc>
 80043ba:	6814      	ldr	r4, [r2, #0]
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d009      	beq.n	80043d4 <__strtok_r+0x20>
 80043c0:	0020      	movs	r0, r4
 80043c2:	000e      	movs	r6, r1
 80043c4:	7805      	ldrb	r5, [r0, #0]
 80043c6:	3401      	adds	r4, #1
 80043c8:	7837      	ldrb	r7, [r6, #0]
 80043ca:	2f00      	cmp	r7, #0
 80043cc:	d104      	bne.n	80043d8 <__strtok_r+0x24>
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	d10d      	bne.n	80043ee <__strtok_r+0x3a>
 80043d2:	6015      	str	r5, [r2, #0]
 80043d4:	2000      	movs	r0, #0
 80043d6:	e006      	b.n	80043e6 <__strtok_r+0x32>
 80043d8:	3601      	adds	r6, #1
 80043da:	42bd      	cmp	r5, r7
 80043dc:	d1f4      	bne.n	80043c8 <__strtok_r+0x14>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1ee      	bne.n	80043c0 <__strtok_r+0xc>
 80043e2:	6014      	str	r4, [r2, #0]
 80043e4:	7003      	strb	r3, [r0, #0]
 80043e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e8:	3301      	adds	r3, #1
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	d102      	bne.n	80043f4 <__strtok_r+0x40>
 80043ee:	000b      	movs	r3, r1
 80043f0:	7826      	ldrb	r6, [r4, #0]
 80043f2:	3401      	adds	r4, #1
 80043f4:	781d      	ldrb	r5, [r3, #0]
 80043f6:	42ae      	cmp	r6, r5
 80043f8:	d1f6      	bne.n	80043e8 <__strtok_r+0x34>
 80043fa:	2300      	movs	r3, #0
 80043fc:	001d      	movs	r5, r3
 80043fe:	429e      	cmp	r6, r3
 8004400:	d002      	beq.n	8004408 <__strtok_r+0x54>
 8004402:	0023      	movs	r3, r4
 8004404:	1e61      	subs	r1, r4, #1
 8004406:	700d      	strb	r5, [r1, #0]
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e7ec      	b.n	80043e6 <__strtok_r+0x32>

0800440c <_close_r>:
 800440c:	2300      	movs	r3, #0
 800440e:	b570      	push	{r4, r5, r6, lr}
 8004410:	4d06      	ldr	r5, [pc, #24]	@ (800442c <_close_r+0x20>)
 8004412:	0004      	movs	r4, r0
 8004414:	0008      	movs	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fc fcb6 	bl	8000d88 <_close>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d103      	bne.n	8004428 <_close_r+0x1c>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d000      	beq.n	8004428 <_close_r+0x1c>
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	2000053c 	.word	0x2000053c

08004430 <_lseek_r>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	0004      	movs	r4, r0
 8004434:	0008      	movs	r0, r1
 8004436:	0011      	movs	r1, r2
 8004438:	001a      	movs	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	4d05      	ldr	r5, [pc, #20]	@ (8004454 <_lseek_r+0x24>)
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	f7fc fcc3 	bl	8000dca <_lseek>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d103      	bne.n	8004450 <_lseek_r+0x20>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d000      	beq.n	8004450 <_lseek_r+0x20>
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	2000053c 	.word	0x2000053c

08004458 <_read_r>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	0004      	movs	r4, r0
 800445c:	0008      	movs	r0, r1
 800445e:	0011      	movs	r1, r2
 8004460:	001a      	movs	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	4d05      	ldr	r5, [pc, #20]	@ (800447c <_read_r+0x24>)
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc fc55 	bl	8000d16 <_read>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d103      	bne.n	8004478 <_read_r+0x20>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d000      	beq.n	8004478 <_read_r+0x20>
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	2000053c 	.word	0x2000053c

08004480 <_sbrk_r>:
 8004480:	2300      	movs	r3, #0
 8004482:	b570      	push	{r4, r5, r6, lr}
 8004484:	4d06      	ldr	r5, [pc, #24]	@ (80044a0 <_sbrk_r+0x20>)
 8004486:	0004      	movs	r4, r0
 8004488:	0008      	movs	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fc fca8 	bl	8000de0 <_sbrk>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d103      	bne.n	800449c <_sbrk_r+0x1c>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d000      	beq.n	800449c <_sbrk_r+0x1c>
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	bd70      	pop	{r4, r5, r6, pc}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	2000053c 	.word	0x2000053c

080044a4 <_write_r>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	0004      	movs	r4, r0
 80044a8:	0008      	movs	r0, r1
 80044aa:	0011      	movs	r1, r2
 80044ac:	001a      	movs	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	4d05      	ldr	r5, [pc, #20]	@ (80044c8 <_write_r+0x24>)
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	f7fc fc4c 	bl	8000d50 <_write>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d103      	bne.n	80044c4 <_write_r+0x20>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d000      	beq.n	80044c4 <_write_r+0x20>
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	2000053c 	.word	0x2000053c

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	@ (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	20000018 	.word	0x20000018

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4c0c      	ldr	r4, [pc, #48]	@ (8004510 <__libc_init_array+0x38>)
 80044de:	4d0d      	ldr	r5, [pc, #52]	@ (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	2600      	movs	r6, #0
 80044ea:	f000 fd95 	bl	8005018 <_init>
 80044ee:	4c0a      	ldr	r4, [pc, #40]	@ (8004518 <__libc_init_array+0x40>)
 80044f0:	4d0a      	ldr	r5, [pc, #40]	@ (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	00b3      	lsls	r3, r6, #2
 80044fe:	58eb      	ldr	r3, [r5, r3]
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	00b3      	lsls	r3, r6, #2
 8004508:	58eb      	ldr	r3, [r5, r3]
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	080053cc 	.word	0x080053cc
 8004514:	080053cc 	.word	0x080053cc
 8004518:	080053d0 	.word	0x080053d0
 800451c:	080053cc 	.word	0x080053cc

08004520 <__retarget_lock_init_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_acquire_recursive>:
 8004522:	4770      	bx	lr

08004524 <__retarget_lock_release_recursive>:
 8004524:	4770      	bx	lr
	...

08004528 <__assert_func>:
 8004528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800452a:	0014      	movs	r4, r2
 800452c:	001a      	movs	r2, r3
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <__assert_func+0x2c>)
 8004530:	0005      	movs	r5, r0
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	000e      	movs	r6, r1
 8004536:	68d8      	ldr	r0, [r3, #12]
 8004538:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <__assert_func+0x30>)
 800453a:	2c00      	cmp	r4, #0
 800453c:	d101      	bne.n	8004542 <__assert_func+0x1a>
 800453e:	4b07      	ldr	r3, [pc, #28]	@ (800455c <__assert_func+0x34>)
 8004540:	001c      	movs	r4, r3
 8004542:	4907      	ldr	r1, [pc, #28]	@ (8004560 <__assert_func+0x38>)
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	9402      	str	r4, [sp, #8]
 8004548:	002b      	movs	r3, r5
 800454a:	9600      	str	r6, [sp, #0]
 800454c:	f000 fa84 	bl	8004a58 <fiprintf>
 8004550:	f000 fa9d 	bl	8004a8e <abort>
 8004554:	20000018 	.word	0x20000018
 8004558:	08005352 	.word	0x08005352
 800455c:	0800538d 	.word	0x0800538d
 8004560:	0800535f 	.word	0x0800535f

08004564 <_free_r>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	0005      	movs	r5, r0
 8004568:	1e0c      	subs	r4, r1, #0
 800456a:	d010      	beq.n	800458e <_free_r+0x2a>
 800456c:	3c04      	subs	r4, #4
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	da00      	bge.n	8004576 <_free_r+0x12>
 8004574:	18e4      	adds	r4, r4, r3
 8004576:	0028      	movs	r0, r5
 8004578:	f7ff fd08 	bl	8003f8c <__malloc_lock>
 800457c:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <_free_r+0x90>)
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <_free_r+0x2c>
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	6014      	str	r4, [r2, #0]
 8004588:	0028      	movs	r0, r5
 800458a:	f7ff fd07 	bl	8003f9c <__malloc_unlock>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	42a3      	cmp	r3, r4
 8004592:	d908      	bls.n	80045a6 <_free_r+0x42>
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	1821      	adds	r1, r4, r0
 8004598:	428b      	cmp	r3, r1
 800459a:	d1f3      	bne.n	8004584 <_free_r+0x20>
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	1809      	adds	r1, r1, r0
 80045a2:	6021      	str	r1, [r4, #0]
 80045a4:	e7ee      	b.n	8004584 <_free_r+0x20>
 80045a6:	001a      	movs	r2, r3
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <_free_r+0x4e>
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	d9f9      	bls.n	80045a6 <_free_r+0x42>
 80045b2:	6811      	ldr	r1, [r2, #0]
 80045b4:	1850      	adds	r0, r2, r1
 80045b6:	42a0      	cmp	r0, r4
 80045b8:	d10b      	bne.n	80045d2 <_free_r+0x6e>
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	1809      	adds	r1, r1, r0
 80045be:	1850      	adds	r0, r2, r1
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	4283      	cmp	r3, r0
 80045c4:	d1e0      	bne.n	8004588 <_free_r+0x24>
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	1841      	adds	r1, r0, r1
 80045cc:	6011      	str	r1, [r2, #0]
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	e7da      	b.n	8004588 <_free_r+0x24>
 80045d2:	42a0      	cmp	r0, r4
 80045d4:	d902      	bls.n	80045dc <_free_r+0x78>
 80045d6:	230c      	movs	r3, #12
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	e7d5      	b.n	8004588 <_free_r+0x24>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	1821      	adds	r1, r4, r0
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d103      	bne.n	80045ec <_free_r+0x88>
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	1809      	adds	r1, r1, r0
 80045ea:	6021      	str	r1, [r4, #0]
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6054      	str	r4, [r2, #4]
 80045f0:	e7ca      	b.n	8004588 <_free_r+0x24>
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	200003fc 	.word	0x200003fc

080045f8 <_printf_common>:
 80045f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045fa:	0016      	movs	r6, r2
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	688a      	ldr	r2, [r1, #8]
 8004600:	690b      	ldr	r3, [r1, #16]
 8004602:	000c      	movs	r4, r1
 8004604:	9000      	str	r0, [sp, #0]
 8004606:	4293      	cmp	r3, r2
 8004608:	da00      	bge.n	800460c <_printf_common+0x14>
 800460a:	0013      	movs	r3, r2
 800460c:	0022      	movs	r2, r4
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	3243      	adds	r2, #67	@ 0x43
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	2a00      	cmp	r2, #0
 8004616:	d001      	beq.n	800461c <_printf_common+0x24>
 8004618:	3301      	adds	r3, #1
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	069b      	lsls	r3, r3, #26
 8004620:	d502      	bpl.n	8004628 <_printf_common+0x30>
 8004622:	6833      	ldr	r3, [r6, #0]
 8004624:	3302      	adds	r3, #2
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	2306      	movs	r3, #6
 800462c:	0015      	movs	r5, r2
 800462e:	401d      	ands	r5, r3
 8004630:	421a      	tst	r2, r3
 8004632:	d027      	beq.n	8004684 <_printf_common+0x8c>
 8004634:	0023      	movs	r3, r4
 8004636:	3343      	adds	r3, #67	@ 0x43
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	4193      	sbcs	r3, r2
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	0692      	lsls	r2, r2, #26
 8004642:	d430      	bmi.n	80046a6 <_printf_common+0xae>
 8004644:	0022      	movs	r2, r4
 8004646:	9901      	ldr	r1, [sp, #4]
 8004648:	9800      	ldr	r0, [sp, #0]
 800464a:	9d08      	ldr	r5, [sp, #32]
 800464c:	3243      	adds	r2, #67	@ 0x43
 800464e:	47a8      	blx	r5
 8004650:	3001      	adds	r0, #1
 8004652:	d025      	beq.n	80046a0 <_printf_common+0xa8>
 8004654:	2206      	movs	r2, #6
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	2500      	movs	r5, #0
 800465a:	4013      	ands	r3, r2
 800465c:	2b04      	cmp	r3, #4
 800465e:	d105      	bne.n	800466c <_printf_common+0x74>
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	68e5      	ldr	r5, [r4, #12]
 8004664:	1aed      	subs	r5, r5, r3
 8004666:	43eb      	mvns	r3, r5
 8004668:	17db      	asrs	r3, r3, #31
 800466a:	401d      	ands	r5, r3
 800466c:	68a3      	ldr	r3, [r4, #8]
 800466e:	6922      	ldr	r2, [r4, #16]
 8004670:	4293      	cmp	r3, r2
 8004672:	dd01      	ble.n	8004678 <_printf_common+0x80>
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	18ed      	adds	r5, r5, r3
 8004678:	2600      	movs	r6, #0
 800467a:	42b5      	cmp	r5, r6
 800467c:	d120      	bne.n	80046c0 <_printf_common+0xc8>
 800467e:	2000      	movs	r0, #0
 8004680:	e010      	b.n	80046a4 <_printf_common+0xac>
 8004682:	3501      	adds	r5, #1
 8004684:	68e3      	ldr	r3, [r4, #12]
 8004686:	6832      	ldr	r2, [r6, #0]
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	42ab      	cmp	r3, r5
 800468c:	ddd2      	ble.n	8004634 <_printf_common+0x3c>
 800468e:	0022      	movs	r2, r4
 8004690:	2301      	movs	r3, #1
 8004692:	9901      	ldr	r1, [sp, #4]
 8004694:	9800      	ldr	r0, [sp, #0]
 8004696:	9f08      	ldr	r7, [sp, #32]
 8004698:	3219      	adds	r2, #25
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	d1f0      	bne.n	8004682 <_printf_common+0x8a>
 80046a0:	2001      	movs	r0, #1
 80046a2:	4240      	negs	r0, r0
 80046a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046a6:	2030      	movs	r0, #48	@ 0x30
 80046a8:	18e1      	adds	r1, r4, r3
 80046aa:	3143      	adds	r1, #67	@ 0x43
 80046ac:	7008      	strb	r0, [r1, #0]
 80046ae:	0021      	movs	r1, r4
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	3145      	adds	r1, #69	@ 0x45
 80046b4:	7809      	ldrb	r1, [r1, #0]
 80046b6:	18a2      	adds	r2, r4, r2
 80046b8:	3243      	adds	r2, #67	@ 0x43
 80046ba:	3302      	adds	r3, #2
 80046bc:	7011      	strb	r1, [r2, #0]
 80046be:	e7c1      	b.n	8004644 <_printf_common+0x4c>
 80046c0:	0022      	movs	r2, r4
 80046c2:	2301      	movs	r3, #1
 80046c4:	9901      	ldr	r1, [sp, #4]
 80046c6:	9800      	ldr	r0, [sp, #0]
 80046c8:	9f08      	ldr	r7, [sp, #32]
 80046ca:	321a      	adds	r2, #26
 80046cc:	47b8      	blx	r7
 80046ce:	3001      	adds	r0, #1
 80046d0:	d0e6      	beq.n	80046a0 <_printf_common+0xa8>
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7d1      	b.n	800467a <_printf_common+0x82>
	...

080046d8 <_printf_i>:
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b08b      	sub	sp, #44	@ 0x2c
 80046dc:	9206      	str	r2, [sp, #24]
 80046de:	000a      	movs	r2, r1
 80046e0:	3243      	adds	r2, #67	@ 0x43
 80046e2:	9307      	str	r3, [sp, #28]
 80046e4:	9005      	str	r0, [sp, #20]
 80046e6:	9203      	str	r2, [sp, #12]
 80046e8:	7e0a      	ldrb	r2, [r1, #24]
 80046ea:	000c      	movs	r4, r1
 80046ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80046ee:	2a78      	cmp	r2, #120	@ 0x78
 80046f0:	d809      	bhi.n	8004706 <_printf_i+0x2e>
 80046f2:	2a62      	cmp	r2, #98	@ 0x62
 80046f4:	d80b      	bhi.n	800470e <_printf_i+0x36>
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	d100      	bne.n	80046fc <_printf_i+0x24>
 80046fa:	e0bc      	b.n	8004876 <_printf_i+0x19e>
 80046fc:	497b      	ldr	r1, [pc, #492]	@ (80048ec <_printf_i+0x214>)
 80046fe:	9104      	str	r1, [sp, #16]
 8004700:	2a58      	cmp	r2, #88	@ 0x58
 8004702:	d100      	bne.n	8004706 <_printf_i+0x2e>
 8004704:	e090      	b.n	8004828 <_printf_i+0x150>
 8004706:	0025      	movs	r5, r4
 8004708:	3542      	adds	r5, #66	@ 0x42
 800470a:	702a      	strb	r2, [r5, #0]
 800470c:	e022      	b.n	8004754 <_printf_i+0x7c>
 800470e:	0010      	movs	r0, r2
 8004710:	3863      	subs	r0, #99	@ 0x63
 8004712:	2815      	cmp	r0, #21
 8004714:	d8f7      	bhi.n	8004706 <_printf_i+0x2e>
 8004716:	f7fb fcf7 	bl	8000108 <__gnu_thumb1_case_shi>
 800471a:	0016      	.short	0x0016
 800471c:	fff6001f 	.word	0xfff6001f
 8004720:	fff6fff6 	.word	0xfff6fff6
 8004724:	001ffff6 	.word	0x001ffff6
 8004728:	fff6fff6 	.word	0xfff6fff6
 800472c:	fff6fff6 	.word	0xfff6fff6
 8004730:	003600a1 	.word	0x003600a1
 8004734:	fff60080 	.word	0xfff60080
 8004738:	00b2fff6 	.word	0x00b2fff6
 800473c:	0036fff6 	.word	0x0036fff6
 8004740:	fff6fff6 	.word	0xfff6fff6
 8004744:	0084      	.short	0x0084
 8004746:	0025      	movs	r5, r4
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	3542      	adds	r5, #66	@ 0x42
 800474c:	1d11      	adds	r1, r2, #4
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	702b      	strb	r3, [r5, #0]
 8004754:	2301      	movs	r3, #1
 8004756:	e0a0      	b.n	800489a <_printf_i+0x1c2>
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	6809      	ldr	r1, [r1, #0]
 800475c:	1d02      	adds	r2, r0, #4
 800475e:	060d      	lsls	r5, r1, #24
 8004760:	d50b      	bpl.n	800477a <_printf_i+0xa2>
 8004762:	6806      	ldr	r6, [r0, #0]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	2e00      	cmp	r6, #0
 8004768:	da03      	bge.n	8004772 <_printf_i+0x9a>
 800476a:	232d      	movs	r3, #45	@ 0x2d
 800476c:	9a03      	ldr	r2, [sp, #12]
 800476e:	4276      	negs	r6, r6
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	4b5e      	ldr	r3, [pc, #376]	@ (80048ec <_printf_i+0x214>)
 8004774:	270a      	movs	r7, #10
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	e018      	b.n	80047ac <_printf_i+0xd4>
 800477a:	6806      	ldr	r6, [r0, #0]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	0649      	lsls	r1, r1, #25
 8004780:	d5f1      	bpl.n	8004766 <_printf_i+0x8e>
 8004782:	b236      	sxth	r6, r6
 8004784:	e7ef      	b.n	8004766 <_printf_i+0x8e>
 8004786:	6808      	ldr	r0, [r1, #0]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	c940      	ldmia	r1!, {r6}
 800478c:	0605      	lsls	r5, r0, #24
 800478e:	d402      	bmi.n	8004796 <_printf_i+0xbe>
 8004790:	0640      	lsls	r0, r0, #25
 8004792:	d500      	bpl.n	8004796 <_printf_i+0xbe>
 8004794:	b2b6      	uxth	r6, r6
 8004796:	6019      	str	r1, [r3, #0]
 8004798:	4b54      	ldr	r3, [pc, #336]	@ (80048ec <_printf_i+0x214>)
 800479a:	270a      	movs	r7, #10
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	2a6f      	cmp	r2, #111	@ 0x6f
 80047a0:	d100      	bne.n	80047a4 <_printf_i+0xcc>
 80047a2:	3f02      	subs	r7, #2
 80047a4:	0023      	movs	r3, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	3343      	adds	r3, #67	@ 0x43
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	60a3      	str	r3, [r4, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db03      	blt.n	80047bc <_printf_i+0xe4>
 80047b4:	2104      	movs	r1, #4
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	438a      	bics	r2, r1
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	2e00      	cmp	r6, #0
 80047be:	d102      	bne.n	80047c6 <_printf_i+0xee>
 80047c0:	9d03      	ldr	r5, [sp, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <_printf_i+0x108>
 80047c6:	9d03      	ldr	r5, [sp, #12]
 80047c8:	0030      	movs	r0, r6
 80047ca:	0039      	movs	r1, r7
 80047cc:	f7fb fd2c 	bl	8000228 <__aeabi_uidivmod>
 80047d0:	9b04      	ldr	r3, [sp, #16]
 80047d2:	3d01      	subs	r5, #1
 80047d4:	5c5b      	ldrb	r3, [r3, r1]
 80047d6:	702b      	strb	r3, [r5, #0]
 80047d8:	0033      	movs	r3, r6
 80047da:	0006      	movs	r6, r0
 80047dc:	429f      	cmp	r7, r3
 80047de:	d9f3      	bls.n	80047c8 <_printf_i+0xf0>
 80047e0:	2f08      	cmp	r7, #8
 80047e2:	d109      	bne.n	80047f8 <_printf_i+0x120>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07db      	lsls	r3, r3, #31
 80047e8:	d506      	bpl.n	80047f8 <_printf_i+0x120>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	dc02      	bgt.n	80047f8 <_printf_i+0x120>
 80047f2:	2330      	movs	r3, #48	@ 0x30
 80047f4:	3d01      	subs	r5, #1
 80047f6:	702b      	strb	r3, [r5, #0]
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	1b5b      	subs	r3, r3, r5
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	9b07      	ldr	r3, [sp, #28]
 8004800:	0021      	movs	r1, r4
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	9805      	ldr	r0, [sp, #20]
 8004806:	9b06      	ldr	r3, [sp, #24]
 8004808:	aa09      	add	r2, sp, #36	@ 0x24
 800480a:	f7ff fef5 	bl	80045f8 <_printf_common>
 800480e:	3001      	adds	r0, #1
 8004810:	d148      	bne.n	80048a4 <_printf_i+0x1cc>
 8004812:	2001      	movs	r0, #1
 8004814:	4240      	negs	r0, r0
 8004816:	b00b      	add	sp, #44	@ 0x2c
 8004818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481a:	2220      	movs	r2, #32
 800481c:	6809      	ldr	r1, [r1, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	2278      	movs	r2, #120	@ 0x78
 8004824:	4932      	ldr	r1, [pc, #200]	@ (80048f0 <_printf_i+0x218>)
 8004826:	9104      	str	r1, [sp, #16]
 8004828:	0021      	movs	r1, r4
 800482a:	3145      	adds	r1, #69	@ 0x45
 800482c:	700a      	strb	r2, [r1, #0]
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	c940      	ldmia	r1!, {r6}
 8004834:	0610      	lsls	r0, r2, #24
 8004836:	d402      	bmi.n	800483e <_printf_i+0x166>
 8004838:	0650      	lsls	r0, r2, #25
 800483a:	d500      	bpl.n	800483e <_printf_i+0x166>
 800483c:	b2b6      	uxth	r6, r6
 800483e:	6019      	str	r1, [r3, #0]
 8004840:	07d3      	lsls	r3, r2, #31
 8004842:	d502      	bpl.n	800484a <_printf_i+0x172>
 8004844:	2320      	movs	r3, #32
 8004846:	4313      	orrs	r3, r2
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	2e00      	cmp	r6, #0
 800484c:	d001      	beq.n	8004852 <_printf_i+0x17a>
 800484e:	2710      	movs	r7, #16
 8004850:	e7a8      	b.n	80047a4 <_printf_i+0xcc>
 8004852:	2220      	movs	r2, #32
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	4393      	bics	r3, r2
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	e7f8      	b.n	800484e <_printf_i+0x176>
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	680d      	ldr	r5, [r1, #0]
 8004860:	1d10      	adds	r0, r2, #4
 8004862:	6949      	ldr	r1, [r1, #20]
 8004864:	6018      	str	r0, [r3, #0]
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	062e      	lsls	r6, r5, #24
 800486a:	d501      	bpl.n	8004870 <_printf_i+0x198>
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	e002      	b.n	8004876 <_printf_i+0x19e>
 8004870:	066d      	lsls	r5, r5, #25
 8004872:	d5fb      	bpl.n	800486c <_printf_i+0x194>
 8004874:	8019      	strh	r1, [r3, #0]
 8004876:	2300      	movs	r3, #0
 8004878:	9d03      	ldr	r5, [sp, #12]
 800487a:	6123      	str	r3, [r4, #16]
 800487c:	e7bf      	b.n	80047fe <_printf_i+0x126>
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	1d11      	adds	r1, r2, #4
 8004882:	6019      	str	r1, [r3, #0]
 8004884:	6815      	ldr	r5, [r2, #0]
 8004886:	2100      	movs	r1, #0
 8004888:	0028      	movs	r0, r5
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	f000 f8f4 	bl	8004a78 <memchr>
 8004890:	2800      	cmp	r0, #0
 8004892:	d001      	beq.n	8004898 <_printf_i+0x1c0>
 8004894:	1b40      	subs	r0, r0, r5
 8004896:	6060      	str	r0, [r4, #4]
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	2300      	movs	r3, #0
 800489e:	9a03      	ldr	r2, [sp, #12]
 80048a0:	7013      	strb	r3, [r2, #0]
 80048a2:	e7ac      	b.n	80047fe <_printf_i+0x126>
 80048a4:	002a      	movs	r2, r5
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	9906      	ldr	r1, [sp, #24]
 80048aa:	9805      	ldr	r0, [sp, #20]
 80048ac:	9d07      	ldr	r5, [sp, #28]
 80048ae:	47a8      	blx	r5
 80048b0:	3001      	adds	r0, #1
 80048b2:	d0ae      	beq.n	8004812 <_printf_i+0x13a>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	079b      	lsls	r3, r3, #30
 80048b8:	d415      	bmi.n	80048e6 <_printf_i+0x20e>
 80048ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048bc:	68e0      	ldr	r0, [r4, #12]
 80048be:	4298      	cmp	r0, r3
 80048c0:	daa9      	bge.n	8004816 <_printf_i+0x13e>
 80048c2:	0018      	movs	r0, r3
 80048c4:	e7a7      	b.n	8004816 <_printf_i+0x13e>
 80048c6:	0022      	movs	r2, r4
 80048c8:	2301      	movs	r3, #1
 80048ca:	9906      	ldr	r1, [sp, #24]
 80048cc:	9805      	ldr	r0, [sp, #20]
 80048ce:	9e07      	ldr	r6, [sp, #28]
 80048d0:	3219      	adds	r2, #25
 80048d2:	47b0      	blx	r6
 80048d4:	3001      	adds	r0, #1
 80048d6:	d09c      	beq.n	8004812 <_printf_i+0x13a>
 80048d8:	3501      	adds	r5, #1
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dcf0      	bgt.n	80048c6 <_printf_i+0x1ee>
 80048e4:	e7e9      	b.n	80048ba <_printf_i+0x1e2>
 80048e6:	2500      	movs	r5, #0
 80048e8:	e7f7      	b.n	80048da <_printf_i+0x202>
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	0800538e 	.word	0x0800538e
 80048f0:	0800539f 	.word	0x0800539f

080048f4 <__sflush_r>:
 80048f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048f6:	220c      	movs	r2, #12
 80048f8:	5e8b      	ldrsh	r3, [r1, r2]
 80048fa:	0005      	movs	r5, r0
 80048fc:	000c      	movs	r4, r1
 80048fe:	071a      	lsls	r2, r3, #28
 8004900:	d456      	bmi.n	80049b0 <__sflush_r+0xbc>
 8004902:	684a      	ldr	r2, [r1, #4]
 8004904:	2a00      	cmp	r2, #0
 8004906:	dc02      	bgt.n	800490e <__sflush_r+0x1a>
 8004908:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800490a:	2a00      	cmp	r2, #0
 800490c:	dd4e      	ble.n	80049ac <__sflush_r+0xb8>
 800490e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004910:	2f00      	cmp	r7, #0
 8004912:	d04b      	beq.n	80049ac <__sflush_r+0xb8>
 8004914:	2200      	movs	r2, #0
 8004916:	2080      	movs	r0, #128	@ 0x80
 8004918:	682e      	ldr	r6, [r5, #0]
 800491a:	602a      	str	r2, [r5, #0]
 800491c:	001a      	movs	r2, r3
 800491e:	0140      	lsls	r0, r0, #5
 8004920:	6a21      	ldr	r1, [r4, #32]
 8004922:	4002      	ands	r2, r0
 8004924:	4203      	tst	r3, r0
 8004926:	d033      	beq.n	8004990 <__sflush_r+0x9c>
 8004928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	075b      	lsls	r3, r3, #29
 800492e:	d506      	bpl.n	800493e <__sflush_r+0x4a>
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <__sflush_r+0x4a>
 800493a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800493c:	1ad2      	subs	r2, r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	0028      	movs	r0, r5
 8004942:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004944:	6a21      	ldr	r1, [r4, #32]
 8004946:	47b8      	blx	r7
 8004948:	89a2      	ldrh	r2, [r4, #12]
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d106      	bne.n	800495c <__sflush_r+0x68>
 800494e:	6829      	ldr	r1, [r5, #0]
 8004950:	291d      	cmp	r1, #29
 8004952:	d846      	bhi.n	80049e2 <__sflush_r+0xee>
 8004954:	4b29      	ldr	r3, [pc, #164]	@ (80049fc <__sflush_r+0x108>)
 8004956:	410b      	asrs	r3, r1
 8004958:	07db      	lsls	r3, r3, #31
 800495a:	d442      	bmi.n	80049e2 <__sflush_r+0xee>
 800495c:	2300      	movs	r3, #0
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	04d2      	lsls	r2, r2, #19
 8004966:	d505      	bpl.n	8004974 <__sflush_r+0x80>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <__sflush_r+0x7e>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d100      	bne.n	8004974 <__sflush_r+0x80>
 8004972:	6560      	str	r0, [r4, #84]	@ 0x54
 8004974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004976:	602e      	str	r6, [r5, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	d017      	beq.n	80049ac <__sflush_r+0xb8>
 800497c:	0023      	movs	r3, r4
 800497e:	3344      	adds	r3, #68	@ 0x44
 8004980:	4299      	cmp	r1, r3
 8004982:	d002      	beq.n	800498a <__sflush_r+0x96>
 8004984:	0028      	movs	r0, r5
 8004986:	f7ff fded 	bl	8004564 <_free_r>
 800498a:	2300      	movs	r3, #0
 800498c:	6363      	str	r3, [r4, #52]	@ 0x34
 800498e:	e00d      	b.n	80049ac <__sflush_r+0xb8>
 8004990:	2301      	movs	r3, #1
 8004992:	0028      	movs	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	0002      	movs	r2, r0
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d1c6      	bne.n	800492a <__sflush_r+0x36>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0c3      	beq.n	800492a <__sflush_r+0x36>
 80049a2:	2b1d      	cmp	r3, #29
 80049a4:	d001      	beq.n	80049aa <__sflush_r+0xb6>
 80049a6:	2b16      	cmp	r3, #22
 80049a8:	d11a      	bne.n	80049e0 <__sflush_r+0xec>
 80049aa:	602e      	str	r6, [r5, #0]
 80049ac:	2000      	movs	r0, #0
 80049ae:	e01e      	b.n	80049ee <__sflush_r+0xfa>
 80049b0:	690e      	ldr	r6, [r1, #16]
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	d0fa      	beq.n	80049ac <__sflush_r+0xb8>
 80049b6:	680f      	ldr	r7, [r1, #0]
 80049b8:	600e      	str	r6, [r1, #0]
 80049ba:	1bba      	subs	r2, r7, r6
 80049bc:	9201      	str	r2, [sp, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	079b      	lsls	r3, r3, #30
 80049c2:	d100      	bne.n	80049c6 <__sflush_r+0xd2>
 80049c4:	694a      	ldr	r2, [r1, #20]
 80049c6:	60a2      	str	r2, [r4, #8]
 80049c8:	9b01      	ldr	r3, [sp, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	ddee      	ble.n	80049ac <__sflush_r+0xb8>
 80049ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80049d0:	0032      	movs	r2, r6
 80049d2:	001f      	movs	r7, r3
 80049d4:	0028      	movs	r0, r5
 80049d6:	9b01      	ldr	r3, [sp, #4]
 80049d8:	6a21      	ldr	r1, [r4, #32]
 80049da:	47b8      	blx	r7
 80049dc:	2800      	cmp	r0, #0
 80049de:	dc07      	bgt.n	80049f0 <__sflush_r+0xfc>
 80049e0:	89a2      	ldrh	r2, [r4, #12]
 80049e2:	2340      	movs	r3, #64	@ 0x40
 80049e4:	2001      	movs	r0, #1
 80049e6:	4313      	orrs	r3, r2
 80049e8:	b21b      	sxth	r3, r3
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	4240      	negs	r0, r0
 80049ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	1836      	adds	r6, r6, r0
 80049f4:	1a1b      	subs	r3, r3, r0
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	e7e6      	b.n	80049c8 <__sflush_r+0xd4>
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	dfbffffe 	.word	0xdfbffffe

08004a00 <_fflush_r>:
 8004a00:	690b      	ldr	r3, [r1, #16]
 8004a02:	b570      	push	{r4, r5, r6, lr}
 8004a04:	0005      	movs	r5, r0
 8004a06:	000c      	movs	r4, r1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <_fflush_r+0x12>
 8004a0c:	2500      	movs	r5, #0
 8004a0e:	0028      	movs	r0, r5
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d004      	beq.n	8004a20 <_fflush_r+0x20>
 8004a16:	6a03      	ldr	r3, [r0, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <_fflush_r+0x20>
 8004a1c:	f7ff fbec 	bl	80041f8 <__sinit>
 8004a20:	220c      	movs	r2, #12
 8004a22:	5ea3      	ldrsh	r3, [r4, r2]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f1      	beq.n	8004a0c <_fflush_r+0xc>
 8004a28:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a2a:	07d2      	lsls	r2, r2, #31
 8004a2c:	d404      	bmi.n	8004a38 <_fflush_r+0x38>
 8004a2e:	059b      	lsls	r3, r3, #22
 8004a30:	d402      	bmi.n	8004a38 <_fflush_r+0x38>
 8004a32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a34:	f7ff fd75 	bl	8004522 <__retarget_lock_acquire_recursive>
 8004a38:	0028      	movs	r0, r5
 8004a3a:	0021      	movs	r1, r4
 8004a3c:	f7ff ff5a 	bl	80048f4 <__sflush_r>
 8004a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a42:	0005      	movs	r5, r0
 8004a44:	07db      	lsls	r3, r3, #31
 8004a46:	d4e2      	bmi.n	8004a0e <_fflush_r+0xe>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	059b      	lsls	r3, r3, #22
 8004a4c:	d4df      	bmi.n	8004a0e <_fflush_r+0xe>
 8004a4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a50:	f7ff fd68 	bl	8004524 <__retarget_lock_release_recursive>
 8004a54:	e7db      	b.n	8004a0e <_fflush_r+0xe>
	...

08004a58 <fiprintf>:
 8004a58:	b40e      	push	{r1, r2, r3}
 8004a5a:	b517      	push	{r0, r1, r2, r4, lr}
 8004a5c:	4c05      	ldr	r4, [pc, #20]	@ (8004a74 <fiprintf+0x1c>)
 8004a5e:	ab05      	add	r3, sp, #20
 8004a60:	cb04      	ldmia	r3!, {r2}
 8004a62:	0001      	movs	r1, r0
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f000 f840 	bl	8004aec <_vfiprintf_r>
 8004a6c:	bc1e      	pop	{r1, r2, r3, r4}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	b003      	add	sp, #12
 8004a72:	4718      	bx	r3
 8004a74:	20000018 	.word	0x20000018

08004a78 <memchr>:
 8004a78:	b2c9      	uxtb	r1, r1
 8004a7a:	1882      	adds	r2, r0, r2
 8004a7c:	4290      	cmp	r0, r2
 8004a7e:	d101      	bne.n	8004a84 <memchr+0xc>
 8004a80:	2000      	movs	r0, #0
 8004a82:	4770      	bx	lr
 8004a84:	7803      	ldrb	r3, [r0, #0]
 8004a86:	428b      	cmp	r3, r1
 8004a88:	d0fb      	beq.n	8004a82 <memchr+0xa>
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	e7f6      	b.n	8004a7c <memchr+0x4>

08004a8e <abort>:
 8004a8e:	2006      	movs	r0, #6
 8004a90:	b510      	push	{r4, lr}
 8004a92:	f000 fa11 	bl	8004eb8 <raise>
 8004a96:	2001      	movs	r0, #1
 8004a98:	f7fc f930 	bl	8000cfc <_exit>

08004a9c <__sfputc_r>:
 8004a9c:	6893      	ldr	r3, [r2, #8]
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	6093      	str	r3, [r2, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da04      	bge.n	8004ab2 <__sfputc_r+0x16>
 8004aa8:	6994      	ldr	r4, [r2, #24]
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	db07      	blt.n	8004abe <__sfputc_r+0x22>
 8004aae:	290a      	cmp	r1, #10
 8004ab0:	d005      	beq.n	8004abe <__sfputc_r+0x22>
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	1c58      	adds	r0, r3, #1
 8004ab6:	6010      	str	r0, [r2, #0]
 8004ab8:	7019      	strb	r1, [r3, #0]
 8004aba:	0008      	movs	r0, r1
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	f000 f931 	bl	8004d24 <__swbuf_r>
 8004ac2:	0001      	movs	r1, r0
 8004ac4:	e7f9      	b.n	8004aba <__sfputc_r+0x1e>

08004ac6 <__sfputs_r>:
 8004ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac8:	0006      	movs	r6, r0
 8004aca:	000f      	movs	r7, r1
 8004acc:	0014      	movs	r4, r2
 8004ace:	18d5      	adds	r5, r2, r3
 8004ad0:	42ac      	cmp	r4, r5
 8004ad2:	d101      	bne.n	8004ad8 <__sfputs_r+0x12>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e007      	b.n	8004ae8 <__sfputs_r+0x22>
 8004ad8:	7821      	ldrb	r1, [r4, #0]
 8004ada:	003a      	movs	r2, r7
 8004adc:	0030      	movs	r0, r6
 8004ade:	f7ff ffdd 	bl	8004a9c <__sfputc_r>
 8004ae2:	3401      	adds	r4, #1
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d1f3      	bne.n	8004ad0 <__sfputs_r+0xa>
 8004ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004aec <_vfiprintf_r>:
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aee:	b0a1      	sub	sp, #132	@ 0x84
 8004af0:	000f      	movs	r7, r1
 8004af2:	0015      	movs	r5, r2
 8004af4:	001e      	movs	r6, r3
 8004af6:	9003      	str	r0, [sp, #12]
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d004      	beq.n	8004b06 <_vfiprintf_r+0x1a>
 8004afc:	6a03      	ldr	r3, [r0, #32]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <_vfiprintf_r+0x1a>
 8004b02:	f7ff fb79 	bl	80041f8 <__sinit>
 8004b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b08:	07db      	lsls	r3, r3, #31
 8004b0a:	d405      	bmi.n	8004b18 <_vfiprintf_r+0x2c>
 8004b0c:	89bb      	ldrh	r3, [r7, #12]
 8004b0e:	059b      	lsls	r3, r3, #22
 8004b10:	d402      	bmi.n	8004b18 <_vfiprintf_r+0x2c>
 8004b12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b14:	f7ff fd05 	bl	8004522 <__retarget_lock_acquire_recursive>
 8004b18:	89bb      	ldrh	r3, [r7, #12]
 8004b1a:	071b      	lsls	r3, r3, #28
 8004b1c:	d502      	bpl.n	8004b24 <_vfiprintf_r+0x38>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d113      	bne.n	8004b4c <_vfiprintf_r+0x60>
 8004b24:	0039      	movs	r1, r7
 8004b26:	9803      	ldr	r0, [sp, #12]
 8004b28:	f000 f93e 	bl	8004da8 <__swsetup_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d00d      	beq.n	8004b4c <_vfiprintf_r+0x60>
 8004b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b32:	07db      	lsls	r3, r3, #31
 8004b34:	d503      	bpl.n	8004b3e <_vfiprintf_r+0x52>
 8004b36:	2001      	movs	r0, #1
 8004b38:	4240      	negs	r0, r0
 8004b3a:	b021      	add	sp, #132	@ 0x84
 8004b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3e:	89bb      	ldrh	r3, [r7, #12]
 8004b40:	059b      	lsls	r3, r3, #22
 8004b42:	d4f8      	bmi.n	8004b36 <_vfiprintf_r+0x4a>
 8004b44:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b46:	f7ff fced 	bl	8004524 <__retarget_lock_release_recursive>
 8004b4a:	e7f4      	b.n	8004b36 <_vfiprintf_r+0x4a>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	ac08      	add	r4, sp, #32
 8004b50:	6163      	str	r3, [r4, #20]
 8004b52:	3320      	adds	r3, #32
 8004b54:	7663      	strb	r3, [r4, #25]
 8004b56:	3310      	adds	r3, #16
 8004b58:	76a3      	strb	r3, [r4, #26]
 8004b5a:	9607      	str	r6, [sp, #28]
 8004b5c:	002e      	movs	r6, r5
 8004b5e:	7833      	ldrb	r3, [r6, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <_vfiprintf_r+0x7c>
 8004b64:	2b25      	cmp	r3, #37	@ 0x25
 8004b66:	d148      	bne.n	8004bfa <_vfiprintf_r+0x10e>
 8004b68:	1b73      	subs	r3, r6, r5
 8004b6a:	9305      	str	r3, [sp, #20]
 8004b6c:	42ae      	cmp	r6, r5
 8004b6e:	d00b      	beq.n	8004b88 <_vfiprintf_r+0x9c>
 8004b70:	002a      	movs	r2, r5
 8004b72:	0039      	movs	r1, r7
 8004b74:	9803      	ldr	r0, [sp, #12]
 8004b76:	f7ff ffa6 	bl	8004ac6 <__sfputs_r>
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d100      	bne.n	8004b80 <_vfiprintf_r+0x94>
 8004b7e:	e0ae      	b.n	8004cde <_vfiprintf_r+0x1f2>
 8004b80:	6963      	ldr	r3, [r4, #20]
 8004b82:	9a05      	ldr	r2, [sp, #20]
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	6163      	str	r3, [r4, #20]
 8004b88:	7833      	ldrb	r3, [r6, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d100      	bne.n	8004b90 <_vfiprintf_r+0xa4>
 8004b8e:	e0a6      	b.n	8004cde <_vfiprintf_r+0x1f2>
 8004b90:	2201      	movs	r2, #1
 8004b92:	2300      	movs	r3, #0
 8004b94:	4252      	negs	r2, r2
 8004b96:	6062      	str	r2, [r4, #4]
 8004b98:	a904      	add	r1, sp, #16
 8004b9a:	3254      	adds	r2, #84	@ 0x54
 8004b9c:	1852      	adds	r2, r2, r1
 8004b9e:	1c75      	adds	r5, r6, #1
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	60e3      	str	r3, [r4, #12]
 8004ba4:	60a3      	str	r3, [r4, #8]
 8004ba6:	7013      	strb	r3, [r2, #0]
 8004ba8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004baa:	4b59      	ldr	r3, [pc, #356]	@ (8004d10 <_vfiprintf_r+0x224>)
 8004bac:	2205      	movs	r2, #5
 8004bae:	0018      	movs	r0, r3
 8004bb0:	7829      	ldrb	r1, [r5, #0]
 8004bb2:	9305      	str	r3, [sp, #20]
 8004bb4:	f7ff ff60 	bl	8004a78 <memchr>
 8004bb8:	1c6e      	adds	r6, r5, #1
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d11f      	bne.n	8004bfe <_vfiprintf_r+0x112>
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	06d3      	lsls	r3, r2, #27
 8004bc2:	d504      	bpl.n	8004bce <_vfiprintf_r+0xe2>
 8004bc4:	2353      	movs	r3, #83	@ 0x53
 8004bc6:	a904      	add	r1, sp, #16
 8004bc8:	185b      	adds	r3, r3, r1
 8004bca:	2120      	movs	r1, #32
 8004bcc:	7019      	strb	r1, [r3, #0]
 8004bce:	0713      	lsls	r3, r2, #28
 8004bd0:	d504      	bpl.n	8004bdc <_vfiprintf_r+0xf0>
 8004bd2:	2353      	movs	r3, #83	@ 0x53
 8004bd4:	a904      	add	r1, sp, #16
 8004bd6:	185b      	adds	r3, r3, r1
 8004bd8:	212b      	movs	r1, #43	@ 0x2b
 8004bda:	7019      	strb	r1, [r3, #0]
 8004bdc:	782b      	ldrb	r3, [r5, #0]
 8004bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004be0:	d016      	beq.n	8004c10 <_vfiprintf_r+0x124>
 8004be2:	002e      	movs	r6, r5
 8004be4:	2100      	movs	r1, #0
 8004be6:	200a      	movs	r0, #10
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	7832      	ldrb	r2, [r6, #0]
 8004bec:	1c75      	adds	r5, r6, #1
 8004bee:	3a30      	subs	r2, #48	@ 0x30
 8004bf0:	2a09      	cmp	r2, #9
 8004bf2:	d950      	bls.n	8004c96 <_vfiprintf_r+0x1aa>
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	d111      	bne.n	8004c1c <_vfiprintf_r+0x130>
 8004bf8:	e017      	b.n	8004c2a <_vfiprintf_r+0x13e>
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7af      	b.n	8004b5e <_vfiprintf_r+0x72>
 8004bfe:	9b05      	ldr	r3, [sp, #20]
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	1ac0      	subs	r0, r0, r3
 8004c04:	2301      	movs	r3, #1
 8004c06:	4083      	lsls	r3, r0
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	0035      	movs	r5, r6
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	e7cc      	b.n	8004baa <_vfiprintf_r+0xbe>
 8004c10:	9b07      	ldr	r3, [sp, #28]
 8004c12:	1d19      	adds	r1, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	9107      	str	r1, [sp, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db01      	blt.n	8004c20 <_vfiprintf_r+0x134>
 8004c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c1e:	e004      	b.n	8004c2a <_vfiprintf_r+0x13e>
 8004c20:	425b      	negs	r3, r3
 8004c22:	60e3      	str	r3, [r4, #12]
 8004c24:	2302      	movs	r3, #2
 8004c26:	4313      	orrs	r3, r2
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	7833      	ldrb	r3, [r6, #0]
 8004c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c2e:	d10c      	bne.n	8004c4a <_vfiprintf_r+0x15e>
 8004c30:	7873      	ldrb	r3, [r6, #1]
 8004c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c34:	d134      	bne.n	8004ca0 <_vfiprintf_r+0x1b4>
 8004c36:	9b07      	ldr	r3, [sp, #28]
 8004c38:	3602      	adds	r6, #2
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	9207      	str	r2, [sp, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da01      	bge.n	8004c48 <_vfiprintf_r+0x15c>
 8004c44:	2301      	movs	r3, #1
 8004c46:	425b      	negs	r3, r3
 8004c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c4a:	4d32      	ldr	r5, [pc, #200]	@ (8004d14 <_vfiprintf_r+0x228>)
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	0028      	movs	r0, r5
 8004c50:	7831      	ldrb	r1, [r6, #0]
 8004c52:	f7ff ff11 	bl	8004a78 <memchr>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d006      	beq.n	8004c68 <_vfiprintf_r+0x17c>
 8004c5a:	2340      	movs	r3, #64	@ 0x40
 8004c5c:	1b40      	subs	r0, r0, r5
 8004c5e:	4083      	lsls	r3, r0
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	3601      	adds	r6, #1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	7831      	ldrb	r1, [r6, #0]
 8004c6a:	2206      	movs	r2, #6
 8004c6c:	482a      	ldr	r0, [pc, #168]	@ (8004d18 <_vfiprintf_r+0x22c>)
 8004c6e:	1c75      	adds	r5, r6, #1
 8004c70:	7621      	strb	r1, [r4, #24]
 8004c72:	f7ff ff01 	bl	8004a78 <memchr>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d040      	beq.n	8004cfc <_vfiprintf_r+0x210>
 8004c7a:	4b28      	ldr	r3, [pc, #160]	@ (8004d1c <_vfiprintf_r+0x230>)
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d122      	bne.n	8004cc6 <_vfiprintf_r+0x1da>
 8004c80:	2207      	movs	r2, #7
 8004c82:	9b07      	ldr	r3, [sp, #28]
 8004c84:	3307      	adds	r3, #7
 8004c86:	4393      	bics	r3, r2
 8004c88:	3308      	adds	r3, #8
 8004c8a:	9307      	str	r3, [sp, #28]
 8004c8c:	6963      	ldr	r3, [r4, #20]
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	6163      	str	r3, [r4, #20]
 8004c94:	e762      	b.n	8004b5c <_vfiprintf_r+0x70>
 8004c96:	4343      	muls	r3, r0
 8004c98:	002e      	movs	r6, r5
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	e7a4      	b.n	8004bea <_vfiprintf_r+0xfe>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	200a      	movs	r0, #10
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	6063      	str	r3, [r4, #4]
 8004caa:	7832      	ldrb	r2, [r6, #0]
 8004cac:	1c75      	adds	r5, r6, #1
 8004cae:	3a30      	subs	r2, #48	@ 0x30
 8004cb0:	2a09      	cmp	r2, #9
 8004cb2:	d903      	bls.n	8004cbc <_vfiprintf_r+0x1d0>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0c8      	beq.n	8004c4a <_vfiprintf_r+0x15e>
 8004cb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cba:	e7c6      	b.n	8004c4a <_vfiprintf_r+0x15e>
 8004cbc:	4341      	muls	r1, r0
 8004cbe:	002e      	movs	r6, r5
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	1889      	adds	r1, r1, r2
 8004cc4:	e7f1      	b.n	8004caa <_vfiprintf_r+0x1be>
 8004cc6:	aa07      	add	r2, sp, #28
 8004cc8:	9200      	str	r2, [sp, #0]
 8004cca:	0021      	movs	r1, r4
 8004ccc:	003a      	movs	r2, r7
 8004cce:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <_vfiprintf_r+0x234>)
 8004cd0:	9803      	ldr	r0, [sp, #12]
 8004cd2:	e000      	b.n	8004cd6 <_vfiprintf_r+0x1ea>
 8004cd4:	bf00      	nop
 8004cd6:	9004      	str	r0, [sp, #16]
 8004cd8:	9b04      	ldr	r3, [sp, #16]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	d1d6      	bne.n	8004c8c <_vfiprintf_r+0x1a0>
 8004cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ce0:	07db      	lsls	r3, r3, #31
 8004ce2:	d405      	bmi.n	8004cf0 <_vfiprintf_r+0x204>
 8004ce4:	89bb      	ldrh	r3, [r7, #12]
 8004ce6:	059b      	lsls	r3, r3, #22
 8004ce8:	d402      	bmi.n	8004cf0 <_vfiprintf_r+0x204>
 8004cea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004cec:	f7ff fc1a 	bl	8004524 <__retarget_lock_release_recursive>
 8004cf0:	89bb      	ldrh	r3, [r7, #12]
 8004cf2:	065b      	lsls	r3, r3, #25
 8004cf4:	d500      	bpl.n	8004cf8 <_vfiprintf_r+0x20c>
 8004cf6:	e71e      	b.n	8004b36 <_vfiprintf_r+0x4a>
 8004cf8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004cfa:	e71e      	b.n	8004b3a <_vfiprintf_r+0x4e>
 8004cfc:	aa07      	add	r2, sp, #28
 8004cfe:	9200      	str	r2, [sp, #0]
 8004d00:	0021      	movs	r1, r4
 8004d02:	003a      	movs	r2, r7
 8004d04:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <_vfiprintf_r+0x234>)
 8004d06:	9803      	ldr	r0, [sp, #12]
 8004d08:	f7ff fce6 	bl	80046d8 <_printf_i>
 8004d0c:	e7e3      	b.n	8004cd6 <_vfiprintf_r+0x1ea>
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	080053b0 	.word	0x080053b0
 8004d14:	080053b6 	.word	0x080053b6
 8004d18:	080053ba 	.word	0x080053ba
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004ac7 	.word	0x08004ac7

08004d24 <__swbuf_r>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	0006      	movs	r6, r0
 8004d28:	000d      	movs	r5, r1
 8004d2a:	0014      	movs	r4, r2
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d004      	beq.n	8004d3a <__swbuf_r+0x16>
 8004d30:	6a03      	ldr	r3, [r0, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <__swbuf_r+0x16>
 8004d36:	f7ff fa5f 	bl	80041f8 <__sinit>
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	d502      	bpl.n	8004d4a <__swbuf_r+0x26>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <__swbuf_r+0x3a>
 8004d4a:	0021      	movs	r1, r4
 8004d4c:	0030      	movs	r0, r6
 8004d4e:	f000 f82b 	bl	8004da8 <__swsetup_r>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d003      	beq.n	8004d5e <__swbuf_r+0x3a>
 8004d56:	2501      	movs	r5, #1
 8004d58:	426d      	negs	r5, r5
 8004d5a:	0028      	movs	r0, r5
 8004d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	b2ef      	uxtb	r7, r5
 8004d64:	1ac0      	subs	r0, r0, r3
 8004d66:	6963      	ldr	r3, [r4, #20]
 8004d68:	b2ed      	uxtb	r5, r5
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	dc05      	bgt.n	8004d7a <__swbuf_r+0x56>
 8004d6e:	0021      	movs	r1, r4
 8004d70:	0030      	movs	r0, r6
 8004d72:	f7ff fe45 	bl	8004a00 <_fflush_r>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d1ed      	bne.n	8004d56 <__swbuf_r+0x32>
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60a3      	str	r3, [r4, #8]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	701f      	strb	r7, [r3, #0]
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	4283      	cmp	r3, r0
 8004d8e:	d004      	beq.n	8004d9a <__swbuf_r+0x76>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	07db      	lsls	r3, r3, #31
 8004d94:	d5e1      	bpl.n	8004d5a <__swbuf_r+0x36>
 8004d96:	2d0a      	cmp	r5, #10
 8004d98:	d1df      	bne.n	8004d5a <__swbuf_r+0x36>
 8004d9a:	0021      	movs	r1, r4
 8004d9c:	0030      	movs	r0, r6
 8004d9e:	f7ff fe2f 	bl	8004a00 <_fflush_r>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0d9      	beq.n	8004d5a <__swbuf_r+0x36>
 8004da6:	e7d6      	b.n	8004d56 <__swbuf_r+0x32>

08004da8 <__swsetup_r>:
 8004da8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e60 <__swsetup_r+0xb8>)
 8004daa:	b570      	push	{r4, r5, r6, lr}
 8004dac:	0005      	movs	r5, r0
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	000c      	movs	r4, r1
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d004      	beq.n	8004dc0 <__swsetup_r+0x18>
 8004db6:	6a03      	ldr	r3, [r0, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <__swsetup_r+0x18>
 8004dbc:	f7ff fa1c 	bl	80041f8 <__sinit>
 8004dc0:	230c      	movs	r3, #12
 8004dc2:	5ee2      	ldrsh	r2, [r4, r3]
 8004dc4:	0713      	lsls	r3, r2, #28
 8004dc6:	d423      	bmi.n	8004e10 <__swsetup_r+0x68>
 8004dc8:	06d3      	lsls	r3, r2, #27
 8004dca:	d407      	bmi.n	8004ddc <__swsetup_r+0x34>
 8004dcc:	2309      	movs	r3, #9
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	2340      	movs	r3, #64	@ 0x40
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	4240      	negs	r0, r0
 8004dda:	e03a      	b.n	8004e52 <__swsetup_r+0xaa>
 8004ddc:	0752      	lsls	r2, r2, #29
 8004dde:	d513      	bpl.n	8004e08 <__swsetup_r+0x60>
 8004de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d008      	beq.n	8004df8 <__swsetup_r+0x50>
 8004de6:	0023      	movs	r3, r4
 8004de8:	3344      	adds	r3, #68	@ 0x44
 8004dea:	4299      	cmp	r1, r3
 8004dec:	d002      	beq.n	8004df4 <__swsetup_r+0x4c>
 8004dee:	0028      	movs	r0, r5
 8004df0:	f7ff fbb8 	bl	8004564 <_free_r>
 8004df4:	2300      	movs	r3, #0
 8004df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004df8:	2224      	movs	r2, #36	@ 0x24
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	4393      	bics	r3, r2
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	2300      	movs	r3, #0
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	2308      	movs	r3, #8
 8004e0a:	89a2      	ldrh	r2, [r4, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <__swsetup_r+0x86>
 8004e16:	21a0      	movs	r1, #160	@ 0xa0
 8004e18:	2280      	movs	r2, #128	@ 0x80
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	0089      	lsls	r1, r1, #2
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	400b      	ands	r3, r1
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <__swsetup_r+0x86>
 8004e26:	0021      	movs	r1, r4
 8004e28:	0028      	movs	r0, r5
 8004e2a:	f000 f88f 	bl	8004f4c <__smakebuf_r>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	5ee2      	ldrsh	r2, [r4, r3]
 8004e32:	2101      	movs	r1, #1
 8004e34:	0013      	movs	r3, r2
 8004e36:	400b      	ands	r3, r1
 8004e38:	420a      	tst	r2, r1
 8004e3a:	d00b      	beq.n	8004e54 <__swsetup_r+0xac>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60a3      	str	r3, [r4, #8]
 8004e40:	6963      	ldr	r3, [r4, #20]
 8004e42:	425b      	negs	r3, r3
 8004e44:	61a3      	str	r3, [r4, #24]
 8004e46:	2000      	movs	r0, #0
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	d101      	bne.n	8004e52 <__swsetup_r+0xaa>
 8004e4e:	0613      	lsls	r3, r2, #24
 8004e50:	d4be      	bmi.n	8004dd0 <__swsetup_r+0x28>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	0791      	lsls	r1, r2, #30
 8004e56:	d400      	bmi.n	8004e5a <__swsetup_r+0xb2>
 8004e58:	6963      	ldr	r3, [r4, #20]
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	e7f3      	b.n	8004e46 <__swsetup_r+0x9e>
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	20000018 	.word	0x20000018

08004e64 <_raise_r>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	0004      	movs	r4, r0
 8004e68:	000d      	movs	r5, r1
 8004e6a:	291f      	cmp	r1, #31
 8004e6c:	d904      	bls.n	8004e78 <_raise_r+0x14>
 8004e6e:	2316      	movs	r3, #22
 8004e70:	6003      	str	r3, [r0, #0]
 8004e72:	2001      	movs	r0, #1
 8004e74:	4240      	negs	r0, r0
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <_raise_r+0x24>
 8004e7e:	008a      	lsls	r2, r1, #2
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d108      	bne.n	8004e9a <_raise_r+0x36>
 8004e88:	0020      	movs	r0, r4
 8004e8a:	f000 f831 	bl	8004ef0 <_getpid_r>
 8004e8e:	002a      	movs	r2, r5
 8004e90:	0001      	movs	r1, r0
 8004e92:	0020      	movs	r0, r4
 8004e94:	f000 f81a 	bl	8004ecc <_kill_r>
 8004e98:	e7ed      	b.n	8004e76 <_raise_r+0x12>
 8004e9a:	2a01      	cmp	r2, #1
 8004e9c:	d009      	beq.n	8004eb2 <_raise_r+0x4e>
 8004e9e:	1c51      	adds	r1, r2, #1
 8004ea0:	d103      	bne.n	8004eaa <_raise_r+0x46>
 8004ea2:	2316      	movs	r3, #22
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e7e5      	b.n	8004e76 <_raise_r+0x12>
 8004eaa:	2100      	movs	r1, #0
 8004eac:	0028      	movs	r0, r5
 8004eae:	6019      	str	r1, [r3, #0]
 8004eb0:	4790      	blx	r2
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e7df      	b.n	8004e76 <_raise_r+0x12>
	...

08004eb8 <raise>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <raise+0x10>)
 8004ebc:	0001      	movs	r1, r0
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	f7ff ffd0 	bl	8004e64 <_raise_r>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	20000018 	.word	0x20000018

08004ecc <_kill_r>:
 8004ecc:	2300      	movs	r3, #0
 8004ece:	b570      	push	{r4, r5, r6, lr}
 8004ed0:	4d06      	ldr	r5, [pc, #24]	@ (8004eec <_kill_r+0x20>)
 8004ed2:	0004      	movs	r4, r0
 8004ed4:	0008      	movs	r0, r1
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	f7fb feff 	bl	8000cdc <_kill>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	d103      	bne.n	8004eea <_kill_r+0x1e>
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d000      	beq.n	8004eea <_kill_r+0x1e>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	2000053c 	.word	0x2000053c

08004ef0 <_getpid_r>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f7fb feed 	bl	8000cd0 <_getpid>
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <__swhatbuf_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	000e      	movs	r6, r1
 8004efc:	001d      	movs	r5, r3
 8004efe:	230e      	movs	r3, #14
 8004f00:	5ec9      	ldrsh	r1, [r1, r3]
 8004f02:	0014      	movs	r4, r2
 8004f04:	b096      	sub	sp, #88	@ 0x58
 8004f06:	2900      	cmp	r1, #0
 8004f08:	da0c      	bge.n	8004f24 <__swhatbuf_r+0x2c>
 8004f0a:	89b2      	ldrh	r2, [r6, #12]
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	0011      	movs	r1, r2
 8004f10:	4019      	ands	r1, r3
 8004f12:	421a      	tst	r2, r3
 8004f14:	d114      	bne.n	8004f40 <__swhatbuf_r+0x48>
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	6029      	str	r1, [r5, #0]
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	b016      	add	sp, #88	@ 0x58
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	466a      	mov	r2, sp
 8004f26:	f000 f853 	bl	8004fd0 <_fstat_r>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	dbed      	blt.n	8004f0a <__swhatbuf_r+0x12>
 8004f2e:	23f0      	movs	r3, #240	@ 0xf0
 8004f30:	9901      	ldr	r1, [sp, #4]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4019      	ands	r1, r3
 8004f36:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <__swhatbuf_r+0x50>)
 8004f38:	18c9      	adds	r1, r1, r3
 8004f3a:	424b      	negs	r3, r1
 8004f3c:	4159      	adcs	r1, r3
 8004f3e:	e7ea      	b.n	8004f16 <__swhatbuf_r+0x1e>
 8004f40:	2100      	movs	r1, #0
 8004f42:	2340      	movs	r3, #64	@ 0x40
 8004f44:	e7e9      	b.n	8004f1a <__swhatbuf_r+0x22>
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	ffffe000 	.word	0xffffe000

08004f4c <__smakebuf_r>:
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4e:	2602      	movs	r6, #2
 8004f50:	898b      	ldrh	r3, [r1, #12]
 8004f52:	0005      	movs	r5, r0
 8004f54:	000c      	movs	r4, r1
 8004f56:	b085      	sub	sp, #20
 8004f58:	4233      	tst	r3, r6
 8004f5a:	d007      	beq.n	8004f6c <__smakebuf_r+0x20>
 8004f5c:	0023      	movs	r3, r4
 8004f5e:	3347      	adds	r3, #71	@ 0x47
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	2301      	movs	r3, #1
 8004f66:	6163      	str	r3, [r4, #20]
 8004f68:	b005      	add	sp, #20
 8004f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6c:	ab03      	add	r3, sp, #12
 8004f6e:	aa02      	add	r2, sp, #8
 8004f70:	f7ff ffc2 	bl	8004ef8 <__swhatbuf_r>
 8004f74:	9f02      	ldr	r7, [sp, #8]
 8004f76:	9001      	str	r0, [sp, #4]
 8004f78:	0039      	movs	r1, r7
 8004f7a:	0028      	movs	r0, r5
 8004f7c:	f7fe ff86 	bl	8003e8c <_malloc_r>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d108      	bne.n	8004f96 <__smakebuf_r+0x4a>
 8004f84:	220c      	movs	r2, #12
 8004f86:	5ea3      	ldrsh	r3, [r4, r2]
 8004f88:	059a      	lsls	r2, r3, #22
 8004f8a:	d4ed      	bmi.n	8004f68 <__smakebuf_r+0x1c>
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	4393      	bics	r3, r2
 8004f90:	431e      	orrs	r6, r3
 8004f92:	81a6      	strh	r6, [r4, #12]
 8004f94:	e7e2      	b.n	8004f5c <__smakebuf_r+0x10>
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	89a2      	ldrh	r2, [r4, #12]
 8004f9a:	6020      	str	r0, [r4, #0]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	9b03      	ldr	r3, [sp, #12]
 8004fa2:	6120      	str	r0, [r4, #16]
 8004fa4:	6167      	str	r7, [r4, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <__smakebuf_r+0x78>
 8004faa:	0028      	movs	r0, r5
 8004fac:	230e      	movs	r3, #14
 8004fae:	5ee1      	ldrsh	r1, [r4, r3]
 8004fb0:	f000 f820 	bl	8004ff4 <_isatty_r>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d005      	beq.n	8004fc4 <__smakebuf_r+0x78>
 8004fb8:	2303      	movs	r3, #3
 8004fba:	89a2      	ldrh	r2, [r4, #12]
 8004fbc:	439a      	bics	r2, r3
 8004fbe:	3b02      	subs	r3, #2
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	9a01      	ldr	r2, [sp, #4]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	e7cc      	b.n	8004f68 <__smakebuf_r+0x1c>
	...

08004fd0 <_fstat_r>:
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	b570      	push	{r4, r5, r6, lr}
 8004fd4:	4d06      	ldr	r5, [pc, #24]	@ (8004ff0 <_fstat_r+0x20>)
 8004fd6:	0004      	movs	r4, r0
 8004fd8:	0008      	movs	r0, r1
 8004fda:	0011      	movs	r1, r2
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	f7fb fedd 	bl	8000d9c <_fstat>
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	d103      	bne.n	8004fee <_fstat_r+0x1e>
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d000      	beq.n	8004fee <_fstat_r+0x1e>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	2000053c 	.word	0x2000053c

08004ff4 <_isatty_r>:
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	b570      	push	{r4, r5, r6, lr}
 8004ff8:	4d06      	ldr	r5, [pc, #24]	@ (8005014 <_isatty_r+0x20>)
 8004ffa:	0004      	movs	r4, r0
 8004ffc:	0008      	movs	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fb feda 	bl	8000db8 <_isatty>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d103      	bne.n	8005010 <_isatty_r+0x1c>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d000      	beq.n	8005010 <_isatty_r+0x1c>
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	2000053c 	.word	0x2000053c

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
