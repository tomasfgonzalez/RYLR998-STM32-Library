
rylr998_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cfc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800616c  0800616c  0000716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006174  08006174  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006178  08006178  00007178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800617c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000068  080061e4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  080061e4  00008700  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b367  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002262  00000000  00000000  000133f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00015660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e0  00000000  00000000  00015f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000127b9  00000000  00000000  00016658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d541  00000000  00000000  00028e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689c2  00000000  00000000  00036352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ed14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab4  00000000  00000000  0009ed58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005da4 	.word	0x08005da4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005da4 	.word	0x08005da4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	@ (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_DMA_Init+0x48>)
 80006a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_DMA_Init+0x48>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_DMA_Init+0x48>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	200a      	movs	r0, #10
 80006c4:	f001 fad0 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 fae2 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	200b      	movs	r0, #11
 80006d4:	f001 fac8 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006d8:	200b      	movs	r0, #11
 80006da:	f001 fada 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	240c      	movs	r4, #12
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2314      	movs	r3, #20
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f004 fb1f 	bl	8004d40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000706:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000708:	2104      	movs	r1, #4
 800070a:	430a      	orrs	r2, r1
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000712:	2204      	movs	r2, #4
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_GPIO_Init+0x98>)
 800071c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000738:	2102      	movs	r1, #2
 800073a:	430a      	orrs	r2, r1
 800073c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_GPIO_Init+0x98>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	2202      	movs	r2, #2
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_GPIO_Init+0x9c>)
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fe6b 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000756:	0021      	movs	r1, r4
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2208      	movs	r2, #8
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2201      	movs	r2, #1
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000770:	187b      	adds	r3, r7, r1
 8000772:	4a05      	ldr	r2, [pc, #20]	@ (8000788 <MX_GPIO_Init+0x9c>)
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f001 fcea 	bl	8002150 <HAL_GPIO_Init>

}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b009      	add	sp, #36	@ 0x24
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	50000400 	.word	0x50000400

0800078c <LEDBlink>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void LEDBlink(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t delay_ms) {
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	240a      	movs	r4, #10
 8000798:	193b      	adds	r3, r7, r4
 800079a:	1c0a      	adds	r2, r1, #0
 800079c:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);  // Toggle LED state
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fe5d 	bl	8002466 <HAL_GPIO_TogglePin>
    HAL_Delay(delay_ms);                  // Wait for the delay
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f98a 	bl	8001ac8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);  // Toggle LED back
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fe52 	bl	8002466 <HAL_GPIO_TogglePin>
    HAL_Delay(delay_ms);                  // Wait again
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 f97f 	bl	8001ac8 <HAL_Delay>
}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b005      	add	sp, #20
 80007d0:	bd90      	pop	{r4, r7, pc}
	...

080007d4 <HAL_UARTEx_RxEventCallback>:
#define RX_BUFFER_SIZE 255
uint8_t rx_buff[RX_BUFFER_SIZE];  // Reception buffer



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	000a      	movs	r2, r1
 80007de:	1cbb      	adds	r3, r7, #2
 80007e0:	801a      	strh	r2, [r3, #0]
    // Check if the event is an idle line event

	if((huart == &hlpuart1)){
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_UARTEx_RxEventCallback+0x3c>)
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d10e      	bne.n	8000808 <HAL_UARTEx_RxEventCallback+0x34>
		//if (HAL_UARTEx_GetRxEventType(huart) == HAL_UART_RXEVENT_IDLE ||HAL_UARTEx_GetRxEventType(huart) == HAL_UART_RXEVENT_HT) {
		//For some reason, the RXevent IDLE tends to not work right
			if (rx_buff[Size-1]=='\n'){
 80007ea:	1cbb      	adds	r3, r7, #2
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_UARTEx_RxEventCallback+0x40>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	2b0a      	cmp	r3, #10
 80007f6:	d101      	bne.n	80007fc <HAL_UARTEx_RxEventCallback+0x28>
			rylr998_SetInterruptFlag();
 80007f8:	f000 fc7c 	bl	80010f4 <rylr998_SetInterruptFlag>
			}
			HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buff, RX_BUFFER_SIZE);
 80007fc:	4905      	ldr	r1, [pc, #20]	@ (8000814 <HAL_UARTEx_RxEventCallback+0x40>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	22ff      	movs	r2, #255	@ 0xff
 8000802:	0018      	movs	r0, r3
 8000804:	f003 ff89 	bl	800471a <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000380 	.word	0x20000380
 8000814:	20000084 	.word	0x20000084

08000818 <LoRa_modeHighPower>:





void LoRa_modeHighPower(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
	//Reset to Factory CONFIG



	if(rylr998_FACTORY(&hlpuart1)==HAL_OK){
 800081e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fc31 	bl	8001088 <rylr998_FACTORY>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d112      	bne.n	8000850 <LoRa_modeHighPower+0x38>
	while(1){
			if(rylr998_GetInterruptFlag()){
 800082a:	f000 fc6d 	bl	8001108 <rylr998_GetInterruptFlag>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d0fb      	beq.n	800082a <LoRa_modeHighPower+0x12>
					if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_FACTORY){
 8000832:	4b76      	ldr	r3, [pc, #472]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 8000834:	21ff      	movs	r1, #255	@ 0xff
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fd00 	bl	800123c <rylr998_prase_reciver>
 800083c:	0003      	movs	r3, r0
 800083e:	2b07      	cmp	r3, #7
 8000840:	d1f3      	bne.n	800082a <LoRa_modeHighPower+0x12>
						LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 8000842:	23fa      	movs	r3, #250	@ 0xfa
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4872      	ldr	r0, [pc, #456]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 8000848:	001a      	movs	r2, r3
 800084a:	2108      	movs	r1, #8
 800084c:	f7ff ff9e 	bl	800078c <LEDBlink>
			}
		}


	//NETWORKID
	if(rylr998_networkId(&hlpuart1,18)==HAL_OK){
 8000850:	4b6d      	ldr	r3, [pc, #436]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 8000852:	2112      	movs	r1, #18
 8000854:	0018      	movs	r0, r3
 8000856:	f000 f979 	bl	8000b4c <rylr998_networkId>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d111      	bne.n	8000882 <LoRa_modeHighPower+0x6a>
		while(1){
			if(rylr998_GetInterruptFlag()){
 800085e:	f000 fc53 	bl	8001108 <rylr998_GetInterruptFlag>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d0fb      	beq.n	800085e <LoRa_modeHighPower+0x46>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 8000866:	4b69      	ldr	r3, [pc, #420]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 8000868:	21ff      	movs	r1, #255	@ 0xff
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fce6 	bl	800123c <rylr998_prase_reciver>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d1f4      	bne.n	800085e <LoRa_modeHighPower+0x46>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 8000874:	23fa      	movs	r3, #250	@ 0xfa
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4865      	ldr	r0, [pc, #404]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 800087a:	001a      	movs	r2, r3
 800087c:	2108      	movs	r1, #8
 800087e:	f7ff ff85 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//ADDRESS
	if(rylr998_setAddress(&hlpuart1,1)==HAL_OK){  //ADDRESS of the device =1
 8000882:	4b61      	ldr	r3, [pc, #388]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 8000884:	2101      	movs	r1, #1
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f9a8 	bl	8000bdc <rylr998_setAddress>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d111      	bne.n	80008b4 <LoRa_modeHighPower+0x9c>
	while(1){
			if(rylr998_GetInterruptFlag()){
 8000890:	f000 fc3a 	bl	8001108 <rylr998_GetInterruptFlag>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d0fb      	beq.n	8000890 <LoRa_modeHighPower+0x78>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 8000898:	4b5c      	ldr	r3, [pc, #368]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 800089a:	21ff      	movs	r1, #255	@ 0xff
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fccd 	bl	800123c <rylr998_prase_reciver>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d1f4      	bne.n	8000890 <LoRa_modeHighPower+0x78>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 80008a6:	23fa      	movs	r3, #250	@ 0xfa
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4859      	ldr	r0, [pc, #356]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 80008ac:	001a      	movs	r2, r3
 80008ae:	2108      	movs	r1, #8
 80008b0:	f7ff ff6c 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//PARAMETERS
	if(rylr998_setParameter(&hlpuart1,9,7,1,12)==HAL_OK){ //SF = 9, BW= 125kHz, CR=1,Programed Preamble = 12 (MAX RANGE CONFIG, also the default factory settings)
 80008b4:	4854      	ldr	r0, [pc, #336]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 80008b6:	230c      	movs	r3, #12
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	2207      	movs	r2, #7
 80008be:	2109      	movs	r1, #9
 80008c0:	f000 f9c6 	bl	8000c50 <rylr998_setParameter>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d111      	bne.n	80008ec <LoRa_modeHighPower+0xd4>
	while(1){
			if(rylr998_GetInterruptFlag()){
 80008c8:	f000 fc1e 	bl	8001108 <rylr998_GetInterruptFlag>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d0fb      	beq.n	80008c8 <LoRa_modeHighPower+0xb0>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 80008d0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 80008d2:	21ff      	movs	r1, #255	@ 0xff
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fcb1 	bl	800123c <rylr998_prase_reciver>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d1f4      	bne.n	80008c8 <LoRa_modeHighPower+0xb0>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 80008de:	23fa      	movs	r3, #250	@ 0xfa
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	484b      	ldr	r0, [pc, #300]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 80008e4:	001a      	movs	r2, r3
 80008e6:	2108      	movs	r1, #8
 80008e8:	f7ff ff50 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//MODE
	if(rylr998_mode(&hlpuart1,0,0,0)==HAL_OK){  //MODE 1, normal
 80008ec:	4846      	ldr	r0, [pc, #280]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	f000 fa22 	bl	8000d3c <rylr998_mode>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d111      	bne.n	8000920 <LoRa_modeHighPower+0x108>
	while(1){
			if(rylr998_GetInterruptFlag()){
 80008fc:	f000 fc04 	bl	8001108 <rylr998_GetInterruptFlag>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d0fb      	beq.n	80008fc <LoRa_modeHighPower+0xe4>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 8000904:	4b41      	ldr	r3, [pc, #260]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 8000906:	21ff      	movs	r1, #255	@ 0xff
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fc97 	bl	800123c <rylr998_prase_reciver>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d1f4      	bne.n	80008fc <LoRa_modeHighPower+0xe4>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 8000912:	23fa      	movs	r3, #250	@ 0xfa
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	483e      	ldr	r0, [pc, #248]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 8000918:	001a      	movs	r2, r3
 800091a:	2108      	movs	r1, #8
 800091c:	f7ff ff36 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//BAUD RATE
	if(rylr998_setBaudRate(&hlpuart1,115200)==HAL_OK){
 8000920:	23e1      	movs	r3, #225	@ 0xe1
 8000922:	025a      	lsls	r2, r3, #9
 8000924:	4b38      	ldr	r3, [pc, #224]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fa87 	bl	8000e3c <rylr998_setBaudRate>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d112      	bne.n	8000958 <LoRa_modeHighPower+0x140>
	while(1){
		if(rylr998_GetInterruptFlag()){
 8000932:	f000 fbe9 	bl	8001108 <rylr998_GetInterruptFlag>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d0fb      	beq.n	8000932 <LoRa_modeHighPower+0x11a>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_IPR){
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 800093c:	21ff      	movs	r1, #255	@ 0xff
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fc7c 	bl	800123c <rylr998_prase_reciver>
 8000944:	0003      	movs	r3, r0
 8000946:	2b04      	cmp	r3, #4
 8000948:	d1f3      	bne.n	8000932 <LoRa_modeHighPower+0x11a>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 800094a:	23fa      	movs	r3, #250	@ 0xfa
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4830      	ldr	r0, [pc, #192]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 8000950:	001a      	movs	r2, r3
 8000952:	2108      	movs	r1, #8
 8000954:	f7ff ff1a 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//FREQ Band on FLASH
	if(rylr998_setBand(&hlpuart1,915000000,1)==HAL_OK){ //Saves it on flash
 8000958:	492e      	ldr	r1, [pc, #184]	@ (8000a14 <LoRa_modeHighPower+0x1fc>)
 800095a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 800095c:	2201      	movs	r2, #1
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fab0 	bl	8000ec4 <rylr998_setBand>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d111      	bne.n	800098c <LoRa_modeHighPower+0x174>
	while(1){
		if(rylr998_GetInterruptFlag()){
 8000968:	f000 fbce 	bl	8001108 <rylr998_GetInterruptFlag>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d0fb      	beq.n	8000968 <LoRa_modeHighPower+0x150>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 8000972:	21ff      	movs	r1, #255	@ 0xff
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fc61 	bl	800123c <rylr998_prase_reciver>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d1f4      	bne.n	8000968 <LoRa_modeHighPower+0x150>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 800097e:	23fa      	movs	r3, #250	@ 0xfa
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 8000984:	001a      	movs	r2, r3
 8000986:	2108      	movs	r1, #8
 8000988:	f7ff ff00 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//PASSWORD
	char password[] = "FFFFFFFF";
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <LoRa_modeHighPower+0x200>)
 8000990:	ca03      	ldmia	r2!, {r0, r1}
 8000992:	c303      	stmia	r3!, {r0, r1}
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	701a      	strb	r2, [r3, #0]
	if(rylr998_setCPIN(&hlpuart1,password)==HAL_OK){
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 faea 	bl	8000f78 <rylr998_setCPIN>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d111      	bne.n	80009cc <LoRa_modeHighPower+0x1b4>
	while(1){
		if(rylr998_GetInterruptFlag()){
 80009a8:	f000 fbae 	bl	8001108 <rylr998_GetInterruptFlag>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d0fb      	beq.n	80009a8 <LoRa_modeHighPower+0x190>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 80009b2:	21ff      	movs	r1, #255	@ 0xff
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fc41 	bl	800123c <rylr998_prase_reciver>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d1f4      	bne.n	80009a8 <LoRa_modeHighPower+0x190>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 80009be:	23fa      	movs	r3, #250	@ 0xfa
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 80009c4:	001a      	movs	r2, r3
 80009c6:	2108      	movs	r1, #8
 80009c8:	f7ff fee0 	bl	800078c <LEDBlink>
				}
			}
		}
	}
	//RF Output Power must be set to less than AT+CRFOP=14 to comply CE certification.
	if(rylr998_setCRFOP(&hlpuart1,22)==HAL_OK){
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <LoRa_modeHighPower+0x1f0>)
 80009ce:	2116      	movs	r1, #22
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fb17 	bl	8001004 <rylr998_setCRFOP>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d112      	bne.n	8000a00 <LoRa_modeHighPower+0x1e8>
	while(1){
		if(rylr998_GetInterruptFlag()){
 80009da:	f000 fb95 	bl	8001108 <rylr998_GetInterruptFlag>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d0fb      	beq.n	80009da <LoRa_modeHighPower+0x1c2>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)==RYLR_OK){
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <LoRa_modeHighPower+0x1f4>)
 80009e4:	21ff      	movs	r1, #255	@ 0xff
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fc28 	bl	800123c <rylr998_prase_reciver>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d1f4      	bne.n	80009da <LoRa_modeHighPower+0x1c2>
					LEDBlink(GPIOB, GPIO_PIN_3, 1000);
 80009f0:	23fa      	movs	r3, #250	@ 0xfa
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <LoRa_modeHighPower+0x1f8>)
 80009f6:	001a      	movs	r2, r3
 80009f8:	2108      	movs	r1, #8
 80009fa:	f7ff fec7 	bl	800078c <LEDBlink>
					break;
 80009fe:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}


}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000380 	.word	0x20000380
 8000a0c:	20000084 	.word	0x20000084
 8000a10:	50000400 	.word	0x50000400
 8000a14:	3689cac0 	.word	0x3689cac0
 8000a18:	08005dbc 	.word	0x08005dbc

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 ffe2 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f816 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f7ff fe60 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000a2c:	f7ff fe38 	bl	80006a0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000a30:	f000 fe16 	bl	8001660 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000a34:	f000 fe42 	bl	80016bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, rx_buff, RX_BUFFER_SIZE);
 8000a38:	4904      	ldr	r1, [pc, #16]	@ (8000a4c <main+0x30>)
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <main+0x34>)
 8000a3c:	22ff      	movs	r2, #255	@ 0xff
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f003 fe6b 	bl	800471a <HAL_UARTEx_ReceiveToIdle_DMA>


  LoRa_modeHighPower();
 8000a44:	f7ff fee8 	bl	8000818 <LoRa_modeHighPower>
	if(rylr998_sendData(&hlpuart1,0,(uint8_t*)&data_to_send,strlen((char*)data_to_send))==HAL_OK){
	}

*/

  while (1)
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	e7fd      	b.n	8000a48 <main+0x2c>
 8000a4c:	20000084 	.word	0x20000084
 8000a50:	20000380 	.word	0x20000380

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b099      	sub	sp, #100	@ 0x64
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	242c      	movs	r4, #44	@ 0x2c
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2334      	movs	r3, #52	@ 0x34
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f004 f96b 	bl	8004d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6a:	2318      	movs	r3, #24
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2314      	movs	r3, #20
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f004 f963 	bl	8004d40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2318      	movs	r3, #24
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f004 f95c 	bl	8004d40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	4b2b      	ldr	r3, [pc, #172]	@ (8000b38 <SystemClock_Config+0xe4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b3c <SystemClock_Config+0xe8>)
 8000a8e:	401a      	ands	r2, r3
 8000a90:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <SystemClock_Config+0xe4>)
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	0109      	lsls	r1, r1, #4
 8000a96:	430a      	orrs	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9a:	0021      	movs	r1, r4
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2210      	movs	r2, #16
 8000aac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	02d2      	lsls	r2, r2, #11
 8000ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	03d2      	lsls	r2, r2, #15
 8000ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 fce5 	bl	800249c <HAL_RCC_OscConfig>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000ad6:	f000 f833 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	2118      	movs	r1, #24
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	220f      	movs	r2, #15
 8000ae0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2101      	movs	r1, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 f848 	bl	8002b94 <HAL_RCC_ClockConfig>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b08:	f000 f81a 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2206      	movs	r2, #6
 8000b10:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1e:	003b      	movs	r3, r7
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 fa5b 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b2a:	f000 f809 	bl	8000b40 <Error_Handler>
  }
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b019      	add	sp, #100	@ 0x64
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	40007000 	.word	0x40007000
 8000b3c:	ffffe7ff 	.word	0xffffe7ff

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <rylr998_networkId>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  networkId: The network ID to be set (valid range: 3-15, 18).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if validation fails or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_networkId(UART_HandleTypeDef *puartHandle, uint8_t networkId) {
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b08b      	sub	sp, #44	@ 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	000a      	movs	r2, r1
 8000b56:	1cfb      	adds	r3, r7, #3
 8000b58:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000b5a:	2327      	movs	r3, #39	@ 0x27
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
    char uartTxBuffer[20] = {0};  // Enough for "AT+NETWORKID=XX\r\n"
 8000b62:	230c      	movs	r3, #12
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f004 f8e5 	bl	8004d40 <memset>

    // Validate the network ID
    if (((networkId >= 3) && (networkId <= 15)) || (networkId == 18)) {
 8000b76:	1cfb      	adds	r3, r7, #3
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d903      	bls.n	8000b86 <rylr998_networkId+0x3a>
 8000b7e:	1cfb      	adds	r3, r7, #3
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d903      	bls.n	8000b8e <rylr998_networkId+0x42>
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d11d      	bne.n	8000bca <rylr998_networkId+0x7e>
        // Construct the AT command
        int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+NETWORKID=%u\r\n", networkId);
 8000b8e:	1cfb      	adds	r3, r7, #3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <rylr998_networkId+0x8c>)
 8000b94:	210c      	movs	r1, #12
 8000b96:	1878      	adds	r0, r7, r1
 8000b98:	2114      	movs	r1, #20
 8000b9a:	f004 f843 	bl	8004c24 <sniprintf>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	623b      	str	r3, [r7, #32]

        if (packetSize <= 0 || packetSize >= sizeof(uartTxBuffer)) {
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dd02      	ble.n	8000bae <rylr998_networkId+0x62>
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	2b13      	cmp	r3, #19
 8000bac:	d901      	bls.n	8000bb2 <rylr998_networkId+0x66>
            return HAL_ERROR;  // snprintf error or buffer overflow prevention
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <rylr998_networkId+0x84>
        }

        // Transmit the AT command over UART
        ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	2327      	movs	r3, #39	@ 0x27
 8000bb8:	18fc      	adds	r4, r7, r3
 8000bba:	230c      	movs	r3, #12
 8000bbc:	18f9      	adds	r1, r7, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	f002 fb8b 	bl	80032dc <HAL_UART_Transmit>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	7023      	strb	r3, [r4, #0]
    }

    return ret;
 8000bca:	2327      	movs	r3, #39	@ 0x27
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	781b      	ldrb	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b00b      	add	sp, #44	@ 0x2c
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	08005dd8 	.word	0x08005dd8

08000bdc <rylr998_setAddress>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  address: The address to be set on the RYLR998 module.
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setAddress(UART_HandleTypeDef *puartHandle, uint16_t address){
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	000a      	movs	r2, r1
 8000be6:	1cbb      	adds	r3, r7, #2
 8000be8:	801a      	strh	r2, [r3, #0]
	    HAL_StatusTypeDef ret = HAL_ERROR;
 8000bea:	2327      	movs	r3, #39	@ 0x27
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
	    char uartTxBuffer[20] = {0};  // Enough size for "AT+ADDRESS=XXXXX\n"
 8000bf2:	240c      	movs	r4, #12
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	2100      	movs	r1, #0
 8000c00:	0018      	movs	r0, r3
 8000c02:	f004 f89d 	bl	8004d40 <memset>

	    // Construct the AT command
	    int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+ADDRESS=%u\r\n", address);
 8000c06:	1cbb      	adds	r3, r7, #2
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <rylr998_setAddress+0x70>)
 8000c0c:	1938      	adds	r0, r7, r4
 8000c0e:	2114      	movs	r1, #20
 8000c10:	f004 f808 	bl	8004c24 <sniprintf>
 8000c14:	0003      	movs	r3, r0
 8000c16:	623b      	str	r3, [r7, #32]

	    if (packetSize <= 0 || packetSize >= sizeof(uartTxBuffer)) {
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	dd02      	ble.n	8000c24 <rylr998_setAddress+0x48>
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	2b13      	cmp	r3, #19
 8000c22:	d901      	bls.n	8000c28 <rylr998_setAddress+0x4c>
	        return HAL_ERROR;  // snprintf error or overflow prevention
 8000c24:	2301      	movs	r3, #1
 8000c26:	e00d      	b.n	8000c44 <rylr998_setAddress+0x68>
	    }

	    // Transmit the AT command over UART
	    ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	2527      	movs	r5, #39	@ 0x27
 8000c2e:	197c      	adds	r4, r7, r5
 8000c30:	230c      	movs	r3, #12
 8000c32:	18f9      	adds	r1, r7, r3
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	230a      	movs	r3, #10
 8000c38:	f002 fb50 	bl	80032dc <HAL_UART_Transmit>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	7023      	strb	r3, [r4, #0]

	    return ret;
 8000c40:	197b      	adds	r3, r7, r5
 8000c42:	781b      	ldrb	r3, [r3, #0]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b00a      	add	sp, #40	@ 0x28
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	08005dec 	.word	0x08005dec

08000c50 <rylr998_setParameter>:
 * @param  CR: Coding Rate (valid range: 1-4).
 * @param  ProgramedPreamble: Programmed preamble length (valid range: 4-25).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if validation fails or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setParameter(UART_HandleTypeDef *puartHandle, uint8_t SF, uint8_t BW, uint8_t CR, uint8_t ProgramedPreamble) {
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b090      	sub	sp, #64	@ 0x40
 8000c54:	af04      	add	r7, sp, #16
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0010      	movs	r0, r2
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	1cfb      	adds	r3, r7, #3
 8000c60:	1c22      	adds	r2, r4, #0
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	1cbb      	adds	r3, r7, #2
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	1c7b      	adds	r3, r7, #1
 8000c6c:	1c0a      	adds	r2, r1, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000c70:	232f      	movs	r3, #47	@ 0x2f
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
    char uartTxBuffer[25] = {0};  // Enough size for "AT+PARAMETER=%u,%u,%u,%u\r\n"
 8000c78:	230c      	movs	r3, #12
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2215      	movs	r2, #21
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f004 f85a 	bl	8004d40 <memset>

    // Validate parameters
    if (SF < 5 || SF > 11) {
 8000c8c:	1cfb      	adds	r3, r7, #3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d903      	bls.n	8000c9c <rylr998_setParameter+0x4c>
 8000c94:	1cfb      	adds	r3, r7, #3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b0b      	cmp	r3, #11
 8000c9a:	d901      	bls.n	8000ca0 <rylr998_setParameter+0x50>
        return HAL_ERROR;  // Invalid Spreading Factor
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e047      	b.n	8000d30 <rylr998_setParameter+0xe0>
    }
    if (BW < 7 || BW > 9) {
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	d903      	bls.n	8000cb0 <rylr998_setParameter+0x60>
 8000ca8:	1cbb      	adds	r3, r7, #2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b09      	cmp	r3, #9
 8000cae:	d901      	bls.n	8000cb4 <rylr998_setParameter+0x64>
        return HAL_ERROR;  // Invalid Bandwidth
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e03d      	b.n	8000d30 <rylr998_setParameter+0xe0>
    }
    if (CR < 1 || CR > 4) {
 8000cb4:	1c7b      	adds	r3, r7, #1
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <rylr998_setParameter+0x74>
 8000cbc:	1c7b      	adds	r3, r7, #1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d901      	bls.n	8000cc8 <rylr998_setParameter+0x78>
        return HAL_ERROR;  // Invalid Coding Rate
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e033      	b.n	8000d30 <rylr998_setParameter+0xe0>
    }
    if (ProgramedPreamble < 4 || ProgramedPreamble > 25) {
 8000cc8:	2240      	movs	r2, #64	@ 0x40
 8000cca:	18bb      	adds	r3, r7, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d903      	bls.n	8000cda <rylr998_setParameter+0x8a>
 8000cd2:	18bb      	adds	r3, r7, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b19      	cmp	r3, #25
 8000cd8:	d901      	bls.n	8000cde <rylr998_setParameter+0x8e>
        return HAL_ERROR;  // Invalid Preamble Length
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e028      	b.n	8000d30 <rylr998_setParameter+0xe0>
    }

    // Calculate the required buffer size
    int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+PARAMETER=%u,%u,%u,%u\r\n", SF, BW, CR, ProgramedPreamble);
 8000cde:	1cfb      	adds	r3, r7, #3
 8000ce0:	781d      	ldrb	r5, [r3, #0]
 8000ce2:	1cbb      	adds	r3, r7, #2
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	1c7b      	adds	r3, r7, #1
 8000ce8:	7819      	ldrb	r1, [r3, #0]
 8000cea:	2340      	movs	r3, #64	@ 0x40
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4c11      	ldr	r4, [pc, #68]	@ (8000d38 <rylr998_setParameter+0xe8>)
 8000cf2:	200c      	movs	r0, #12
 8000cf4:	1838      	adds	r0, r7, r0
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	9101      	str	r1, [sp, #4]
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	002b      	movs	r3, r5
 8000cfe:	0022      	movs	r2, r4
 8000d00:	2119      	movs	r1, #25
 8000d02:	f003 ff8f 	bl	8004c24 <sniprintf>
 8000d06:	0003      	movs	r3, r0
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Ensure the packet size does not exceed the buffer size
    if (packetSize >= sizeof(uartTxBuffer)) {
 8000d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0c:	2b18      	cmp	r3, #24
 8000d0e:	d901      	bls.n	8000d14 <rylr998_setParameter+0xc4>
        return HAL_ERROR;  // Buffer size exceeded
 8000d10:	2301      	movs	r3, #1
 8000d12:	e00d      	b.n	8000d30 <rylr998_setParameter+0xe0>
    }

    // Transmit the command over UART
    ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8000d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	252f      	movs	r5, #47	@ 0x2f
 8000d1a:	197c      	adds	r4, r7, r5
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	18f9      	adds	r1, r7, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	230a      	movs	r3, #10
 8000d24:	f002 fada 	bl	80032dc <HAL_UART_Transmit>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	7023      	strb	r3, [r4, #0]

    return ret;
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	781b      	ldrb	r3, [r3, #0]
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b00c      	add	sp, #48	@ 0x30
 8000d36:	bdb0      	pop	{r4, r5, r7, pc}
 8000d38:	08005dfc 	.word	0x08005dfc

08000d3c <rylr998_mode>:
 * @param  rxTime: The receive time in milliseconds (valid range: 30-60000).
 * @param  LowSpeedTime: The low-speed time in milliseconds (valid range: 30-60000).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if validation fails or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_mode(UART_HandleTypeDef *puartHandle, uint8_t mode, uint32_t rxTime, uint32_t LowSpeedTime) {//TODO check if it works
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b090      	sub	sp, #64	@ 0x40
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	240b      	movs	r4, #11
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	1c0a      	adds	r2, r1, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000d50:	2333      	movs	r3, #51	@ 0x33
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
    char uartTxBuffer[30] = {0};  //
 8000d58:	2314      	movs	r3, #20
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	3304      	adds	r3, #4
 8000d62:	221a      	movs	r2, #26
 8000d64:	2100      	movs	r1, #0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f003 ffea 	bl	8004d40 <memset>

    // Validate mode (0, 1, or 2)


    // Validate rxTime and LowSpeedTime (must be between 30 and 60000)
    if (mode==2){
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d115      	bne.n	8000da0 <rylr998_mode+0x64>
		if (rxTime < 30 || rxTime > 60000) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b1d      	cmp	r3, #29
 8000d78:	d903      	bls.n	8000d82 <rylr998_mode+0x46>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e30 <rylr998_mode+0xf4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d903      	bls.n	8000d8a <rylr998_mode+0x4e>
			return ret;
 8000d82:	2333      	movs	r3, #51	@ 0x33
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	e04e      	b.n	8000e28 <rylr998_mode+0xec>
		}
		if (LowSpeedTime < 30 || LowSpeedTime > 60000) {
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2b1d      	cmp	r3, #29
 8000d8e:	d903      	bls.n	8000d98 <rylr998_mode+0x5c>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <rylr998_mode+0xf4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d910      	bls.n	8000dba <rylr998_mode+0x7e>
			return ret;
 8000d98:	2333      	movs	r3, #51	@ 0x33
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	e043      	b.n	8000e28 <rylr998_mode+0xec>
		}
    }else if(mode == 1 || mode==0){
 8000da0:	220b      	movs	r2, #11
 8000da2:	18bb      	adds	r3, r7, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d007      	beq.n	8000dba <rylr998_mode+0x7e>
 8000daa:	18bb      	adds	r3, r7, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <rylr998_mode+0x7e>
    }else {
    	return ret;
 8000db2:	2333      	movs	r3, #51	@ 0x33
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	e036      	b.n	8000e28 <rylr998_mode+0xec>
    }
    // Calculate required buffer size dynamically (AT+MODE=<mode>,<rxTime>,<LowSpeedTime>\r\n)
    int packetSize;

    if (mode==1|| mode==0){
 8000dba:	220b      	movs	r2, #11
 8000dbc:	18bb      	adds	r3, r7, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d003      	beq.n	8000dcc <rylr998_mode+0x90>
 8000dc4:	18bb      	adds	r3, r7, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10b      	bne.n	8000de4 <rylr998_mode+0xa8>
    	 packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+MODE=%u\r\n", mode);
 8000dcc:	230b      	movs	r3, #11
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <rylr998_mode+0xf8>)
 8000dd4:	2114      	movs	r1, #20
 8000dd6:	1878      	adds	r0, r7, r1
 8000dd8:	211e      	movs	r1, #30
 8000dda:	f003 ff23 	bl	8004c24 <sniprintf>
 8000dde:	0003      	movs	r3, r0
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000de2:	e00b      	b.n	8000dfc <rylr998_mode+0xc0>
    }else{
    	 packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+MODE=2,%lu,%lu\r\n", rxTime, LowSpeedTime);
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <rylr998_mode+0xfc>)
 8000de8:	2314      	movs	r3, #20
 8000dea:	18f8      	adds	r0, r7, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	000b      	movs	r3, r1
 8000df2:	211e      	movs	r1, #30
 8000df4:	f003 ff16 	bl	8004c24 <sniprintf>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    // Allocate buffer
    if (packetSize <= 0 || packetSize >= sizeof(uartTxBuffer)) {
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd02      	ble.n	8000e08 <rylr998_mode+0xcc>
 8000e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e04:	2b1d      	cmp	r3, #29
 8000e06:	d901      	bls.n	8000e0c <rylr998_mode+0xd0>
              return HAL_ERROR;  // snprintf error or buffer overflow prevention
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e00d      	b.n	8000e28 <rylr998_mode+0xec>
          }

     ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	2533      	movs	r5, #51	@ 0x33
 8000e12:	197c      	adds	r4, r7, r5
 8000e14:	2314      	movs	r3, #20
 8000e16:	18f9      	adds	r1, r7, r3
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	f002 fa5e 	bl	80032dc <HAL_UART_Transmit>
 8000e20:	0003      	movs	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
     return ret;
 8000e24:	197b      	adds	r3, r7, r5
 8000e26:	781b      	ldrb	r3, [r3, #0]
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b00e      	add	sp, #56	@ 0x38
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	0000ea60 	.word	0x0000ea60
 8000e34:	08005e24 	.word	0x08005e24
 8000e38:	08005e34 	.word	0x08005e34

08000e3c <rylr998_setBaudRate>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  baudRate: The baud rate to be set (valid range: 1200-115200).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if the baud rate is invalid or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setBaudRate(UART_HandleTypeDef *puartHandle, uint32_t baudRate) { //TODO check if it works
 8000e3c:	b5b0      	push	{r4, r5, r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000e46:	231f      	movs	r3, #31
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
    char uartTxBuffer[16] = {0};
 8000e4e:	2308      	movs	r3, #8
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	3304      	adds	r3, #4
 8000e58:	220c      	movs	r2, #12
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f003 ff6f 	bl	8004d40 <memset>

    // Validate baud rate (optional - ensure it's a standard value)
    if (baudRate < 1200 || baudRate > 115200) {  // Adjust based on RYLR998 support
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	2396      	movs	r3, #150	@ 0x96
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d304      	bcc.n	8000e76 <rylr998_setBaudRate+0x3a>
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	23e1      	movs	r3, #225	@ 0xe1
 8000e70:	025b      	lsls	r3, r3, #9
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d901      	bls.n	8000e7a <rylr998_setBaudRate+0x3e>
        return HAL_ERROR;  // Invalid baud rate
 8000e76:	2301      	movs	r3, #1
 8000e78:	e01e      	b.n	8000eb8 <rylr998_setBaudRate+0x7c>
    }

    int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+IPR=%lu\r\n", baudRate);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <rylr998_setBaudRate+0x84>)
 8000e7e:	2108      	movs	r1, #8
 8000e80:	1878      	adds	r0, r7, r1
 8000e82:	2110      	movs	r1, #16
 8000e84:	f003 fece 	bl	8004c24 <sniprintf>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	61bb      	str	r3, [r7, #24]

	if (packetSize <= 0 || packetSize >= sizeof(uartTxBuffer)) {
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	dd02      	ble.n	8000e98 <rylr998_setBaudRate+0x5c>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d901      	bls.n	8000e9c <rylr998_setBaudRate+0x60>
		return HAL_ERROR;  // snprintf error or overflow prevention
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00d      	b.n	8000eb8 <rylr998_setBaudRate+0x7c>
	}

	ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	251f      	movs	r5, #31
 8000ea2:	197c      	adds	r4, r7, r5
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	18f9      	adds	r1, r7, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	230a      	movs	r3, #10
 8000eac:	f002 fa16 	bl	80032dc <HAL_UART_Transmit>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	7023      	strb	r3, [r4, #0]

	return ret;
 8000eb4:	197b      	adds	r3, r7, r5
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b008      	add	sp, #32
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec0:	08005e48 	.word	0x08005e48

08000ec4 <rylr998_setBand>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  frequency: The frequency to be set (valid range: 862000000-1020000000 Hz).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if the frequency is invalid or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setBand(UART_HandleTypeDef *puartHandle, uint32_t frequency,uint8_t memory) { //TODO check if it works
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000ed2:	232b      	movs	r3, #43	@ 0x2b
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
    char uartTxBuffer[22] = {0};
 8000eda:	2314      	movs	r3, #20
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	2212      	movs	r2, #18
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f003 ff29 	bl	8004d40 <memset>
    int packetSize=0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Validate frequency (adjust based on RYLR998 supported bands)
    if (frequency < 862000000 || frequency > 1020000000) {
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <rylr998_setBand+0xa4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d903      	bls.n	8000f02 <rylr998_setBand+0x3e>
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <rylr998_setBand+0xa8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d901      	bls.n	8000f06 <rylr998_setBand+0x42>
        return HAL_ERROR;  // Invalid frequency
 8000f02:	2301      	movs	r3, #1
 8000f04:	e02c      	b.n	8000f60 <rylr998_setBand+0x9c>
    }

    // Construct the AT command and check for formatting errors or overflow
    if(memory){
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d009      	beq.n	8000f22 <rylr998_setBand+0x5e>
	packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+BAND=%lu,M\r\n",frequency);
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4a17      	ldr	r2, [pc, #92]	@ (8000f70 <rylr998_setBand+0xac>)
 8000f12:	2114      	movs	r1, #20
 8000f14:	1878      	adds	r0, r7, r1
 8000f16:	2116      	movs	r1, #22
 8000f18:	f003 fe84 	bl	8004c24 <sniprintf>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f20:	e008      	b.n	8000f34 <rylr998_setBand+0x70>
    }else{
    packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+BAND=%lu\r\n",frequency);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	4a13      	ldr	r2, [pc, #76]	@ (8000f74 <rylr998_setBand+0xb0>)
 8000f26:	2114      	movs	r1, #20
 8000f28:	1878      	adds	r0, r7, r1
 8000f2a:	2116      	movs	r1, #22
 8000f2c:	f003 fe7a 	bl	8004c24 <sniprintf>
 8000f30:	0003      	movs	r3, r0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

	if (packetSize < 0 || packetSize >= sizeof(uartTxBuffer)) {
 8000f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db02      	blt.n	8000f40 <rylr998_setBand+0x7c>
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	2b15      	cmp	r3, #21
 8000f3e:	d901      	bls.n	8000f44 <rylr998_setBand+0x80>
		return HAL_ERROR;  // snprintf error or buffer overflow
 8000f40:	2301      	movs	r3, #1
 8000f42:	e00d      	b.n	8000f60 <rylr998_setBand+0x9c>
	}

	// Transmit the AT command over UART
	ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8000f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	252b      	movs	r5, #43	@ 0x2b
 8000f4a:	197c      	adds	r4, r7, r5
 8000f4c:	2314      	movs	r3, #20
 8000f4e:	18f9      	adds	r1, r7, r3
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	230a      	movs	r3, #10
 8000f54:	f002 f9c2 	bl	80032dc <HAL_UART_Transmit>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	7023      	strb	r3, [r4, #0]

	return ret;
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b00c      	add	sp, #48	@ 0x30
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	3361137f 	.word	0x3361137f
 8000f6c:	3ccbf700 	.word	0x3ccbf700
 8000f70:	08005e58 	.word	0x08005e58
 8000f74:	08005e68 	.word	0x08005e68

08000f78 <rylr998_setCPIN>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  password: Pointer to the 8-character password to be set,  from 00000000 to FFFFFFFF
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if the password length is invalid or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setCPIN(UART_HandleTypeDef *puartHandle, const char *password) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000f82:	2327      	movs	r3, #39	@ 0x27
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
    char uartTxBuffer[24] = {0};  // Aumenté el tamaño para mayor seguridad
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	3304      	adds	r3, #4
 8000f94:	2214      	movs	r2, #20
 8000f96:	2100      	movs	r1, #0
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f003 fed1 	bl	8004d40 <memset>


    if (password == NULL || strlen(password) != 8) {
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <rylr998_setCPIN+0x3a>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff f8ae 	bl	8000108 <strlen>
 8000fac:	0003      	movs	r3, r0
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d003      	beq.n	8000fba <rylr998_setCPIN+0x42>
        return ret;
 8000fb2:	2327      	movs	r3, #39	@ 0x27
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	e01e      	b.n	8000ff8 <rylr998_setCPIN+0x80>
    }

    // Formatear el comando AT
    int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+CPIN=%s\r\n", password);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	4a10      	ldr	r2, [pc, #64]	@ (8001000 <rylr998_setCPIN+0x88>)
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	1878      	adds	r0, r7, r1
 8000fc2:	2118      	movs	r1, #24
 8000fc4:	f003 fe2e 	bl	8004c24 <sniprintf>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	623b      	str	r3, [r7, #32]

    // Verificar si snprintf tuvo un error o si hubo un desbordamiento
    if (packetSize <= 0 || packetSize >= sizeof(uartTxBuffer)) {
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd02      	ble.n	8000fd8 <rylr998_setCPIN+0x60>
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	2b17      	cmp	r3, #23
 8000fd6:	d901      	bls.n	8000fdc <rylr998_setCPIN+0x64>
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00d      	b.n	8000ff8 <rylr998_setCPIN+0x80>
    }

    // Enviar el comando AT por UART
    ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 100);
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	2527      	movs	r5, #39	@ 0x27
 8000fe2:	197c      	adds	r4, r7, r5
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	18f9      	adds	r1, r7, r3
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	f002 f976 	bl	80032dc <HAL_UART_Transmit>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	7023      	strb	r3, [r4, #0]

    return ret;
 8000ff4:	197b      	adds	r3, r7, r5
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00a      	add	sp, #40	@ 0x28
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	08005e78 	.word	0x08005e78

08001004 <rylr998_setCRFOP>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  CRFOP: The CRFOP value to be set (must be between 0 and 22).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if the CRFOP value is invalid or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setCRFOP(UART_HandleTypeDef *puartHandle, uint8_t CRFOP){ //TODO check if it works
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	000a      	movs	r2, r1
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	701a      	strb	r2, [r3, #0]
	    HAL_StatusTypeDef ret = HAL_ERROR;
 8001012:	241f      	movs	r4, #31
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
	    char uartTxBuffer[14] = {0};
 800101a:	2308      	movs	r3, #8
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	3304      	adds	r3, #4
 8001024:	220a      	movs	r2, #10
 8001026:	2100      	movs	r1, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f003 fe89 	bl	8004d40 <memset>
	    if(CRFOP>22){
 800102e:	1cfb      	adds	r3, r7, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b16      	cmp	r3, #22
 8001034:	d902      	bls.n	800103c <rylr998_setCRFOP+0x38>
	    	return ret;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	e01f      	b.n	800107c <rylr998_setCRFOP+0x78>
	    }


	    int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+CRFOP=%u\r\n", CRFOP);
 800103c:	1cfb      	adds	r3, r7, #3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <rylr998_setCRFOP+0x80>)
 8001042:	2108      	movs	r1, #8
 8001044:	1878      	adds	r0, r7, r1
 8001046:	210e      	movs	r1, #14
 8001048:	f003 fdec 	bl	8004c24 <sniprintf>
 800104c:	0003      	movs	r3, r0
 800104e:	61bb      	str	r3, [r7, #24]




	  	if (packetSize <= 0 || packetSize >= sizeof(uartTxBuffer)) {
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	dd02      	ble.n	800105c <rylr998_setCRFOP+0x58>
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b0d      	cmp	r3, #13
 800105a:	d901      	bls.n	8001060 <rylr998_setCRFOP+0x5c>
	  		return HAL_ERROR;  // snprintf error or overflow prevention
 800105c:	2301      	movs	r3, #1
 800105e:	e00d      	b.n	800107c <rylr998_setCRFOP+0x78>
	  	}

	  	ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	b29a      	uxth	r2, r3
 8001064:	251f      	movs	r5, #31
 8001066:	197c      	adds	r4, r7, r5
 8001068:	2308      	movs	r3, #8
 800106a:	18f9      	adds	r1, r7, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	230a      	movs	r3, #10
 8001070:	f002 f934 	bl	80032dc <HAL_UART_Transmit>
 8001074:	0003      	movs	r3, r0
 8001076:	7023      	strb	r3, [r4, #0]

	  	return ret;
 8001078:	197b      	adds	r3, r7, r5
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b008      	add	sp, #32
 8001082:	bdb0      	pop	{r4, r5, r7, pc}
 8001084:	08005e88 	.word	0x08005e88

08001088 <rylr998_FACTORY>:
 * @brief  Resets the RYLR998 module to its factory default settings using the AT command.
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_FACTORY(UART_HandleTypeDef *puartHandle) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8001090:	231f      	movs	r3, #31
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]

    char uartTxBuffer[15] = {0};
 8001098:	2408      	movs	r4, #8
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	3304      	adds	r3, #4
 80010a2:	220b      	movs	r2, #11
 80010a4:	2100      	movs	r1, #0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f003 fe4a 	bl	8004d40 <memset>


	int packetSize = snprintf(uartTxBuffer, sizeof(uartTxBuffer), "AT+FACTORY\r\n",1);
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <rylr998_FACTORY+0x68>)
 80010ae:	1938      	adds	r0, r7, r4
 80010b0:	2301      	movs	r3, #1
 80010b2:	210f      	movs	r1, #15
 80010b4:	f003 fdb6 	bl	8004c24 <sniprintf>
 80010b8:	0003      	movs	r3, r0
 80010ba:	61bb      	str	r3, [r7, #24]


	if (packetSize < 0 || packetSize >= sizeof(uartTxBuffer)) {
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db02      	blt.n	80010c8 <rylr998_FACTORY+0x40>
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b0e      	cmp	r3, #14
 80010c6:	d901      	bls.n	80010cc <rylr998_FACTORY+0x44>
		return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e00d      	b.n	80010e8 <rylr998_FACTORY+0x60>
	}


	ret = HAL_UART_Transmit(puartHandle, (uint8_t*)uartTxBuffer, packetSize, 10);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	251f      	movs	r5, #31
 80010d2:	197c      	adds	r4, r7, r5
 80010d4:	2308      	movs	r3, #8
 80010d6:	18f9      	adds	r1, r7, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	230a      	movs	r3, #10
 80010dc:	f002 f8fe 	bl	80032dc <HAL_UART_Transmit>
 80010e0:	0003      	movs	r3, r0
 80010e2:	7023      	strb	r3, [r4, #0]

	return ret;
 80010e4:	197b      	adds	r3, r7, r5
 80010e6:	781b      	ldrb	r3, [r3, #0]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b008      	add	sp, #32
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	08005e98 	.word	0x08005e98

080010f4 <rylr998_SetInterruptFlag>:

/**
 * @brief  Sets IRQ flag whenever new data gets into gets recived in the Rx buffer
 *
 */
void rylr998_SetInterruptFlag(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	rylr998_interrupt_flag =1;
 80010f8:	4b02      	ldr	r3, [pc, #8]	@ (8001104 <rylr998_SetInterruptFlag+0x10>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000183 	.word	0x20000183

08001108 <rylr998_GetInterruptFlag>:
/**
 * @brief  Returns the value of the flag
 * @retval flag status
 *
 */
uint8_t rylr998_GetInterruptFlag(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	return rylr998_interrupt_flag;
 800110c:	4b02      	ldr	r3, [pc, #8]	@ (8001118 <rylr998_GetInterruptFlag+0x10>)
 800110e:	781b      	ldrb	r3, [r3, #0]
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	20000183 	.word	0x20000183

0800111c <rylr998_ClearInterruptFlag>:

/**
 * @brief  Clear the IRQ flag
 *
 */
void rylr998_ClearInterruptFlag(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	rylr998_interrupt_flag =0;
 8001120:	4b02      	ldr	r3, [pc, #8]	@ (800112c <rylr998_ClearInterruptFlag+0x10>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000183 	.word	0x20000183

08001130 <rylr998_ResponseFind>:
 * @params RxBuffer sorted
 * @retval command selected
 *
 */
RYLR_RX_command_t rylr998_ResponseFind(uint8_t *rxBuffer)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	RYLR_RX_command_t 	ret 					= RYLR_NOT_FOUND;
 8001138:	240f      	movs	r4, #15
 800113a:	193b      	adds	r3, r7, r4
 800113c:	220b      	movs	r2, #11
 800113e:	701a      	strb	r2, [r3, #0]
	if(!memcmp(rxBuffer, "ADDRESS", 7))
 8001140:	4937      	ldr	r1, [pc, #220]	@ (8001220 <rylr998_ResponseFind+0xf0>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2207      	movs	r2, #7
 8001146:	0018      	movs	r0, r3
 8001148:	f003 fdec 	bl	8004d24 <memcmp>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d105      	bne.n	800115c <rylr998_ResponseFind+0x2c>
	{
		return ret = RYLR_ADDRESS;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	193b      	adds	r3, r7, r4
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	e05c      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+RCV", 4))
 800115c:	4931      	ldr	r1, [pc, #196]	@ (8001224 <rylr998_ResponseFind+0xf4>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2204      	movs	r2, #4
 8001162:	0018      	movs	r0, r3
 8001164:	f003 fdde 	bl	8004d24 <memcmp>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d106      	bne.n	800117a <rylr998_ResponseFind+0x4a>
	{
		return ret = RYLR_RCV;
 800116c:	210f      	movs	r1, #15
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2202      	movs	r2, #2
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	187b      	adds	r3, r7, r1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	e04d      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+OK\r\n", 5))
 800117a:	492b      	ldr	r1, [pc, #172]	@ (8001228 <rylr998_ResponseFind+0xf8>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2205      	movs	r2, #5
 8001180:	0018      	movs	r0, r3
 8001182:	f003 fdcf 	bl	8004d24 <memcmp>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d106      	bne.n	8001198 <rylr998_ResponseFind+0x68>
	{
		return ret = RYLR_OK;
 800118a:	210f      	movs	r1, #15
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	187b      	adds	r3, r7, r1
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	e03e      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+READY\r\n", 8))
 8001198:	4924      	ldr	r1, [pc, #144]	@ (800122c <rylr998_ResponseFind+0xfc>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2208      	movs	r2, #8
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 fdc0 	bl	8004d24 <memcmp>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d106      	bne.n	80011b6 <rylr998_ResponseFind+0x86>
	{
		return ret = RYLR_RDY;
 80011a8:	210f      	movs	r1, #15
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2203      	movs	r2, #3
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	e02f      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+ERR=", 5))
 80011b6:	491e      	ldr	r1, [pc, #120]	@ (8001230 <rylr998_ResponseFind+0x100>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2205      	movs	r2, #5
 80011bc:	0018      	movs	r0, r3
 80011be:	f003 fdb1 	bl	8004d24 <memcmp>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d106      	bne.n	80011d4 <rylr998_ResponseFind+0xa4>
	{
		return ret = RYLR_ERR;
 80011c6:	210f      	movs	r1, #15
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	220a      	movs	r2, #10
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	e020      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+FACTORY\r\n", 10))
 80011d4:	4917      	ldr	r1, [pc, #92]	@ (8001234 <rylr998_ResponseFind+0x104>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	220a      	movs	r2, #10
 80011da:	0018      	movs	r0, r3
 80011dc:	f003 fda2 	bl	8004d24 <memcmp>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d106      	bne.n	80011f2 <rylr998_ResponseFind+0xc2>
	{
		return ret = RYLR_FACTORY;
 80011e4:	210f      	movs	r1, #15
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2207      	movs	r2, #7
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	e011      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	else if(!memcmp(rxBuffer, "+IPR=", 5))
 80011f2:	4911      	ldr	r1, [pc, #68]	@ (8001238 <rylr998_ResponseFind+0x108>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2205      	movs	r2, #5
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 fd93 	bl	8004d24 <memcmp>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d106      	bne.n	8001210 <rylr998_ResponseFind+0xe0>
	{
		return ret = RYLR_IPR;
 8001202:	210f      	movs	r1, #15
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2204      	movs	r2, #4
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	187b      	adds	r3, r7, r1
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	e002      	b.n	8001216 <rylr998_ResponseFind+0xe6>
	}
	return ret;
 8001210:	230f      	movs	r3, #15
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	781b      	ldrb	r3, [r3, #0]
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b005      	add	sp, #20
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	08005ea8 	.word	0x08005ea8
 8001224:	08005eb0 	.word	0x08005eb0
 8001228:	08005eb8 	.word	0x08005eb8
 800122c:	08005ec0 	.word	0x08005ec0
 8001230:	08005ecc 	.word	0x08005ecc
 8001234:	08005ed4 	.word	0x08005ed4
 8001238:	08005ee0 	.word	0x08005ee0

0800123c <rylr998_prase_reciver>:


RYLR_RX_data_t rx_packet;

RYLR_RX_command_t rylr998_prase_reciver(uint8_t *pBuff, uint8_t RX_BUFFER_SIZE)
{
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	000a      	movs	r2, r1
 8001246:	1cfb      	adds	r3, r7, #3
 8001248:	701a      	strb	r2, [r3, #0]

	static uint8_t aux_buff[255];
	static uint8_t start_indx=0;
	static uint8_t i;

	if(pBuff[start_indx]=='\n'){   //RYLR_IPR returns +RYLR_IPR=115200\r\n\n for some reason so this fixes it
 800124a:	4b66      	ldr	r3, [pc, #408]	@ (80013e4 <rylr998_prase_reciver+0x1a8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	001a      	movs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	189b      	adds	r3, r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b0a      	cmp	r3, #10
 8001258:	d105      	bne.n	8001266 <rylr998_prase_reciver+0x2a>
									//TODO: improvement: search for the '+' in ASCII and then, save it in the aux_buff while keeping track of the index
		start_indx=start_indx+1;
 800125a:	4b62      	ldr	r3, [pc, #392]	@ (80013e4 <rylr998_prase_reciver+0x1a8>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b60      	ldr	r3, [pc, #384]	@ (80013e4 <rylr998_prase_reciver+0x1a8>)
 8001264:	701a      	strb	r2, [r3, #0]
	}

	for (i = 0; i <RX_BUFFER_SIZE; i++){
 8001266:	4b60      	ldr	r3, [pc, #384]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e024      	b.n	80012b8 <rylr998_prase_reciver+0x7c>
	    aux_buff[i] = pBuff[(start_indx + i) % RX_BUFFER_SIZE];
 800126e:	4b5d      	ldr	r3, [pc, #372]	@ (80013e4 <rylr998_prase_reciver+0x1a8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	001a      	movs	r2, r3
 8001274:	4b5c      	ldr	r3, [pc, #368]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	18d2      	adds	r2, r2, r3
 800127a:	1cfb      	adds	r3, r7, #3
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	0010      	movs	r0, r2
 8001282:	f7ff f8c3 	bl	800040c <__aeabi_idivmod>
 8001286:	000b      	movs	r3, r1
 8001288:	001a      	movs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	189b      	adds	r3, r3, r2
 800128e:	4a56      	ldr	r2, [pc, #344]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	7819      	ldrb	r1, [r3, #0]
 8001294:	4b55      	ldr	r3, [pc, #340]	@ (80013ec <rylr998_prase_reciver+0x1b0>)
 8001296:	5499      	strb	r1, [r3, r2]
	    if(aux_buff[i]=='\n'){
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	4b53      	ldr	r3, [pc, #332]	@ (80013ec <rylr998_prase_reciver+0x1b0>)
 80012a0:	5c9b      	ldrb	r3, [r3, r2]
 80012a2:	2b0a      	cmp	r3, #10
 80012a4:	d102      	bne.n	80012ac <rylr998_prase_reciver+0x70>
	    	rylr998_ClearInterruptFlag();
 80012a6:	f7ff ff39 	bl	800111c <rylr998_ClearInterruptFlag>
	    	break;
 80012aa:	e00b      	b.n	80012c4 <rylr998_prase_reciver+0x88>
	for (i = 0; i <RX_BUFFER_SIZE; i++){
 80012ac:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	1cfa      	adds	r2, r7, #3
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8d4      	bhi.n	800126e <rylr998_prase_reciver+0x32>
	    if(i==RX_BUFFER_SIZE && aux_buff[i]!='\n'){
	    }

	}

	start_indx=(start_indx + i+1) % RX_BUFFER_SIZE;
 80012c4:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <rylr998_prase_reciver+0x1a8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	001a      	movs	r2, r3
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	1cfb      	adds	r3, r7, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0019      	movs	r1, r3
 80012d8:	0010      	movs	r0, r2
 80012da:	f7ff f897 	bl	800040c <__aeabi_idivmod>
 80012de:	000b      	movs	r3, r1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b40      	ldr	r3, [pc, #256]	@ (80013e4 <rylr998_prase_reciver+0x1a8>)
 80012e4:	701a      	strb	r2, [r3, #0]
	i=0;
 80012e6:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <rylr998_prase_reciver+0x1ac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]



            RYLR_RX_command_t cmd = rylr998_ResponseFind(aux_buff);
 80012ec:	250f      	movs	r5, #15
 80012ee:	197c      	adds	r4, r7, r5
 80012f0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <rylr998_prase_reciver+0x1b0>)
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff ff1c 	bl	8001130 <rylr998_ResponseFind>
 80012f8:	0003      	movs	r3, r0
 80012fa:	7023      	strb	r3, [r4, #0]

            // Handle different cases
            switch (cmd)
 80012fc:	197b      	adds	r3, r7, r5
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b0a      	cmp	r3, #10
 8001302:	d864      	bhi.n	80013ce <rylr998_prase_reciver+0x192>
 8001304:	009a      	lsls	r2, r3, #2
 8001306:	4b3a      	ldr	r3, [pc, #232]	@ (80013f0 <rylr998_prase_reciver+0x1b4>)
 8001308:	18d3      	adds	r3, r2, r3
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	469f      	mov	pc, r3

            	    char *token;


            	    // Parse ID address
            	    token = strtok(aux_buff, "=");  // Remove "+RCV="
 800130e:	4a39      	ldr	r2, [pc, #228]	@ (80013f4 <rylr998_prase_reciver+0x1b8>)
 8001310:	4b36      	ldr	r3, [pc, #216]	@ (80013ec <rylr998_prase_reciver+0x1b0>)
 8001312:	0011      	movs	r1, r2
 8001314:	0018      	movs	r0, r3
 8001316:	f003 fd2f 	bl	8004d78 <strtok>
 800131a:	0003      	movs	r3, r0
 800131c:	60bb      	str	r3, [r7, #8]
            	    token = strtok(NULL, ",");      // Get ID address
 800131e:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <rylr998_prase_reciver+0x1bc>)
 8001320:	0019      	movs	r1, r3
 8001322:	2000      	movs	r0, #0
 8001324:	f003 fd28 	bl	8004d78 <strtok>
 8001328:	0003      	movs	r3, r0
 800132a:	60bb      	str	r3, [r7, #8]
            	    rx_packet.id = atoi(token);
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	0018      	movs	r0, r3
 8001330:	f003 fa5b 	bl	80047ea <atoi>
 8001334:	0003      	movs	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 800133a:	801a      	strh	r2, [r3, #0]

            	    // Parse byte count
            	    token = strtok(NULL, ",");      // Get byte count
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <rylr998_prase_reciver+0x1bc>)
 800133e:	0019      	movs	r1, r3
 8001340:	2000      	movs	r0, #0
 8001342:	f003 fd19 	bl	8004d78 <strtok>
 8001346:	0003      	movs	r3, r0
 8001348:	60bb      	str	r3, [r7, #8]
            	    rx_packet.byte_count = atoi(token);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	0018      	movs	r0, r3
 800134e:	f003 fa4c 	bl	80047ea <atoi>
 8001352:	0003      	movs	r3, r0
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 8001358:	709a      	strb	r2, [r3, #2]

            	    // Parse actual data
            	    token = strtok(NULL, ",");
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <rylr998_prase_reciver+0x1bc>)
 800135c:	0019      	movs	r1, r3
 800135e:	2000      	movs	r0, #0
 8001360:	f003 fd0a 	bl	8004d78 <strtok>
 8001364:	0003      	movs	r3, r0
 8001366:	60bb      	str	r3, [r7, #8]
            	    strncpy(rx_packet.data, token, rx_packet.byte_count);  // Copy up to byte_count
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	001a      	movs	r2, r3
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <rylr998_prase_reciver+0x1c4>)
 8001372:	0018      	movs	r0, r3
 8001374:	f003 fcec 	bl	8004d50 <strncpy>
            	    rx_packet.data[rx_packet.byte_count] = '\0';  // Ensure null termination
 8001378:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	001a      	movs	r2, r3
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 8001380:	189b      	adds	r3, r3, r2
 8001382:	2200      	movs	r2, #0
 8001384:	70da      	strb	r2, [r3, #3]

            	    // Parse RSSI
            	    token = strtok(NULL, ",");      // Get RSSI
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <rylr998_prase_reciver+0x1bc>)
 8001388:	0019      	movs	r1, r3
 800138a:	2000      	movs	r0, #0
 800138c:	f003 fcf4 	bl	8004d78 <strtok>
 8001390:	0003      	movs	r3, r0
 8001392:	60bb      	str	r3, [r7, #8]
            	    rx_packet.rssi = atoi(token);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	0018      	movs	r0, r3
 8001398:	f003 fa27 	bl	80047ea <atoi>
 800139c:	0003      	movs	r3, r0
 800139e:	b259      	sxtb	r1, r3
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 80013a2:	22f3      	movs	r2, #243	@ 0xf3
 80013a4:	5499      	strb	r1, [r3, r2]

            	    // Parse SNR
            	    token = strtok(NULL, ",");      // Get SNR
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <rylr998_prase_reciver+0x1bc>)
 80013a8:	0019      	movs	r1, r3
 80013aa:	2000      	movs	r0, #0
 80013ac:	f003 fce4 	bl	8004d78 <strtok>
 80013b0:	0003      	movs	r3, r0
 80013b2:	60bb      	str	r3, [r7, #8]
            	    rx_packet.snr = atoi(token);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f003 fa17 	bl	80047ea <atoi>
 80013bc:	0003      	movs	r3, r0
 80013be:	b2d9      	uxtb	r1, r3
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <rylr998_prase_reciver+0x1c0>)
 80013c2:	22f4      	movs	r2, #244	@ 0xf4
 80013c4:	5499      	strb	r1, [r3, r2]

                    break;
 80013c6:	e003      	b.n	80013d0 <rylr998_prase_reciver+0x194>
                    // Handle READY response
                    break;
                case RYLR_ERR:

                	while(1){  //TODO  for now, if something went wrong, the code gets stuck here.
                		Error_Handler();
 80013c8:	f7ff fbba 	bl	8000b40 <Error_Handler>
 80013cc:	e7fc      	b.n	80013c8 <rylr998_prase_reciver+0x18c>
                	}
                	break;
                default:
                    break;
 80013ce:	46c0      	nop			@ (mov r8, r8)
            }

            rylr998_ClearInterruptFlag();
 80013d0:	f7ff fea4 	bl	800111c <rylr998_ClearInterruptFlag>
            return cmd;
 80013d4:	230f      	movs	r3, #15
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	2000027a 	.word	0x2000027a
 80013e8:	2000027b 	.word	0x2000027b
 80013ec:	2000027c 	.word	0x2000027c
 80013f0:	08005ef0 	.word	0x08005ef0
 80013f4:	08005ee8 	.word	0x08005ee8
 80013f8:	08005eec 	.word	0x08005eec
 80013fc:	20000184 	.word	0x20000184
 8001400:	20000187 	.word	0x20000187

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_MspInit+0x24>)
 800140a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_MspInit+0x24>)
 800140e:	2101      	movs	r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <HAL_MspInit+0x24>)
 8001416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <HAL_MspInit+0x24>)
 800141a:	2180      	movs	r1, #128	@ 0x80
 800141c:	0549      	lsls	r1, r1, #21
 800141e:	430a      	orrs	r2, r1
 8001420:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f000 fb1c 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fd95 	bl	8001f96 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <DMA1_Channel2_3_IRQHandler+0x20>)
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fd91 	bl	8001f96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	200004d8 	.word	0x200004d8
 8001480:	20000490 	.word	0x20000490

08001484 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800148a:	0018      	movs	r0, r3
 800148c:	f000 fd83 	bl	8001f96 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fd7f 	bl	8001f96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	20000568 	.word	0x20000568
 80014a4:	20000520 	.word	0x20000520

080014a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <USART2_IRQHandler+0x14>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f001 ffb4 	bl	800341c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014b4:	46c0      	nop			@ (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000408 	.word	0x20000408

080014c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <LPUART1_IRQHandler+0x14>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f001 ffa8 	bl	800341c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	20000380 	.word	0x20000380

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_kill>:

int _kill(int pid, int sig)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ee:	f003 fd03 	bl	8004ef8 <__errno>
 80014f2:	0003      	movs	r3, r0
 80014f4:	2216      	movs	r2, #22
 80014f6:	601a      	str	r2, [r3, #0]
  return -1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	425b      	negs	r3, r3
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b002      	add	sp, #8
 8001502:	bd80      	pop	{r7, pc}

08001504 <_exit>:

void _exit (int status)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800150c:	2301      	movs	r3, #1
 800150e:	425a      	negs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff ffe5 	bl	80014e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	e7fd      	b.n	800151a <_exit+0x16>

0800151e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e00a      	b.n	8001546 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001530:	e000      	b.n	8001534 <_read+0x16>
 8001532:	bf00      	nop
 8001534:	0001      	movs	r1, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbf0      	blt.n	8001530 <_read+0x12>
  }

  return len;
 800154e:	687b      	ldr	r3, [r7, #4]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b006      	add	sp, #24
 8001556:	bd80      	pop	{r7, pc}

08001558 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e009      	b.n	800157e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0018      	movs	r0, r3
 8001574:	e000      	b.n	8001578 <_write+0x20>
 8001576:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	dbf1      	blt.n	800156a <_write+0x12>
  }
  return len;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b006      	add	sp, #24
 800158e:	bd80      	pop	{r7, pc}

08001590 <_close>:

int _close(int file)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001598:	2301      	movs	r3, #1
 800159a:	425b      	negs	r3, r3
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	0192      	lsls	r2, r2, #6
 80015b4:	605a      	str	r2, [r3, #4]
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_isatty>:

int _isatty(int file)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f003 fc6e 	bl	8004ef8 <__errno>
 800161c:	0003      	movs	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	2301      	movs	r3, #1
 8001624:	425b      	negs	r3, r3
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	18d2      	adds	r2, r2, r3
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <_sbrk+0x64>)
 8001638:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b006      	add	sp, #24
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20002000 	.word	0x20002000
 8001648:	00000400 	.word	0x00000400
 800164c:	2000037c 	.word	0x2000037c
 8001650:	20000700 	.word	0x20000700

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 8001666:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <MX_LPUART1_UART_Init+0x58>)
 8001668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 800166c:	22e1      	movs	r2, #225	@ 0xe1
 800166e:	0252      	lsls	r2, r2, #9
 8001670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <MX_LPUART1_UART_Init+0x54>)
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 fdc8 	bl	8003234 <HAL_UART_Init>
 80016a4:	1e03      	subs	r3, r0, #0
 80016a6:	d001      	beq.n	80016ac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f7ff fa4a 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000380 	.word	0x20000380
 80016b8:	40004800 	.word	0x40004800

080016bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016c8:	22e1      	movs	r2, #225	@ 0xe1
 80016ca:	0252      	lsls	r2, r2, #9
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 8001700:	0018      	movs	r0, r3
 8001702:	f001 fd97 	bl	8003234 <HAL_UART_Init>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800170a:	f7ff fa19 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000408 	.word	0x20000408
 8001718:	40004400 	.word	0x40004400

0800171c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b08b      	sub	sp, #44	@ 0x2c
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	2414      	movs	r4, #20
 8001726:	193b      	adds	r3, r7, r4
 8001728:	0018      	movs	r0, r3
 800172a:	2314      	movs	r3, #20
 800172c:	001a      	movs	r2, r3
 800172e:	2100      	movs	r1, #0
 8001730:	f003 fb06 	bl	8004d40 <memset>
  if(uartHandle->Instance==LPUART1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a8b      	ldr	r2, [pc, #556]	@ (8001968 <HAL_UART_MspInit+0x24c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d000      	beq.n	8001740 <HAL_UART_MspInit+0x24>
 800173e:	e084      	b.n	800184a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001740:	4b8a      	ldr	r3, [pc, #552]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001744:	4b89      	ldr	r3, [pc, #548]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	02c9      	lsls	r1, r1, #11
 800174a:	430a      	orrs	r2, r1
 800174c:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b87      	ldr	r3, [pc, #540]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001752:	4b86      	ldr	r3, [pc, #536]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c
 800175a:	4b84      	ldr	r3, [pc, #528]	@ (800196c <HAL_UART_MspInit+0x250>)
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001766:	0021      	movs	r1, r4
 8001768:	187b      	adds	r3, r7, r1
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2202      	movs	r2, #2
 8001772:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	187b      	adds	r3, r7, r1
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2203      	movs	r2, #3
 800177e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2206      	movs	r2, #6
 8001784:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	187a      	adds	r2, r7, r1
 8001788:	23a0      	movs	r3, #160	@ 0xa0
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f000 fcde 	bl	8002150 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8001794:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <HAL_UART_MspInit+0x254>)
 8001796:	4a77      	ldr	r2, [pc, #476]	@ (8001974 <HAL_UART_MspInit+0x258>)
 8001798:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 800179a:	4b75      	ldr	r3, [pc, #468]	@ (8001970 <HAL_UART_MspInit+0x254>)
 800179c:	2205      	movs	r2, #5
 800179e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a6:	4b72      	ldr	r3, [pc, #456]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ac:	4b70      	ldr	r3, [pc, #448]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80017be:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017c0:	2220      	movs	r2, #32
 80017c2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80017ca:	4b69      	ldr	r3, [pc, #420]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fa7d 	bl	8001ccc <HAL_DMA_Init>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80017d6:	f7ff f9b3 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a64      	ldr	r2, [pc, #400]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017de:	675a      	str	r2, [r3, #116]	@ 0x74
 80017e0:	4b63      	ldr	r3, [pc, #396]	@ (8001970 <HAL_UART_MspInit+0x254>)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80017e6:	4b64      	ldr	r3, [pc, #400]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 80017e8:	4a64      	ldr	r2, [pc, #400]	@ (800197c <HAL_UART_MspInit+0x260>)
 80017ea:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 80017ec:	4b62      	ldr	r3, [pc, #392]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 80017ee:	2205      	movs	r2, #5
 80017f0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f2:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 80017f4:	2210      	movs	r2, #16
 80017f6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001804:	4b5c      	ldr	r3, [pc, #368]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180a:	4b5b      	ldr	r3, [pc, #364]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001810:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001816:	4b58      	ldr	r3, [pc, #352]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800181c:	4b56      	ldr	r3, [pc, #344]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 800181e:	0018      	movs	r0, r3
 8001820:	f000 fa54 	bl	8001ccc <HAL_DMA_Init>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001828:	f7ff f98a 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 8001830:	671a      	str	r2, [r3, #112]	@ 0x70
 8001832:	4b51      	ldr	r3, [pc, #324]	@ (8001978 <HAL_UART_MspInit+0x25c>)
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	201d      	movs	r0, #29
 800183e:	f000 fa13 	bl	8001c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001842:	201d      	movs	r0, #29
 8001844:	f000 fa25 	bl	8001c92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001848:	e08a      	b.n	8001960 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a4c      	ldr	r2, [pc, #304]	@ (8001980 <HAL_UART_MspInit+0x264>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d000      	beq.n	8001856 <HAL_UART_MspInit+0x13a>
 8001854:	e084      	b.n	8001960 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001856:	4b45      	ldr	r3, [pc, #276]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800185a:	4b44      	ldr	r3, [pc, #272]	@ (800196c <HAL_UART_MspInit+0x250>)
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	0289      	lsls	r1, r1, #10
 8001860:	430a      	orrs	r2, r1
 8001862:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001868:	4b40      	ldr	r3, [pc, #256]	@ (800196c <HAL_UART_MspInit+0x250>)
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001870:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <HAL_UART_MspInit+0x250>)
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|VCP_RX_Pin;
 800187c:	2114      	movs	r1, #20
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2282      	movs	r2, #130	@ 0x82
 8001882:	0212      	lsls	r2, r2, #8
 8001884:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2202      	movs	r2, #2
 800188a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2203      	movs	r2, #3
 8001896:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2204      	movs	r2, #4
 800189c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	187a      	adds	r2, r7, r1
 80018a0:	23a0      	movs	r3, #160	@ 0xa0
 80018a2:	05db      	lsls	r3, r3, #23
 80018a4:	0011      	movs	r1, r2
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fc52 	bl	8002150 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80018ac:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018ae:	4a36      	ldr	r2, [pc, #216]	@ (8001988 <HAL_UART_MspInit+0x26c>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80018b2:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018b4:	2204      	movs	r2, #4
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018d8:	2220      	movs	r2, #32
 80018da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f9f1 	bl	8001ccc <HAL_DMA_Init>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 80018ee:	f7ff f927 	bl	8000b40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <HAL_UART_MspInit+0x268>)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80018fe:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001900:	4a23      	ldr	r2, [pc, #140]	@ (8001990 <HAL_UART_MspInit+0x274>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8001904:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001906:	2204      	movs	r2, #4
 8001908:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_UART_MspInit+0x270>)
 800190c:	2210      	movs	r2, #16
 800190e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_UART_MspInit+0x270>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001928:	4b18      	ldr	r3, [pc, #96]	@ (800198c <HAL_UART_MspInit+0x270>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001934:	4b15      	ldr	r3, [pc, #84]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f9c8 	bl	8001ccc <HAL_DMA_Init>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001940:	f7ff f8fe 	bl	8000b40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a11      	ldr	r2, [pc, #68]	@ (800198c <HAL_UART_MspInit+0x270>)
 8001948:	671a      	str	r2, [r3, #112]	@ 0x70
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <HAL_UART_MspInit+0x270>)
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	201c      	movs	r0, #28
 8001956:	f000 f987 	bl	8001c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800195a:	201c      	movs	r0, #28
 800195c:	f000 f999 	bl	8001c92 <HAL_NVIC_EnableIRQ>
}
 8001960:	46c0      	nop			@ (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b00b      	add	sp, #44	@ 0x2c
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	40004800 	.word	0x40004800
 800196c:	40021000 	.word	0x40021000
 8001970:	20000490 	.word	0x20000490
 8001974:	40020030 	.word	0x40020030
 8001978:	200004d8 	.word	0x200004d8
 800197c:	4002001c 	.word	0x4002001c
 8001980:	40004400 	.word	0x40004400
 8001984:	20000520 	.word	0x20000520
 8001988:	40020058 	.word	0x40020058
 800198c:	20000568 	.word	0x20000568
 8001990:	40020044 	.word	0x40020044

08001994 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:     ldr   r0, =_estack
 8001994:	480d      	ldr	r0, [pc, #52]	@ (80019cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001996:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001998:	f7ff fe5c 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopForever+0xe>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopForever+0x16>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f003 fa9f 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff f829 	bl	8000a1c <main>

080019ca <LoopForever>:

LoopForever:
    b LoopForever
 80019ca:	e7fe      	b.n	80019ca <LoopForever>
Reset_Handler:     ldr   r0, =_estack
 80019cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019d8:	0800617c 	.word	0x0800617c
  ldr r2, =_sbss
 80019dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019e0:	20000700 	.word	0x20000700

080019e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_COMP_IRQHandler>
	...

080019e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_Init+0x3c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_Init+0x3c>)
 80019fa:	2140      	movs	r1, #64	@ 0x40
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f811 	bl	8001a28 <HAL_InitTick>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e001      	b.n	8001a16 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a12:	f7ff fcf7 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_InitTick+0x5c>)
 8001a32:	681c      	ldr	r4, [r3, #0]
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_InitTick+0x60>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	0019      	movs	r1, r3
 8001a3a:	23fa      	movs	r3, #250	@ 0xfa
 8001a3c:	0098      	lsls	r0, r3, #2
 8001a3e:	f7fe fb75 	bl	800012c <__udivsi3>
 8001a42:	0003      	movs	r3, r0
 8001a44:	0019      	movs	r1, r3
 8001a46:	0020      	movs	r0, r4
 8001a48:	f7fe fb70 	bl	800012c <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f92f 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a54:	1e03      	subs	r3, r0, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e00f      	b.n	8001a7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d80b      	bhi.n	8001a7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	2301      	movs	r3, #1
 8001a66:	425b      	negs	r3, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 f8fc 	bl	8001c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_InitTick+0x64>)
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b003      	add	sp, #12
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_IncTick+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	001a      	movs	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	18d2      	adds	r2, r2, r3
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	200005b0 	.word	0x200005b0

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	200005b0 	.word	0x200005b0

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	189b      	adds	r3, r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	f7ff ffe0 	bl	8001ab4 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	0002      	movs	r2, r0
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b22:	d809      	bhi.n	8001b38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	001a      	movs	r2, r3
 8001b2a:	231f      	movs	r3, #31
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <__NVIC_EnableIRQ+0x30>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	4091      	lsls	r1, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
  }
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b58:	d828      	bhi.n	8001bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <__NVIC_SetPriority+0xd4>)
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	33c0      	adds	r3, #192	@ 0xc0
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	589b      	ldr	r3, [r3, r2]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	@ 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	481f      	ldr	r0, [pc, #124]	@ (8001c18 <__NVIC_SetPriority+0xd4>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	33c0      	adds	r3, #192	@ 0xc0
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001baa:	e031      	b.n	8001c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <__NVIC_SetPriority+0xd8>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3306      	adds	r3, #6
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1dfa      	adds	r2, r7, #7
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	0011      	movs	r1, r2
 8001bcc:	2203      	movs	r2, #3
 8001bce:	400a      	ands	r2, r1
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	21ff      	movs	r1, #255	@ 0xff
 8001bd4:	4091      	lsls	r1, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	43d2      	mvns	r2, r2
 8001bda:	401a      	ands	r2, r3
 8001bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	019b      	lsls	r3, r3, #6
 8001be2:	22ff      	movs	r2, #255	@ 0xff
 8001be4:	401a      	ands	r2, r3
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	0018      	movs	r0, r3
 8001bec:	2303      	movs	r3, #3
 8001bee:	4003      	ands	r3, r0
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf4:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <__NVIC_SetPriority+0xd8>)
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	001c      	movs	r4, r3
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	4023      	ands	r3, r4
 8001c00:	3b08      	subs	r3, #8
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	430a      	orrs	r2, r1
 8001c06:	3306      	adds	r3, #6
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	18c3      	adds	r3, r0, r3
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b003      	add	sp, #12
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	045b      	lsls	r3, r3, #17
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d301      	bcc.n	8001c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c34:	2301      	movs	r3, #1
 8001c36:	e010      	b.n	8001c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <SysTick_Config+0x44>)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c40:	2301      	movs	r3, #1
 8001c42:	425b      	negs	r3, r3
 8001c44:	2103      	movs	r1, #3
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff ff7c 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x44>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x44>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	210f      	movs	r1, #15
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	1c02      	adds	r2, r0, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	0002      	movs	r2, r0
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ff33 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ffaf 	bl	8001c20 <SysTick_Config>
 8001cc2:	0003      	movs	r3, r0
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e061      	b.n	8001da2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a32      	ldr	r2, [pc, #200]	@ (8001dac <HAL_DMA_Init+0xe0>)
 8001ce4:	4694      	mov	ip, r2
 8001ce6:	4463      	add	r3, ip
 8001ce8:	2114      	movs	r1, #20
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7fe fa1e 	bl	800012c <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	009a      	lsls	r2, r3, #2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001db0 <HAL_DMA_Init+0xe4>)
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2225      	movs	r2, #37	@ 0x25
 8001d02:	2102      	movs	r1, #2
 8001d04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <HAL_DMA_Init+0xe8>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d018      	beq.n	8001d8a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d58:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <HAL_DMA_Init+0xec>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	211c      	movs	r1, #28
 8001d62:	400b      	ands	r3, r1
 8001d64:	210f      	movs	r1, #15
 8001d66:	4099      	lsls	r1, r3
 8001d68:	000b      	movs	r3, r1
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_DMA_Init+0xec>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_DMA_Init+0xec>)
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	201c      	movs	r0, #28
 8001d80:	4003      	ands	r3, r0
 8001d82:	409a      	lsls	r2, r3
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_DMA_Init+0xec>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2225      	movs	r2, #37	@ 0x25
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	@ 0x24
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b004      	add	sp, #16
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	bffdfff8 	.word	0xbffdfff8
 8001db0:	40020000 	.word	0x40020000
 8001db4:	ffff800f 	.word	0xffff800f
 8001db8:	400200a8 	.word	0x400200a8

08001dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2317      	movs	r3, #23
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2224      	movs	r2, #36	@ 0x24
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_DMA_Start_IT+0x24>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e04f      	b.n	8001e80 <HAL_DMA_Start_IT+0xc4>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2225      	movs	r2, #37	@ 0x25
 8001dec:	5c9b      	ldrb	r3, [r3, r2]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d13a      	bne.n	8001e6a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2225      	movs	r2, #37	@ 0x25
 8001df8:	2102      	movs	r1, #2
 8001dfa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	438a      	bics	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f96a 	bl	80020f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	210e      	movs	r1, #14
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e00f      	b.n	8001e58 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2104      	movs	r1, #4
 8001e44:	438a      	bics	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	210a      	movs	r1, #10
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e007      	b.n	8001e7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2224      	movs	r2, #36	@ 0x24
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e72:	2317      	movs	r3, #23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001e7a:	2317      	movs	r3, #23
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b006      	add	sp, #24
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e90:	230f      	movs	r3, #15
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2225      	movs	r2, #37	@ 0x25
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d008      	beq.n	8001eb6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2224      	movs	r2, #36	@ 0x24
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e024      	b.n	8001f00 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	210e      	movs	r1, #14
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	221c      	movs	r2, #28
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4091      	lsls	r1, r2
 8001ee6:	000a      	movs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2225      	movs	r2, #37	@ 0x25
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2224      	movs	r2, #36	@ 0x24
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	5499      	strb	r1, [r3, r2]

    return status;
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b004      	add	sp, #16
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	210f      	movs	r1, #15
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2225      	movs	r2, #37	@ 0x25
 8001f1c:	5c9b      	ldrb	r3, [r3, r2]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d006      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2204      	movs	r2, #4
 8001f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e02a      	b.n	8001f88 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	210e      	movs	r1, #14
 8001f3e:	438a      	bics	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	438a      	bics	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	221c      	movs	r2, #28
 8001f58:	401a      	ands	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4091      	lsls	r1, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2225      	movs	r2, #37	@ 0x25
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2224      	movs	r2, #36	@ 0x24
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	0010      	movs	r0, r2
 8001f86:	4798      	blx	r3
    }
  }
  return status;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	221c      	movs	r2, #28
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	0013      	movs	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d026      	beq.n	8002010 <HAL_DMA_IRQHandler+0x7a>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	438a      	bics	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	221c      	movs	r2, #28
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d100      	bne.n	8002004 <HAL_DMA_IRQHandler+0x6e>
 8002002:	e071      	b.n	80020e8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	0010      	movs	r0, r2
 800200c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800200e:	e06b      	b.n	80020e8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	221c      	movs	r2, #28
 8002016:	4013      	ands	r3, r2
 8002018:	2202      	movs	r2, #2
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	d02d      	beq.n	8002080 <HAL_DMA_IRQHandler+0xea>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2202      	movs	r2, #2
 8002028:	4013      	ands	r3, r2
 800202a:	d029      	beq.n	8002080 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2220      	movs	r2, #32
 8002034:	4013      	ands	r3, r2
 8002036:	d10b      	bne.n	8002050 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	210a      	movs	r1, #10
 8002044:	438a      	bics	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2225      	movs	r2, #37	@ 0x25
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	221c      	movs	r2, #28
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	2102      	movs	r1, #2
 800205e:	4091      	lsls	r1, r2
 8002060:	000a      	movs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	@ 0x24
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d039      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	0010      	movs	r0, r2
 800207c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800207e:	e033      	b.n	80020e8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	221c      	movs	r2, #28
 8002086:	4013      	ands	r3, r2
 8002088:	2208      	movs	r2, #8
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	d02a      	beq.n	80020ea <HAL_DMA_IRQHandler+0x154>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2208      	movs	r2, #8
 8002098:	4013      	ands	r3, r2
 800209a:	d026      	beq.n	80020ea <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	210e      	movs	r1, #14
 80020a8:	438a      	bics	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	221c      	movs	r2, #28
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2101      	movs	r1, #1
 80020ba:	4091      	lsls	r1, r2
 80020bc:	000a      	movs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2225      	movs	r2, #37	@ 0x25
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2224      	movs	r2, #36	@ 0x24
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	0010      	movs	r0, r2
 80020e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46c0      	nop			@ (mov r8, r8)
}
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	221c      	movs	r2, #28
 8002106:	401a      	ands	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	2101      	movs	r1, #1
 800210e:	4091      	lsls	r1, r2
 8002110:	000a      	movs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b10      	cmp	r3, #16
 8002122:	d108      	bne.n	8002136 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002134:	e007      	b.n	8002146 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	60da      	str	r2, [r3, #12]
}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002166:	e149      	b.n	80023fc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4091      	lsls	r1, r2
 8002172:	000a      	movs	r2, r1
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d100      	bne.n	8002180 <HAL_GPIO_Init+0x30>
 800217e:	e13a      	b.n	80023f6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	4013      	ands	r3, r2
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	409a      	lsls	r2, r3
 80021a6:	0013      	movs	r3, r2
 80021a8:	43da      	mvns	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	409a      	lsls	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	2201      	movs	r2, #1
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	4013      	ands	r3, r2
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	409a      	lsls	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	4013      	ands	r3, r2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d123      	bne.n	800228a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	58d3      	ldr	r3, [r2, r3]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2107      	movs	r1, #7
 800226e:	400b      	ands	r3, r1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	6939      	ldr	r1, [r7, #16]
 8002288:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2203      	movs	r2, #3
 80022a8:	401a      	ands	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	23c0      	movs	r3, #192	@ 0xc0
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d100      	bne.n	80022cc <HAL_GPIO_Init+0x17c>
 80022ca:	e094      	b.n	80023f6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	4b51      	ldr	r3, [pc, #324]	@ (8002414 <HAL_GPIO_Init+0x2c4>)
 80022ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d0:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <HAL_GPIO_Init+0x2c4>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002418 <HAL_GPIO_Init+0x2c8>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	589b      	ldr	r3, [r3, r2]
 80022e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	23a0      	movs	r3, #160	@ 0xa0
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	429a      	cmp	r2, r3
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x1de>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a44      	ldr	r2, [pc, #272]	@ (800241c <HAL_GPIO_Init+0x2cc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x1da>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a43      	ldr	r2, [pc, #268]	@ (8002420 <HAL_GPIO_Init+0x2d0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x1d6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a42      	ldr	r2, [pc, #264]	@ (8002424 <HAL_GPIO_Init+0x2d4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x1d2>
 800231e:	2305      	movs	r3, #5
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x1e0>
 8002322:	2306      	movs	r3, #6
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x1e0>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x1e0>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x1e0>
 800232e:	2300      	movs	r3, #0
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	2103      	movs	r1, #3
 8002334:	400a      	ands	r2, r1
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	@ (8002418 <HAL_GPIO_Init+0x2c8>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	035b      	lsls	r3, r3, #13
 8002366:	4013      	ands	r3, r2
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002372:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43da      	mvns	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	039b      	lsls	r3, r3, #14
 8002390:	4013      	ands	r3, r2
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80023a2:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	4013      	ands	r3, r2
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	40da      	lsrs	r2, r3
 8002404:	1e13      	subs	r3, r2, #0
 8002406:	d000      	beq.n	800240a <HAL_GPIO_Init+0x2ba>
 8002408:	e6ae      	b.n	8002168 <HAL_GPIO_Init+0x18>
  }
}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b006      	add	sp, #24
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000
 800241c:	50000400 	.word	0x50000400
 8002420:	50000800 	.word	0x50000800
 8002424:	50001c00 	.word	0x50001c00
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	0008      	movs	r0, r1
 8002436:	0011      	movs	r1, r2
 8002438:	1cbb      	adds	r3, r7, #2
 800243a:	1c02      	adds	r2, r0, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	1c7b      	adds	r3, r7, #1
 8002440:	1c0a      	adds	r2, r1, #0
 8002442:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002444:	1c7b      	adds	r3, r7, #1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244c:	1cbb      	adds	r3, r7, #2
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002456:	1cbb      	adds	r3, r7, #2
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	000a      	movs	r2, r1
 8002470:	1cbb      	adds	r3, r7, #2
 8002472:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800247a:	1cbb      	adds	r3, r7, #2
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	1cb9      	adds	r1, r7, #2
 800248a:	8809      	ldrh	r1, [r1, #0]
 800248c:	400b      	ands	r3, r1
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
}
 8002494:	46c0      	nop			@ (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b5b0      	push	{r4, r5, r7, lr}
 800249e:	b08a      	sub	sp, #40	@ 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f000 fb6c 	bl	8002b88 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b0:	4bc8      	ldr	r3, [pc, #800]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	220c      	movs	r2, #12
 80024b6:	4013      	ands	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ba:	4bc6      	ldr	r3, [pc, #792]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d100      	bne.n	80024d2 <HAL_RCC_OscConfig+0x36>
 80024d0:	e07d      	b.n	80025ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d007      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x68>
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	025b      	lsls	r3, r3, #9
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d10d      	bne.n	8002504 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4bba      	ldr	r3, [pc, #744]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4013      	ands	r3, r2
 80024f2:	d100      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5a>
 80024f4:	e06a      	b.n	80025cc <HAL_RCC_OscConfig+0x130>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d166      	bne.n	80025cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f000 fb42 	bl	8002b88 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	025b      	lsls	r3, r3, #9
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x84>
 8002510:	4bb0      	ldr	r3, [pc, #704]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4baf      	ldr	r3, [pc, #700]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002516:	2180      	movs	r1, #128	@ 0x80
 8002518:	0249      	lsls	r1, r1, #9
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e027      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	23a0      	movs	r3, #160	@ 0xa0
 8002526:	02db      	lsls	r3, r3, #11
 8002528:	429a      	cmp	r2, r3
 800252a:	d10e      	bne.n	800254a <HAL_RCC_OscConfig+0xae>
 800252c:	4ba9      	ldr	r3, [pc, #676]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4ba8      	ldr	r3, [pc, #672]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	02c9      	lsls	r1, r1, #11
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	4ba6      	ldr	r3, [pc, #664]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4ba5      	ldr	r3, [pc, #660]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002540:	2180      	movs	r1, #128	@ 0x80
 8002542:	0249      	lsls	r1, r1, #9
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e012      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 800254a:	4ba2      	ldr	r3, [pc, #648]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4ba1      	ldr	r3, [pc, #644]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002550:	49a1      	ldr	r1, [pc, #644]	@ (80027d8 <HAL_RCC_OscConfig+0x33c>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	4b9f      	ldr	r3, [pc, #636]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4b9b      	ldr	r3, [pc, #620]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800256a:	499c      	ldr	r1, [pc, #624]	@ (80027dc <HAL_RCC_OscConfig+0x340>)
 800256c:	400a      	ands	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d014      	beq.n	80025a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fa9c 	bl	8001ab4 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002582:	f7ff fa97 	bl	8001ab4 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	@ 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e2f9      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002594:	4b8f      	ldr	r3, [pc, #572]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	4013      	ands	r3, r2
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0xe6>
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff fa87 	bl	8001ab4 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff fa82 	bl	8001ab4 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e2e4      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025be:	4b85      	ldr	r3, [pc, #532]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	4013      	ands	r3, r2
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x110>
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d100      	bne.n	80025da <HAL_RCC_OscConfig+0x13e>
 80025d8:	e099      	b.n	800270e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	2220      	movs	r2, #32
 80025e4:	4013      	ands	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80025e8:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b79      	ldr	r3, [pc, #484]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80025ee:	2120      	movs	r1, #32
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	2220      	movs	r2, #32
 80025f8:	4393      	bics	r3, r2
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d13e      	bne.n	8002686 <HAL_RCC_OscConfig+0x1ea>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d13b      	bne.n	8002686 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800260e:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2204      	movs	r2, #4
 8002614:	4013      	ands	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_RCC_OscConfig+0x186>
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e2b2      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b6c      	ldr	r3, [pc, #432]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a6e      	ldr	r2, [pc, #440]	@ (80027e0 <HAL_RCC_OscConfig+0x344>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	021a      	lsls	r2, r3, #8
 8002632:	4b68      	ldr	r3, [pc, #416]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002638:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2209      	movs	r2, #9
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	4b64      	ldr	r3, [pc, #400]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 fbeb 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 800264e:	0001      	movs	r1, r0
 8002650:	4b60      	ldr	r3, [pc, #384]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	220f      	movs	r2, #15
 8002658:	4013      	ands	r3, r2
 800265a:	4a62      	ldr	r2, [pc, #392]	@ (80027e4 <HAL_RCC_OscConfig+0x348>)
 800265c:	5cd3      	ldrb	r3, [r2, r3]
 800265e:	000a      	movs	r2, r1
 8002660:	40da      	lsrs	r2, r3
 8002662:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <HAL_RCC_OscConfig+0x34c>)
 8002664:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002666:	4b61      	ldr	r3, [pc, #388]	@ (80027ec <HAL_RCC_OscConfig+0x350>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2513      	movs	r5, #19
 800266c:	197c      	adds	r4, r7, r5
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff f9da 	bl	8001a28 <HAL_InitTick>
 8002674:	0003      	movs	r3, r0
 8002676:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002678:	197b      	adds	r3, r7, r5
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d046      	beq.n	800270e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002680:	197b      	adds	r3, r7, r5
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	e280      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d027      	beq.n	80026dc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800268c:	4b51      	ldr	r3, [pc, #324]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2209      	movs	r2, #9
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	4b4f      	ldr	r3, [pc, #316]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7ff fa09 	bl	8001ab4 <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a8:	f7ff fa04 	bl	8001ab4 <HAL_GetTick>
 80026ac:	0002      	movs	r2, r0
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e266      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ba:	4b46      	ldr	r3, [pc, #280]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d0f1      	beq.n	80026a8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a45      	ldr	r2, [pc, #276]	@ (80027e0 <HAL_RCC_OscConfig+0x344>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	021a      	lsls	r2, r3, #8
 80026d4:	4b3f      	ldr	r3, [pc, #252]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	e018      	b.n	800270e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026dc:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff f9e4 	bl	8001ab4 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff f9df 	bl	8001ab4 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e241      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002704:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2204      	movs	r2, #4
 800270a:	4013      	ands	r3, r2
 800270c:	d1f1      	bne.n	80026f2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2210      	movs	r2, #16
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x27e>
 8002718:	e0a1      	b.n	800285e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d140      	bne.n	80027a2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002720:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x29c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e227      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002738:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a2c      	ldr	r2, [pc, #176]	@ (80027f0 <HAL_RCC_OscConfig+0x354>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	0a19      	lsrs	r1, r3, #8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	0b5b      	lsrs	r3, r3, #13
 8002766:	3301      	adds	r3, #1
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	0212      	lsls	r2, r2, #8
 800276c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	210f      	movs	r1, #15
 8002776:	400b      	ands	r3, r1
 8002778:	491a      	ldr	r1, [pc, #104]	@ (80027e4 <HAL_RCC_OscConfig+0x348>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_RCC_OscConfig+0x34c>)
 8002780:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002782:	4b1a      	ldr	r3, [pc, #104]	@ (80027ec <HAL_RCC_OscConfig+0x350>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2513      	movs	r5, #19
 8002788:	197c      	adds	r4, r7, r5
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff f94c 	bl	8001a28 <HAL_InitTick>
 8002790:	0003      	movs	r3, r0
 8002792:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002794:	197b      	adds	r3, r7, r5
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d060      	beq.n	800285e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800279c:	197b      	adds	r3, r7, r5
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	e1f2      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03f      	beq.n	800282a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_OscConfig+0x338>)
 80027b0:	2180      	movs	r1, #128	@ 0x80
 80027b2:	0049      	lsls	r1, r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff f97c 	bl	8001ab4 <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027c0:	e018      	b.n	80027f4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c2:	f7ff f977 	bl	8001ab4 <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d911      	bls.n	80027f4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1d9      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	fffeffff 	.word	0xfffeffff
 80027dc:	fffbffff 	.word	0xfffbffff
 80027e0:	ffffe0ff 	.word	0xffffe0ff
 80027e4:	08005f1c 	.word	0x08005f1c
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004
 80027f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027f4:	4bc9      	ldr	r3, [pc, #804]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d0e0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002800:	4bc6      	ldr	r3, [pc, #792]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4ac6      	ldr	r2, [pc, #792]	@ (8002b20 <HAL_RCC_OscConfig+0x684>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	4bc3      	ldr	r3, [pc, #780]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002814:	4bc1      	ldr	r3, [pc, #772]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	0a19      	lsrs	r1, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	061a      	lsls	r2, r3, #24
 8002822:	4bbe      	ldr	r3, [pc, #760]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	e019      	b.n	800285e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800282a:	4bbc      	ldr	r3, [pc, #752]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4bbb      	ldr	r3, [pc, #748]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002830:	49bc      	ldr	r1, [pc, #752]	@ (8002b24 <HAL_RCC_OscConfig+0x688>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff f93d 	bl	8001ab4 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002840:	f7ff f938 	bl	8001ab4 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e19a      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002852:	4bb2      	ldr	r3, [pc, #712]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2208      	movs	r2, #8
 8002864:	4013      	ands	r3, r2
 8002866:	d036      	beq.n	80028d6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002870:	4baa      	ldr	r3, [pc, #680]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002872:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002874:	4ba9      	ldr	r3, [pc, #676]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002876:	2101      	movs	r1, #1
 8002878:	430a      	orrs	r2, r1
 800287a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7ff f91a 	bl	8001ab4 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002886:	f7ff f915 	bl	8001ab4 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e177      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002898:	4ba0      	ldr	r3, [pc, #640]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800289a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d0f1      	beq.n	8002886 <HAL_RCC_OscConfig+0x3ea>
 80028a2:	e018      	b.n	80028d6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80028a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028a8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	438a      	bics	r2, r1
 80028ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7ff f900 	bl	8001ab4 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ba:	f7ff f8fb 	bl	8001ab4 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e15d      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028cc:	4b93      	ldr	r3, [pc, #588]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80028ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d1f1      	bne.n	80028ba <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2204      	movs	r2, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <HAL_RCC_OscConfig+0x446>
 80028e0:	e0ae      	b.n	8002a40 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2023      	movs	r0, #35	@ 0x23
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b8c      	ldr	r3, [pc, #560]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80028ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	055b      	lsls	r3, r3, #21
 80028f2:	4013      	ands	r3, r2
 80028f4:	d109      	bne.n	800290a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b89      	ldr	r3, [pc, #548]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80028f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028fa:	4b88      	ldr	r3, [pc, #544]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0549      	lsls	r1, r1, #21
 8002900:	430a      	orrs	r2, r1
 8002902:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002904:	183b      	adds	r3, r7, r0
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b87      	ldr	r3, [pc, #540]	@ (8002b28 <HAL_RCC_OscConfig+0x68c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b84      	ldr	r3, [pc, #528]	@ (8002b28 <HAL_RCC_OscConfig+0x68c>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b83      	ldr	r3, [pc, #524]	@ (8002b28 <HAL_RCC_OscConfig+0x68c>)
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	0049      	lsls	r1, r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002924:	f7ff f8c6 	bl	8001ab4 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7ff f8c1 	bl	8001ab4 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	@ 0x64
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e123      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b79      	ldr	r3, [pc, #484]	@ (8002b28 <HAL_RCC_OscConfig+0x68c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4013      	ands	r3, r2
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	429a      	cmp	r2, r3
 8002956:	d107      	bne.n	8002968 <HAL_RCC_OscConfig+0x4cc>
 8002958:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800295a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800295c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800295e:	2180      	movs	r1, #128	@ 0x80
 8002960:	0049      	lsls	r1, r1, #1
 8002962:	430a      	orrs	r2, r1
 8002964:	651a      	str	r2, [r3, #80]	@ 0x50
 8002966:	e031      	b.n	80029cc <HAL_RCC_OscConfig+0x530>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10c      	bne.n	800298a <HAL_RCC_OscConfig+0x4ee>
 8002970:	4b6a      	ldr	r3, [pc, #424]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002974:	4b69      	ldr	r3, [pc, #420]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002976:	496b      	ldr	r1, [pc, #428]	@ (8002b24 <HAL_RCC_OscConfig+0x688>)
 8002978:	400a      	ands	r2, r1
 800297a:	651a      	str	r2, [r3, #80]	@ 0x50
 800297c:	4b67      	ldr	r3, [pc, #412]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800297e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002980:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002982:	496a      	ldr	r1, [pc, #424]	@ (8002b2c <HAL_RCC_OscConfig+0x690>)
 8002984:	400a      	ands	r2, r1
 8002986:	651a      	str	r2, [r3, #80]	@ 0x50
 8002988:	e020      	b.n	80029cc <HAL_RCC_OscConfig+0x530>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	23a0      	movs	r3, #160	@ 0xa0
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	429a      	cmp	r2, r3
 8002994:	d10e      	bne.n	80029b4 <HAL_RCC_OscConfig+0x518>
 8002996:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800299a:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 800299c:	2180      	movs	r1, #128	@ 0x80
 800299e:	00c9      	lsls	r1, r1, #3
 80029a0:	430a      	orrs	r2, r1
 80029a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80029a4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029a8:	4b5c      	ldr	r3, [pc, #368]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029aa:	2180      	movs	r1, #128	@ 0x80
 80029ac:	0049      	lsls	r1, r1, #1
 80029ae:	430a      	orrs	r2, r1
 80029b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x530>
 80029b4:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029b8:	4b58      	ldr	r3, [pc, #352]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029ba:	495a      	ldr	r1, [pc, #360]	@ (8002b24 <HAL_RCC_OscConfig+0x688>)
 80029bc:	400a      	ands	r2, r1
 80029be:	651a      	str	r2, [r3, #80]	@ 0x50
 80029c0:	4b56      	ldr	r3, [pc, #344]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029c4:	4b55      	ldr	r3, [pc, #340]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029c6:	4959      	ldr	r1, [pc, #356]	@ (8002b2c <HAL_RCC_OscConfig+0x690>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7ff f86e 	bl	8001ab4 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029dc:	e009      	b.n	80029f2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7ff f869 	bl	8001ab4 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	4a51      	ldr	r2, [pc, #324]	@ (8002b30 <HAL_RCC_OscConfig+0x694>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0ca      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 80029f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d0ef      	beq.n	80029de <HAL_RCC_OscConfig+0x542>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7ff f858 	bl	8001ab4 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a08:	e009      	b.n	8002a1e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7ff f853 	bl	8001ab4 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	4a46      	ldr	r2, [pc, #280]	@ (8002b30 <HAL_RCC_OscConfig+0x694>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0b4      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	d1ef      	bne.n	8002a0a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a2a:	2323      	movs	r3, #35	@ 0x23
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a38:	4b38      	ldr	r3, [pc, #224]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a3a:	493e      	ldr	r1, [pc, #248]	@ (8002b34 <HAL_RCC_OscConfig+0x698>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d100      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5ae>
 8002a48:	e09d      	b.n	8002b86 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d100      	bne.n	8002a52 <HAL_RCC_OscConfig+0x5b6>
 8002a50:	e076      	b.n	8002b40 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d145      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a60:	4935      	ldr	r1, [pc, #212]	@ (8002b38 <HAL_RCC_OscConfig+0x69c>)
 8002a62:	400a      	ands	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7ff f825 	bl	8001ab4 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff f820 	bl	8001ab4 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e082      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a82:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	049b      	lsls	r3, r3, #18
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a2a      	ldr	r2, [pc, #168]	@ (8002b3c <HAL_RCC_OscConfig+0x6a0>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002ab4:	2180      	movs	r1, #128	@ 0x80
 8002ab6:	0449      	lsls	r1, r1, #17
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fffa 	bl	8001ab4 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fff5 	bl	8001ab4 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e057      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	049b      	lsls	r3, r3, #18
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
 8002ae4:	e04f      	b.n	8002b86 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002aec:	4912      	ldr	r1, [pc, #72]	@ (8002b38 <HAL_RCC_OscConfig+0x69c>)
 8002aee:	400a      	ands	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe ffdf 	bl	8001ab4 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe ffda 	bl	8001ab4 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e03c      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b0e:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_OscConfig+0x680>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	4013      	ands	r3, r2
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x660>
 8002b1a:	e034      	b.n	8002b86 <HAL_RCC_OscConfig+0x6ea>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	ffff1fff 	.word	0xffff1fff
 8002b24:	fffffeff 	.word	0xfffffeff
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	fffffbff 	.word	0xfffffbff
 8002b30:	00001388 	.word	0x00001388
 8002b34:	efffffff 	.word	0xefffffff
 8002b38:	feffffff 	.word	0xfeffffff
 8002b3c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_RCC_OscConfig+0x6f4>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	2380      	movs	r3, #128	@ 0x80
 8002b56:	025b      	lsls	r3, r3, #9
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d10f      	bne.n	8002b82 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	23f0      	movs	r3, #240	@ 0xf0
 8002b66:	039b      	lsls	r3, r3, #14
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	23c0      	movs	r3, #192	@ 0xc0
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b00a      	add	sp, #40	@ 0x28
 8002b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e128      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b96      	ldr	r3, [pc, #600]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d91e      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b93      	ldr	r3, [pc, #588]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4b90      	ldr	r3, [pc, #576]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe ff74 	bl	8001ab4 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd2:	f7fe ff6f 	bl	8001ab4 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4a8a      	ldr	r2, [pc, #552]	@ (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e109      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b87      	ldr	r3, [pc, #540]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfe:	4b83      	ldr	r3, [pc, #524]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	22f0      	movs	r2, #240	@ 0xf0
 8002c04:	4393      	bics	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x8a>
 8002c1c:	e089      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c26:	4b79      	ldr	r3, [pc, #484]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d120      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0e1      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3e:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	049b      	lsls	r3, r3, #18
 8002c46:	4013      	ands	r3, r2
 8002c48:	d114      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0d5      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	4b6d      	ldr	r3, [pc, #436]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0ca      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c64:	4b69      	ldr	r3, [pc, #420]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0c2      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c74:	4b65      	ldr	r3, [pc, #404]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4b62      	ldr	r3, [pc, #392]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe ff14 	bl	8001ab4 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7fe ff0b 	bl	8001ab4 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a58      	ldr	r2, [pc, #352]	@ (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0a5      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cae:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d1ef      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x106>
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	e009      	b.n	8002cda <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	f7fe fef5 	bl	8001ab4 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e08f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cda:	4b4c      	ldr	r3, [pc, #304]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x132>
 8002ce6:	e024      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d11b      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf0:	e009      	b.n	8002d06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fe fedf 	bl	8001ab4 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4a42      	ldr	r2, [pc, #264]	@ (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e079      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d06:	4b41      	ldr	r3, [pc, #260]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x15e>
 8002d12:	e00e      	b.n	8002d32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe fece 	bl	8001ab4 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e068      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d28:	4b38      	ldr	r3, [pc, #224]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	220c      	movs	r2, #12
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d32:	4b34      	ldr	r3, [pc, #208]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d21e      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d40:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4393      	bics	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d52:	f7fe feaf 	bl	8001ab4 <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	e009      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe feaa 	bl	8001ab4 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	4a28      	ldr	r2, [pc, #160]	@ (8002e08 <HAL_RCC_ClockConfig+0x274>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e044      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d70:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <HAL_RCC_ClockConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d1ee      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a20      	ldr	r2, [pc, #128]	@ (8002e10 <HAL_RCC_ClockConfig+0x27c>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2208      	movs	r2, #8
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da6:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	@ (8002e14 <HAL_RCC_ClockConfig+0x280>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	00da      	lsls	r2, r3, #3
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dbc:	f000 f832 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002dc0:	0001      	movs	r1, r0
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_RCC_ClockConfig+0x278>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	220f      	movs	r2, #15
 8002dca:	4013      	ands	r3, r2
 8002dcc:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <HAL_RCC_ClockConfig+0x284>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	40da      	lsrs	r2, r3
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_ClockConfig+0x288>)
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dd8:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <HAL_RCC_ClockConfig+0x28c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	250b      	movs	r5, #11
 8002dde:	197c      	adds	r4, r7, r5
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7fe fe21 	bl	8001a28 <HAL_InitTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002dea:	197b      	adds	r3, r7, r5
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bdb0      	pop	{r4, r5, r7, pc}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	40022000 	.word	0x40022000
 8002e08:	00001388 	.word	0x00001388
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	fffff8ff 	.word	0xfffff8ff
 8002e14:	ffffc7ff 	.word	0xffffc7ff
 8002e18:	08005f1c 	.word	0x08005f1c
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b08e      	sub	sp, #56	@ 0x38
 8002e28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e32:	230c      	movs	r3, #12
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d014      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e3a:	d900      	bls.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1a>
 8002e3c:	e07b      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x112>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x24>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e46:	e076      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e48:	4b44      	ldr	r3, [pc, #272]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e52:	4b43      	ldr	r3, [pc, #268]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e56:	e07c      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002e58:	4b42      	ldr	r3, [pc, #264]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e5a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e5c:	e079      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b42      	ldr	r3, [pc, #264]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e62:	e076      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	0c9a      	lsrs	r2, r3, #18
 8002e68:	230f      	movs	r3, #15
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x148>)
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	0d9a      	lsrs	r2, r3, #22
 8002e76:	2303      	movs	r3, #3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b37      	ldr	r3, [pc, #220]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	025b      	lsls	r3, r3, #9
 8002e86:	4013      	ands	r3, r2
 8002e88:	d01a      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	4a35      	ldr	r2, [pc, #212]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x144>)
 8002e94:	2300      	movs	r3, #0
 8002e96:	69b8      	ldr	r0, [r7, #24]
 8002e98:	69f9      	ldr	r1, [r7, #28]
 8002e9a:	f7fd fadd 	bl	8000458 <__aeabi_lmul>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	000b      	movs	r3, r1
 8002ea2:	0010      	movs	r0, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f7fd fab1 	bl	8000418 <__aeabi_uldivmod>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	000b      	movs	r3, r1
 8002eba:	0013      	movs	r3, r2
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ebe:	e037      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ec0:	4b26      	ldr	r3, [pc, #152]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d01a      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4a23      	ldr	r2, [pc, #140]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	f7fd fabd 	bl	8000458 <__aeabi_lmul>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	000b      	movs	r3, r1
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f7fd fa91 	bl	8000418 <__aeabi_uldivmod>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	000b      	movs	r3, r1
 8002efa:	0013      	movs	r3, r2
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002efe:	e017      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f02:	0018      	movs	r0, r3
 8002f04:	2300      	movs	r3, #0
 8002f06:	0019      	movs	r1, r3
 8002f08:	4a16      	ldr	r2, [pc, #88]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f7fd faa4 	bl	8000458 <__aeabi_lmul>
 8002f10:	0002      	movs	r2, r0
 8002f12:	000b      	movs	r3, r1
 8002f14:	0010      	movs	r0, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	001c      	movs	r4, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	001d      	movs	r5, r3
 8002f20:	0022      	movs	r2, r4
 8002f22:	002b      	movs	r3, r5
 8002f24:	f7fd fa78 	bl	8000418 <__aeabi_uldivmod>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	000b      	movs	r3, r1
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f34:	e00d      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f36:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0b5b      	lsrs	r3, r3, #13
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	4013      	ands	r3, r2
 8002f40:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	3301      	adds	r3, #1
 8002f46:	2280      	movs	r2, #128	@ 0x80
 8002f48:	0212      	lsls	r2, r2, #8
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f50:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b00e      	add	sp, #56	@ 0x38
 8002f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	003d0900 	.word	0x003d0900
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200
 8002f6c:	08005f34 	.word	0x08005f34

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b02      	ldr	r3, [pc, #8]	@ (8002f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	20000000 	.word	0x20000000

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f88:	f7ff fff2 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f8c:	0001      	movs	r1, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	2207      	movs	r2, #7
 8002f96:	4013      	ands	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	000b      	movs	r3, r1
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08005f2c 	.word	0x08005f2c

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	0001      	movs	r1, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	40d9      	lsrs	r1, r3
 8002fca:	000b      	movs	r3, r1
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08005f2c 	.word	0x08005f2c

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2017      	movs	r0, #23
 8002fe6:	183b      	adds	r3, r7, r0
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d100      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002ff6:	e0c7      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff8:	4b84      	ldr	r3, [pc, #528]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	055b      	lsls	r3, r3, #21
 8003000:	4013      	ands	r3, r2
 8003002:	d109      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b81      	ldr	r3, [pc, #516]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003008:	4b80      	ldr	r3, [pc, #512]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800300a:	2180      	movs	r1, #128	@ 0x80
 800300c:	0549      	lsls	r1, r1, #21
 800300e:	430a      	orrs	r2, r1
 8003010:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003012:	183b      	adds	r3, r7, r0
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b7d      	ldr	r3, [pc, #500]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4013      	ands	r3, r2
 8003022:	d11a      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003024:	4b7a      	ldr	r3, [pc, #488]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800302a:	2180      	movs	r1, #128	@ 0x80
 800302c:	0049      	lsls	r1, r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fd3f 	bl	8001ab4 <HAL_GetTick>
 8003036:	0003      	movs	r3, r0
 8003038:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	e008      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe fd3a 	bl	8001ab4 <HAL_GetTick>
 8003040:	0002      	movs	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	@ 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0d9      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4013      	ands	r3, r2
 8003058:	d0f0      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800305a:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	23c0      	movs	r3, #192	@ 0xc0
 8003060:	039b      	lsls	r3, r3, #14
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	23c0      	movs	r3, #192	@ 0xc0
 800306c:	039b      	lsls	r3, r3, #14
 800306e:	4013      	ands	r3, r2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d013      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	23c0      	movs	r3, #192	@ 0xc0
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	401a      	ands	r2, r3
 8003080:	23c0      	movs	r3, #192	@ 0xc0
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	429a      	cmp	r2, r3
 8003086:	d10a      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003088:	4b60      	ldr	r3, [pc, #384]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	@ 0x80
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	401a      	ands	r2, r3
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	429a      	cmp	r2, r3
 8003098:	d101      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0b1      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800309e:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030a2:	23c0      	movs	r3, #192	@ 0xc0
 80030a4:	029b      	lsls	r3, r3, #10
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	23c0      	movs	r3, #192	@ 0xc0
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d033      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2220      	movs	r2, #32
 80030c6:	4013      	ands	r3, r2
 80030c8:	d02e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030ca:	4b50      	ldr	r3, [pc, #320]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ce:	4a51      	ldr	r2, [pc, #324]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d4:	4b4d      	ldr	r3, [pc, #308]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030d8:	4b4c      	ldr	r3, [pc, #304]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	0309      	lsls	r1, r1, #12
 80030de:	430a      	orrs	r2, r1
 80030e0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030e2:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030e6:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030e8:	494b      	ldr	r1, [pc, #300]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80030ee:	4b47      	ldr	r3, [pc, #284]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	2380      	movs	r3, #128	@ 0x80
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	d014      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fcd9 	bl	8001ab4 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003106:	e009      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe fcd4 	bl	8001ab4 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	4a42      	ldr	r2, [pc, #264]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e072      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800311c:	4b3b      	ldr	r3, [pc, #236]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800311e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4013      	ands	r3, r2
 8003126:	d0ef      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2220      	movs	r2, #32
 800312e:	4013      	ands	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	23c0      	movs	r3, #192	@ 0xc0
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	401a      	ands	r2, r3
 800313c:	23c0      	movs	r3, #192	@ 0xc0
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	429a      	cmp	r2, r3
 8003142:	d10c      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003144:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a35      	ldr	r2, [pc, #212]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	23c0      	movs	r3, #192	@ 0xc0
 8003154:	039b      	lsls	r3, r3, #14
 8003156:	401a      	ands	r2, r3
 8003158:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	4b2b      	ldr	r3, [pc, #172]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003160:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	23c0      	movs	r3, #192	@ 0xc0
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	401a      	ands	r2, r3
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800316e:	430a      	orrs	r2, r1
 8003170:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003172:	2317      	movs	r3, #23
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800317e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003182:	4928      	ldr	r1, [pc, #160]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003184:	400a      	ands	r2, r1
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2202      	movs	r2, #2
 800318e:	4013      	ands	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003192:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003196:	220c      	movs	r2, #12
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2204      	movs	r2, #4
 80031ac:	4013      	ands	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031b0:	4b16      	ldr	r3, [pc, #88]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2208      	movs	r2, #8
 80031ca:	4013      	ands	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ce:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	4a16      	ldr	r2, [pc, #88]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031de:	430a      	orrs	r2, r1
 80031e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2280      	movs	r2, #128	@ 0x80
 80031e8:	4013      	ands	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80031ec:	4b07      	ldr	r3, [pc, #28]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b04      	ldr	r3, [pc, #16]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b006      	add	sp, #24
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
 8003214:	fffcffff 	.word	0xfffcffff
 8003218:	fff7ffff 	.word	0xfff7ffff
 800321c:	00001388 	.word	0x00001388
 8003220:	ffcfffff 	.word	0xffcfffff
 8003224:	efffffff 	.word	0xefffffff
 8003228:	fffff3ff 	.word	0xfffff3ff
 800322c:	ffffcfff 	.word	0xffffcfff
 8003230:	fff3ffff 	.word	0xfff3ffff

08003234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e044      	b.n	80032d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2278      	movs	r2, #120	@ 0x78
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f7fe fa5f 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2224      	movs	r2, #36	@ 0x24
 8003262:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2101      	movs	r1, #1
 8003270:	438a      	bics	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f000 fbd2 	bl	8003a20 <UART_SetConfig>
 800327c:	0003      	movs	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e024      	b.n	80032d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 fe0f 	bl	8003eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	490d      	ldr	r1, [pc, #52]	@ (80032d8 <HAL_UART_Init+0xa4>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	212a      	movs	r1, #42	@ 0x2a
 80032b2:	438a      	bics	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fea7 	bl	800401c <UART_CheckIdleState>
 80032ce:	0003      	movs	r3, r0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	ffffb7ff 	.word	0xffffb7ff

080032dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	@ 0x28
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	1dbb      	adds	r3, r7, #6
 80032ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d000      	beq.n	80032f6 <HAL_UART_Transmit+0x1a>
 80032f4:	e08c      	b.n	8003410 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_UART_Transmit+0x28>
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e084      	b.n	8003412 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	015b      	lsls	r3, r3, #5
 8003310:	429a      	cmp	r2, r3
 8003312:	d109      	bne.n	8003328 <HAL_UART_Transmit+0x4c>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	d001      	beq.n	8003328 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e074      	b.n	8003412 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2284      	movs	r2, #132	@ 0x84
 800332c:	2100      	movs	r1, #0
 800332e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2221      	movs	r2, #33	@ 0x21
 8003334:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003336:	f7fe fbbd 	bl	8001ab4 <HAL_GetTick>
 800333a:	0003      	movs	r3, r0
 800333c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1dba      	adds	r2, r7, #6
 8003342:	2150      	movs	r1, #80	@ 0x50
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1dba      	adds	r2, r7, #6
 800334c:	2152      	movs	r1, #82	@ 0x52
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	015b      	lsls	r3, r3, #5
 800335a:	429a      	cmp	r2, r3
 800335c:	d108      	bne.n	8003370 <HAL_UART_Transmit+0x94>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e003      	b.n	8003378 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003378:	e02f      	b.n	80033da <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	0013      	movs	r3, r2
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	f000 fef0 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d004      	beq.n	800339a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e03b      	b.n	8003412 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	001a      	movs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	05d2      	lsls	r2, r2, #23
 80033ac:	0dd2      	lsrs	r2, r2, #23
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	3302      	adds	r3, #2
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	e007      	b.n	80033c8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2252      	movs	r2, #82	@ 0x52
 80033cc:	5a9b      	ldrh	r3, [r3, r2]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b299      	uxth	r1, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2252      	movs	r2, #82	@ 0x52
 80033d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2252      	movs	r2, #82	@ 0x52
 80033de:	5a9b      	ldrh	r3, [r3, r2]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1c9      	bne.n	800337a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	0013      	movs	r3, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	2140      	movs	r1, #64	@ 0x40
 80033f4:	f000 feba 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d004      	beq.n	8003406 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e005      	b.n	8003412 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b008      	add	sp, #32
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b0ab      	sub	sp, #172	@ 0xac
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	22a4      	movs	r2, #164	@ 0xa4
 800342c:	18b9      	adds	r1, r7, r2
 800342e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	20a0      	movs	r0, #160	@ 0xa0
 8003438:	1839      	adds	r1, r7, r0
 800343a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	219c      	movs	r1, #156	@ 0x9c
 8003444:	1879      	adds	r1, r7, r1
 8003446:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003448:	0011      	movs	r1, r2
 800344a:	18bb      	adds	r3, r7, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a99      	ldr	r2, [pc, #612]	@ (80036b4 <HAL_UART_IRQHandler+0x298>)
 8003450:	4013      	ands	r3, r2
 8003452:	2298      	movs	r2, #152	@ 0x98
 8003454:	18bc      	adds	r4, r7, r2
 8003456:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003458:	18bb      	adds	r3, r7, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d114      	bne.n	800348a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003460:	187b      	adds	r3, r7, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2220      	movs	r2, #32
 8003466:	4013      	ands	r3, r2
 8003468:	d00f      	beq.n	800348a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800346a:	183b      	adds	r3, r7, r0
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2220      	movs	r2, #32
 8003470:	4013      	ands	r3, r2
 8003472:	d00a      	beq.n	800348a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003478:	2b00      	cmp	r3, #0
 800347a:	d100      	bne.n	800347e <HAL_UART_IRQHandler+0x62>
 800347c:	e2a0      	b.n	80039c0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	0010      	movs	r0, r2
 8003486:	4798      	blx	r3
      }
      return;
 8003488:	e29a      	b.n	80039c0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800348a:	2398      	movs	r3, #152	@ 0x98
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d100      	bne.n	8003496 <HAL_UART_IRQHandler+0x7a>
 8003494:	e114      	b.n	80036c0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003496:	239c      	movs	r3, #156	@ 0x9c
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2201      	movs	r2, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034a2:	23a0      	movs	r3, #160	@ 0xa0
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a83      	ldr	r2, [pc, #524]	@ (80036b8 <HAL_UART_IRQHandler+0x29c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	d100      	bne.n	80034b0 <HAL_UART_IRQHandler+0x94>
 80034ae:	e107      	b.n	80036c0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b0:	23a4      	movs	r3, #164	@ 0xa4
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4013      	ands	r3, r2
 80034ba:	d012      	beq.n	80034e2 <HAL_UART_IRQHandler+0xc6>
 80034bc:	23a0      	movs	r3, #160	@ 0xa0
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2284      	movs	r2, #132	@ 0x84
 80034d6:	589b      	ldr	r3, [r3, r2]
 80034d8:	2201      	movs	r2, #1
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2184      	movs	r1, #132	@ 0x84
 80034e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e2:	23a4      	movs	r3, #164	@ 0xa4
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2202      	movs	r2, #2
 80034ea:	4013      	ands	r3, r2
 80034ec:	d011      	beq.n	8003512 <HAL_UART_IRQHandler+0xf6>
 80034ee:	239c      	movs	r3, #156	@ 0x9c
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	d00b      	beq.n	8003512 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2202      	movs	r2, #2
 8003500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2284      	movs	r2, #132	@ 0x84
 8003506:	589b      	ldr	r3, [r3, r2]
 8003508:	2204      	movs	r2, #4
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2184      	movs	r1, #132	@ 0x84
 8003510:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003512:	23a4      	movs	r3, #164	@ 0xa4
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2204      	movs	r2, #4
 800351a:	4013      	ands	r3, r2
 800351c:	d011      	beq.n	8003542 <HAL_UART_IRQHandler+0x126>
 800351e:	239c      	movs	r3, #156	@ 0x9c
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d00b      	beq.n	8003542 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2204      	movs	r2, #4
 8003530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2284      	movs	r2, #132	@ 0x84
 8003536:	589b      	ldr	r3, [r3, r2]
 8003538:	2202      	movs	r2, #2
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2184      	movs	r1, #132	@ 0x84
 8003540:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003542:	23a4      	movs	r3, #164	@ 0xa4
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2208      	movs	r2, #8
 800354a:	4013      	ands	r3, r2
 800354c:	d017      	beq.n	800357e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800354e:	23a0      	movs	r3, #160	@ 0xa0
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2220      	movs	r2, #32
 8003556:	4013      	ands	r3, r2
 8003558:	d105      	bne.n	8003566 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800355a:	239c      	movs	r3, #156	@ 0x9c
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003564:	d00b      	beq.n	800357e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2208      	movs	r2, #8
 800356c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2284      	movs	r2, #132	@ 0x84
 8003572:	589b      	ldr	r3, [r3, r2]
 8003574:	2208      	movs	r2, #8
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2184      	movs	r1, #132	@ 0x84
 800357c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800357e:	23a4      	movs	r3, #164	@ 0xa4
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4013      	ands	r3, r2
 800358a:	d013      	beq.n	80035b4 <HAL_UART_IRQHandler+0x198>
 800358c:	23a0      	movs	r3, #160	@ 0xa0
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	04db      	lsls	r3, r3, #19
 8003596:	4013      	ands	r3, r2
 8003598:	d00c      	beq.n	80035b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	0112      	lsls	r2, r2, #4
 80035a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2284      	movs	r2, #132	@ 0x84
 80035a8:	589b      	ldr	r3, [r3, r2]
 80035aa:	2220      	movs	r2, #32
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2184      	movs	r1, #132	@ 0x84
 80035b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2284      	movs	r2, #132	@ 0x84
 80035b8:	589b      	ldr	r3, [r3, r2]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d100      	bne.n	80035c0 <HAL_UART_IRQHandler+0x1a4>
 80035be:	e201      	b.n	80039c4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035c0:	23a4      	movs	r3, #164	@ 0xa4
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2220      	movs	r2, #32
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035cc:	23a0      	movs	r3, #160	@ 0xa0
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2220      	movs	r2, #32
 80035d4:	4013      	ands	r3, r2
 80035d6:	d008      	beq.n	80035ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	0010      	movs	r0, r2
 80035e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2284      	movs	r2, #132	@ 0x84
 80035ee:	589b      	ldr	r3, [r3, r2]
 80035f0:	2194      	movs	r1, #148	@ 0x94
 80035f2:	187a      	adds	r2, r7, r1
 80035f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	4013      	ands	r3, r2
 8003600:	2b40      	cmp	r3, #64	@ 0x40
 8003602:	d004      	beq.n	800360e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003604:	187b      	adds	r3, r7, r1
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2228      	movs	r2, #40	@ 0x28
 800360a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360c:	d047      	beq.n	800369e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 fed9 	bl	80043c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2240      	movs	r2, #64	@ 0x40
 800361e:	4013      	ands	r3, r2
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d137      	bne.n	8003694 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003624:	f3ef 8310 	mrs	r3, PRIMASK
 8003628:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800362a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362c:	2090      	movs	r0, #144	@ 0x90
 800362e:	183a      	adds	r2, r7, r0
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	2301      	movs	r3, #1
 8003634:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	438a      	bics	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	183b      	adds	r3, r7, r0
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <HAL_UART_IRQHandler+0x2a0>)
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003670:	0018      	movs	r0, r3
 8003672:	f7fe fc49 	bl	8001f08 <HAL_DMA_Abort_IT>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d01a      	beq.n	80036b0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003684:	0018      	movs	r0, r3
 8003686:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e012      	b.n	80036b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f9bf 	bl	8003a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003692:	e00d      	b.n	80036b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f9ba 	bl	8003a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e008      	b.n	80036b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f9b5 	bl	8003a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2284      	movs	r2, #132	@ 0x84
 80036aa:	2100      	movs	r1, #0
 80036ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036ae:	e189      	b.n	80039c4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80036b2:	e187      	b.n	80039c4 <HAL_UART_IRQHandler+0x5a8>
 80036b4:	0000080f 	.word	0x0000080f
 80036b8:	04000120 	.word	0x04000120
 80036bc:	08004687 	.word	0x08004687

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d000      	beq.n	80036ca <HAL_UART_IRQHandler+0x2ae>
 80036c8:	e13b      	b.n	8003942 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036ca:	23a4      	movs	r3, #164	@ 0xa4
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2210      	movs	r2, #16
 80036d2:	4013      	ands	r3, r2
 80036d4:	d100      	bne.n	80036d8 <HAL_UART_IRQHandler+0x2bc>
 80036d6:	e134      	b.n	8003942 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036d8:	23a0      	movs	r3, #160	@ 0xa0
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2210      	movs	r2, #16
 80036e0:	4013      	ands	r3, r2
 80036e2:	d100      	bne.n	80036e6 <HAL_UART_IRQHandler+0x2ca>
 80036e4:	e12d      	b.n	8003942 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2240      	movs	r2, #64	@ 0x40
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d000      	beq.n	80036fe <HAL_UART_IRQHandler+0x2e2>
 80036fc:	e0a1      	b.n	8003842 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	217e      	movs	r1, #126	@ 0x7e
 8003708:	187b      	adds	r3, r7, r1
 800370a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800370c:	187b      	adds	r3, r7, r1
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d100      	bne.n	8003716 <HAL_UART_IRQHandler+0x2fa>
 8003714:	e158      	b.n	80039c8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2258      	movs	r2, #88	@ 0x58
 800371a:	5a9b      	ldrh	r3, [r3, r2]
 800371c:	187a      	adds	r2, r7, r1
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d300      	bcc.n	8003726 <HAL_UART_IRQHandler+0x30a>
 8003724:	e150      	b.n	80039c8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	187a      	adds	r2, r7, r1
 800372a:	215a      	movs	r1, #90	@ 0x5a
 800372c:	8812      	ldrh	r2, [r2, #0]
 800372e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	4013      	ands	r3, r2
 800373c:	d16f      	bne.n	800381e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373e:	f3ef 8310 	mrs	r3, PRIMASK
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003746:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003748:	2301      	movs	r3, #1
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374e:	f383 8810 	msr	PRIMASK, r3
}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	499e      	ldr	r1, [pc, #632]	@ (80039d8 <HAL_UART_IRQHandler+0x5bc>)
 8003760:	400a      	ands	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003766:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003770:	f3ef 8310 	mrs	r3, PRIMASK
 8003774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	677b      	str	r3, [r7, #116]	@ 0x74
 800377a:	2301      	movs	r3, #1
 800377c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	438a      	bics	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003798:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800379c:	f383 8810 	msr	PRIMASK, r3
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80037a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80037ac:	2301      	movs	r3, #1
 80037ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2140      	movs	r1, #64	@ 0x40
 80037c4:	438a      	bics	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	2120      	movs	r1, #32
 80037da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e2:	f3ef 8310 	mrs	r3, PRIMASK
 80037e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80037e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ec:	2301      	movs	r3, #1
 80037ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037f2:	f383 8810 	msr	PRIMASK, r3
}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2110      	movs	r1, #16
 8003804:	438a      	bics	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003818:	0018      	movs	r0, r3
 800381a:	f7fe fb35 	bl	8001e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2258      	movs	r2, #88	@ 0x58
 8003828:	5a9a      	ldrh	r2, [r3, r2]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	215a      	movs	r1, #90	@ 0x5a
 800382e:	5a5b      	ldrh	r3, [r3, r1]
 8003830:	b29b      	uxth	r3, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0011      	movs	r1, r2
 800383a:	0018      	movs	r0, r3
 800383c:	f7fc ffca 	bl	80007d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003840:	e0c2      	b.n	80039c8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2258      	movs	r2, #88	@ 0x58
 8003846:	5a99      	ldrh	r1, [r3, r2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	225a      	movs	r2, #90	@ 0x5a
 800384c:	5a9b      	ldrh	r3, [r3, r2]
 800384e:	b29a      	uxth	r2, r3
 8003850:	208e      	movs	r0, #142	@ 0x8e
 8003852:	183b      	adds	r3, r7, r0
 8003854:	1a8a      	subs	r2, r1, r2
 8003856:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	225a      	movs	r2, #90	@ 0x5a
 800385c:	5a9b      	ldrh	r3, [r3, r2]
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d100      	bne.n	8003866 <HAL_UART_IRQHandler+0x44a>
 8003864:	e0b2      	b.n	80039cc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003866:	183b      	adds	r3, r7, r0
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d100      	bne.n	8003870 <HAL_UART_IRQHandler+0x454>
 800386e:	e0ad      	b.n	80039cc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003870:	f3ef 8310 	mrs	r3, PRIMASK
 8003874:	60fb      	str	r3, [r7, #12]
  return(result);
 8003876:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003878:	2488      	movs	r4, #136	@ 0x88
 800387a:	193a      	adds	r2, r7, r4
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	2301      	movs	r3, #1
 8003880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			@ (mov r8, r8)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4951      	ldr	r1, [pc, #324]	@ (80039dc <HAL_UART_IRQHandler+0x5c0>)
 8003896:	400a      	ands	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	193b      	adds	r3, r7, r4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	2484      	movs	r4, #132	@ 0x84
 80038b2:	193a      	adds	r2, r7, r4
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	438a      	bics	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	193b      	adds	r3, r7, r4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	2120      	movs	r1, #32
 80038e6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fc:	2480      	movs	r4, #128	@ 0x80
 80038fe:	193a      	adds	r2, r7, r4
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	2301      	movs	r3, #1
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	f383 8810 	msr	PRIMASK, r3
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2110      	movs	r1, #16
 800391a:	438a      	bics	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	193b      	adds	r3, r7, r4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003932:	183b      	adds	r3, r7, r0
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0011      	movs	r1, r2
 800393a:	0018      	movs	r0, r3
 800393c:	f7fc ff4a 	bl	80007d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003940:	e044      	b.n	80039cc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003942:	23a4      	movs	r3, #164	@ 0xa4
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	035b      	lsls	r3, r3, #13
 800394c:	4013      	ands	r3, r2
 800394e:	d010      	beq.n	8003972 <HAL_UART_IRQHandler+0x556>
 8003950:	239c      	movs	r3, #156	@ 0x9c
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	2380      	movs	r3, #128	@ 0x80
 8003958:	03db      	lsls	r3, r3, #15
 800395a:	4013      	ands	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2280      	movs	r2, #128	@ 0x80
 8003964:	0352      	lsls	r2, r2, #13
 8003966:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fecd 	bl	800470a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003970:	e02f      	b.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003972:	23a4      	movs	r3, #164	@ 0xa4
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2280      	movs	r2, #128	@ 0x80
 800397a:	4013      	ands	r3, r2
 800397c:	d00f      	beq.n	800399e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800397e:	23a0      	movs	r3, #160	@ 0xa0
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2280      	movs	r2, #128	@ 0x80
 8003986:	4013      	ands	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01e      	beq.n	80039d0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	0010      	movs	r0, r2
 800399a:	4798      	blx	r3
    }
    return;
 800399c:	e018      	b.n	80039d0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800399e:	23a4      	movs	r3, #164	@ 0xa4
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2240      	movs	r2, #64	@ 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
 80039aa:	23a0      	movs	r3, #160	@ 0xa0
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2240      	movs	r2, #64	@ 0x40
 80039b2:	4013      	ands	r3, r2
 80039b4:	d00d      	beq.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 fe7b 	bl	80046b4 <UART_EndTransmit_IT>
    return;
 80039be:	e008      	b.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	e006      	b.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80039c4:	46c0      	nop			@ (mov r8, r8)
 80039c6:	e004      	b.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	e002      	b.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	e000      	b.n	80039d2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80039d0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b02b      	add	sp, #172	@ 0xac
 80039d6:	bd90      	pop	{r4, r7, pc}
 80039d8:	fffffeff 	.word	0xfffffeff
 80039dc:	fffffedf 	.word	0xfffffedf

080039e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b08e      	sub	sp, #56	@ 0x38
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a28:	231a      	movs	r3, #26
 8003a2a:	2218      	movs	r2, #24
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	19db      	adds	r3, r3, r7
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4ab4      	ldr	r2, [pc, #720]	@ (8003d24 <UART_SetConfig+0x304>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4aaf      	ldr	r2, [pc, #700]	@ (8003d28 <UART_SetConfig+0x308>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4aa9      	ldr	r2, [pc, #676]	@ (8003d2c <UART_SetConfig+0x30c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a90:	4313      	orrs	r3, r2
 8003a92:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	4aa5      	ldr	r2, [pc, #660]	@ (8003d30 <UART_SetConfig+0x310>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4aa1      	ldr	r2, [pc, #644]	@ (8003d34 <UART_SetConfig+0x314>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d131      	bne.n	8003b18 <UART_SetConfig+0xf8>
 8003ab4:	4ba0      	ldr	r3, [pc, #640]	@ (8003d38 <UART_SetConfig+0x318>)
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab8:	220c      	movs	r2, #12
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	d01d      	beq.n	8003afc <UART_SetConfig+0xdc>
 8003ac0:	d823      	bhi.n	8003b0a <UART_SetConfig+0xea>
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d00c      	beq.n	8003ae0 <UART_SetConfig+0xc0>
 8003ac6:	d820      	bhi.n	8003b0a <UART_SetConfig+0xea>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <UART_SetConfig+0xb2>
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d00e      	beq.n	8003aee <UART_SetConfig+0xce>
 8003ad0:	e01b      	b.n	8003b0a <UART_SetConfig+0xea>
 8003ad2:	231b      	movs	r3, #27
 8003ad4:	2218      	movs	r2, #24
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	19db      	adds	r3, r3, r7
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e065      	b.n	8003bac <UART_SetConfig+0x18c>
 8003ae0:	231b      	movs	r3, #27
 8003ae2:	2218      	movs	r2, #24
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	19db      	adds	r3, r3, r7
 8003ae8:	2202      	movs	r2, #2
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e05e      	b.n	8003bac <UART_SetConfig+0x18c>
 8003aee:	231b      	movs	r3, #27
 8003af0:	2218      	movs	r2, #24
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	2204      	movs	r2, #4
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e057      	b.n	8003bac <UART_SetConfig+0x18c>
 8003afc:	231b      	movs	r3, #27
 8003afe:	2218      	movs	r2, #24
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	2208      	movs	r2, #8
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e050      	b.n	8003bac <UART_SetConfig+0x18c>
 8003b0a:	231b      	movs	r3, #27
 8003b0c:	2218      	movs	r2, #24
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	2210      	movs	r2, #16
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e049      	b.n	8003bac <UART_SetConfig+0x18c>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a83      	ldr	r2, [pc, #524]	@ (8003d2c <UART_SetConfig+0x30c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d13e      	bne.n	8003ba0 <UART_SetConfig+0x180>
 8003b22:	4b85      	ldr	r3, [pc, #532]	@ (8003d38 <UART_SetConfig+0x318>)
 8003b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b26:	23c0      	movs	r3, #192	@ 0xc0
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	22c0      	movs	r2, #192	@ 0xc0
 8003b2e:	0112      	lsls	r2, r2, #4
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d027      	beq.n	8003b84 <UART_SetConfig+0x164>
 8003b34:	22c0      	movs	r2, #192	@ 0xc0
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d82a      	bhi.n	8003b92 <UART_SetConfig+0x172>
 8003b3c:	2280      	movs	r2, #128	@ 0x80
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d011      	beq.n	8003b68 <UART_SetConfig+0x148>
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	0112      	lsls	r2, r2, #4
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d822      	bhi.n	8003b92 <UART_SetConfig+0x172>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <UART_SetConfig+0x13a>
 8003b50:	2280      	movs	r2, #128	@ 0x80
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <UART_SetConfig+0x156>
 8003b58:	e01b      	b.n	8003b92 <UART_SetConfig+0x172>
 8003b5a:	231b      	movs	r3, #27
 8003b5c:	2218      	movs	r2, #24
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	19db      	adds	r3, r3, r7
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e021      	b.n	8003bac <UART_SetConfig+0x18c>
 8003b68:	231b      	movs	r3, #27
 8003b6a:	2218      	movs	r2, #24
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	2202      	movs	r2, #2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e01a      	b.n	8003bac <UART_SetConfig+0x18c>
 8003b76:	231b      	movs	r3, #27
 8003b78:	2218      	movs	r2, #24
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	2204      	movs	r2, #4
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e013      	b.n	8003bac <UART_SetConfig+0x18c>
 8003b84:	231b      	movs	r3, #27
 8003b86:	2218      	movs	r2, #24
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	19db      	adds	r3, r3, r7
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e00c      	b.n	8003bac <UART_SetConfig+0x18c>
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e005      	b.n	8003bac <UART_SetConfig+0x18c>
 8003ba0:	231b      	movs	r3, #27
 8003ba2:	2218      	movs	r2, #24
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	2210      	movs	r2, #16
 8003baa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8003d2c <UART_SetConfig+0x30c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d000      	beq.n	8003bb8 <UART_SetConfig+0x198>
 8003bb6:	e084      	b.n	8003cc2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bb8:	231b      	movs	r3, #27
 8003bba:	2218      	movs	r2, #24
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d01d      	beq.n	8003c02 <UART_SetConfig+0x1e2>
 8003bc6:	dc20      	bgt.n	8003c0a <UART_SetConfig+0x1ea>
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d015      	beq.n	8003bf8 <UART_SetConfig+0x1d8>
 8003bcc:	dc1d      	bgt.n	8003c0a <UART_SetConfig+0x1ea>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <UART_SetConfig+0x1b8>
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d005      	beq.n	8003be2 <UART_SetConfig+0x1c2>
 8003bd6:	e018      	b.n	8003c0a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7ff f9d4 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003be0:	e01c      	b.n	8003c1c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be2:	4b55      	ldr	r3, [pc, #340]	@ (8003d38 <UART_SetConfig+0x318>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2210      	movs	r2, #16
 8003be8:	4013      	ands	r3, r2
 8003bea:	d002      	beq.n	8003bf2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003bec:	4b53      	ldr	r3, [pc, #332]	@ (8003d3c <UART_SetConfig+0x31c>)
 8003bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bf0:	e014      	b.n	8003c1c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003bf2:	4b53      	ldr	r3, [pc, #332]	@ (8003d40 <UART_SetConfig+0x320>)
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bf6:	e011      	b.n	8003c1c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf8:	f7ff f914 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c00:	e00c      	b.n	8003c1c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c08:	e008      	b.n	8003c1c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003c0e:	231a      	movs	r3, #26
 8003c10:	2218      	movs	r2, #24
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	19db      	adds	r3, r3, r7
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
        break;
 8003c1a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d100      	bne.n	8003c24 <UART_SetConfig+0x204>
 8003c22:	e12f      	b.n	8003e84 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	0013      	movs	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d305      	bcc.n	8003c40 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d906      	bls.n	8003c4e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003c40:	231a      	movs	r3, #26
 8003c42:	2218      	movs	r2, #24
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e11a      	b.n	8003e84 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	6939      	ldr	r1, [r7, #16]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	000b      	movs	r3, r1
 8003c5c:	0e1b      	lsrs	r3, r3, #24
 8003c5e:	0010      	movs	r0, r2
 8003c60:	0205      	lsls	r5, r0, #8
 8003c62:	431d      	orrs	r5, r3
 8003c64:	000b      	movs	r3, r1
 8003c66:	021c      	lsls	r4, r3, #8
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68b8      	ldr	r0, [r7, #8]
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	1900      	adds	r0, r0, r4
 8003c7a:	4169      	adcs	r1, r5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f7fc fbc5 	bl	8000418 <__aeabi_uldivmod>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	000b      	movs	r3, r1
 8003c92:	0013      	movs	r3, r2
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c98:	23c0      	movs	r3, #192	@ 0xc0
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d309      	bcc.n	8003cb4 <UART_SetConfig+0x294>
 8003ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca2:	2380      	movs	r3, #128	@ 0x80
 8003ca4:	035b      	lsls	r3, r3, #13
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d204      	bcs.n	8003cb4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	e0e7      	b.n	8003e84 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003cb4:	231a      	movs	r3, #26
 8003cb6:	2218      	movs	r2, #24
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e0e0      	b.n	8003e84 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d000      	beq.n	8003cd0 <UART_SetConfig+0x2b0>
 8003cce:	e082      	b.n	8003dd6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003cd0:	231b      	movs	r3, #27
 8003cd2:	2218      	movs	r2, #24
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d834      	bhi.n	8003d48 <UART_SetConfig+0x328>
 8003cde:	009a      	lsls	r2, r3, #2
 8003ce0:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <UART_SetConfig+0x324>)
 8003ce2:	18d3      	adds	r3, r2, r3
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7ff f94c 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8003cec:	0003      	movs	r3, r0
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cf0:	e033      	b.n	8003d5a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf2:	f7ff f95d 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cfa:	e02e      	b.n	8003d5a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d38 <UART_SetConfig+0x318>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2210      	movs	r2, #16
 8003d02:	4013      	ands	r3, r2
 8003d04:	d002      	beq.n	8003d0c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d06:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <UART_SetConfig+0x31c>)
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d0a:	e026      	b.n	8003d5a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <UART_SetConfig+0x320>)
 8003d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d10:	e023      	b.n	8003d5a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7ff f887 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8003d16:	0003      	movs	r3, r0
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d1a:	e01e      	b.n	8003d5a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1c:	2380      	movs	r3, #128	@ 0x80
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d22:	e01a      	b.n	8003d5a <UART_SetConfig+0x33a>
 8003d24:	efff69f3 	.word	0xefff69f3
 8003d28:	ffffcfff 	.word	0xffffcfff
 8003d2c:	40004800 	.word	0x40004800
 8003d30:	fffff4ff 	.word	0xfffff4ff
 8003d34:	40004400 	.word	0x40004400
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	003d0900 	.word	0x003d0900
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	08005f40 	.word	0x08005f40
      default:
        pclk = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003d4c:	231a      	movs	r3, #26
 8003d4e:	2218      	movs	r2, #24
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	19db      	adds	r3, r3, r7
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
        break;
 8003d58:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d100      	bne.n	8003d62 <UART_SetConfig+0x342>
 8003d60:	e090      	b.n	8003e84 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d64:	005a      	lsls	r2, r3, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	18d2      	adds	r2, r2, r3
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	0019      	movs	r1, r3
 8003d74:	0010      	movs	r0, r2
 8003d76:	f7fc f9d9 	bl	800012c <__udivsi3>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d921      	bls.n	8003dc8 <UART_SetConfig+0x3a8>
 8003d84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	025b      	lsls	r3, r3, #9
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d21c      	bcs.n	8003dc8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	200e      	movs	r0, #14
 8003d94:	2418      	movs	r4, #24
 8003d96:	1903      	adds	r3, r0, r4
 8003d98:	19db      	adds	r3, r3, r7
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2207      	movs	r2, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	b299      	uxth	r1, r3
 8003dac:	1903      	adds	r3, r0, r4
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	1902      	adds	r2, r0, r4
 8003db2:	19d2      	adds	r2, r2, r7
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1902      	adds	r2, r0, r4
 8003dc0:	19d2      	adds	r2, r2, r7
 8003dc2:	8812      	ldrh	r2, [r2, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	e05d      	b.n	8003e84 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003dc8:	231a      	movs	r3, #26
 8003dca:	2218      	movs	r2, #24
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e056      	b.n	8003e84 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dd6:	231b      	movs	r3, #27
 8003dd8:	2218      	movs	r2, #24
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	19db      	adds	r3, r3, r7
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d822      	bhi.n	8003e2a <UART_SetConfig+0x40a>
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <UART_SetConfig+0x484>)
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7ff f8c9 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8003df2:	0003      	movs	r3, r0
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003df6:	e021      	b.n	8003e3c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7ff f8da 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e00:	e01c      	b.n	8003e3c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e02:	4b29      	ldr	r3, [pc, #164]	@ (8003ea8 <UART_SetConfig+0x488>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2210      	movs	r2, #16
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d002      	beq.n	8003e12 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e0c:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <UART_SetConfig+0x48c>)
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e10:	e014      	b.n	8003e3c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003e12:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <UART_SetConfig+0x490>)
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e16:	e011      	b.n	8003e3c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e18:	f7ff f804 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003e28:	e008      	b.n	8003e3c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003e2e:	231a      	movs	r3, #26
 8003e30:	2218      	movs	r2, #24
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	19db      	adds	r3, r3, r7
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
        break;
 8003e3a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d020      	beq.n	8003e84 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085a      	lsrs	r2, r3, #1
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	18d2      	adds	r2, r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0019      	movs	r1, r3
 8003e52:	0010      	movs	r0, r2
 8003e54:	f7fc f96a 	bl	800012c <__udivsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d90a      	bls.n	8003e78 <UART_SetConfig+0x458>
 8003e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	025b      	lsls	r3, r3, #9
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d205      	bcs.n	8003e78 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	e005      	b.n	8003e84 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003e78:	231a      	movs	r3, #26
 8003e7a:	2218      	movs	r2, #24
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	19db      	adds	r3, r3, r7
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2200      	movs	r2, #0
 8003e88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e90:	231a      	movs	r3, #26
 8003e92:	2218      	movs	r2, #24
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	781b      	ldrb	r3, [r3, #0]
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b00e      	add	sp, #56	@ 0x38
 8003ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	08005f64 	.word	0x08005f64
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	003d0900 	.word	0x003d0900
 8003eb0:	00f42400 	.word	0x00f42400

08003eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff8 <UART_AdvFeatureConfig+0x144>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a43      	ldr	r2, [pc, #268]	@ (8003ffc <UART_AdvFeatureConfig+0x148>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2204      	movs	r2, #4
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a3b      	ldr	r2, [pc, #236]	@ (8004000 <UART_AdvFeatureConfig+0x14c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	2208      	movs	r2, #8
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4a34      	ldr	r2, [pc, #208]	@ (8004004 <UART_AdvFeatureConfig+0x150>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	2210      	movs	r2, #16
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a2c      	ldr	r2, [pc, #176]	@ (8004008 <UART_AdvFeatureConfig+0x154>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4a25      	ldr	r2, [pc, #148]	@ (800400c <UART_AdvFeatureConfig+0x158>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	2240      	movs	r2, #64	@ 0x40
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d01d      	beq.n	8003fce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <UART_AdvFeatureConfig+0x15c>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	035b      	lsls	r3, r3, #13
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d10b      	bne.n	8003fce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <UART_AdvFeatureConfig+0x160>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	2280      	movs	r2, #128	@ 0x80
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a0e      	ldr	r2, [pc, #56]	@ (8004018 <UART_AdvFeatureConfig+0x164>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }
}
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	fffdffff 	.word	0xfffdffff
 8003ffc:	fffeffff 	.word	0xfffeffff
 8004000:	fffbffff 	.word	0xfffbffff
 8004004:	ffff7fff 	.word	0xffff7fff
 8004008:	ffffefff 	.word	0xffffefff
 800400c:	ffffdfff 	.word	0xffffdfff
 8004010:	ffefffff 	.word	0xffefffff
 8004014:	ff9fffff 	.word	0xff9fffff
 8004018:	fff7ffff 	.word	0xfff7ffff

0800401c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b092      	sub	sp, #72	@ 0x48
 8004020:	af02      	add	r7, sp, #8
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2284      	movs	r2, #132	@ 0x84
 8004028:	2100      	movs	r1, #0
 800402a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800402c:	f7fd fd42 	bl	8001ab4 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2208      	movs	r2, #8
 800403c:	4013      	ands	r3, r2
 800403e:	2b08      	cmp	r3, #8
 8004040:	d12c      	bne.n	800409c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	0391      	lsls	r1, r2, #14
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4a46      	ldr	r2, [pc, #280]	@ (8004164 <UART_CheckIdleState+0x148>)
 800404c:	9200      	str	r2, [sp, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	f000 f88c 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d021      	beq.n	800409c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004058:	f3ef 8310 	mrs	r3, PRIMASK
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004062:	2301      	movs	r3, #1
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2180      	movs	r1, #128	@ 0x80
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2278      	movs	r2, #120	@ 0x78
 8004094:	2100      	movs	r1, #0
 8004096:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05f      	b.n	800415c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2204      	movs	r2, #4
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d146      	bne.n	8004138 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	2280      	movs	r2, #128	@ 0x80
 80040ae:	03d1      	lsls	r1, r2, #15
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004164 <UART_CheckIdleState+0x148>)
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f000 f858 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d03b      	beq.n	8004138 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ca:	2301      	movs	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4921      	ldr	r1, [pc, #132]	@ (8004168 <UART_CheckIdleState+0x14c>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f2:	f3ef 8310 	mrs	r3, PRIMASK
 80040f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80040f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f383 8810 	msr	PRIMASK, r3
}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2101      	movs	r1, #1
 8004114:	438a      	bics	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2280      	movs	r2, #128	@ 0x80
 8004128:	2120      	movs	r1, #32
 800412a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2278      	movs	r2, #120	@ 0x78
 8004130:	2100      	movs	r1, #0
 8004132:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e011      	b.n	800415c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2280      	movs	r2, #128	@ 0x80
 8004142:	2120      	movs	r1, #32
 8004144:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2278      	movs	r2, #120	@ 0x78
 8004156:	2100      	movs	r1, #0
 8004158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b010      	add	sp, #64	@ 0x40
 8004162:	bd80      	pop	{r7, pc}
 8004164:	01ffffff 	.word	0x01ffffff
 8004168:	fffffedf 	.word	0xfffffedf

0800416c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	e04b      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3301      	adds	r3, #1
 8004182:	d048      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004184:	f7fd fc96 	bl	8001ab4 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04b      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2204      	movs	r2, #4
 80041a6:	4013      	ands	r3, r2
 80041a8:	d035      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2208      	movs	r2, #8
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d111      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 f900 	bl	80043c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2284      	movs	r2, #132	@ 0x84
 80041cc:	2108      	movs	r1, #8
 80041ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2278      	movs	r2, #120	@ 0x78
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e02c      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	401a      	ands	r2, r3
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d112      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2280      	movs	r2, #128	@ 0x80
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f8e3 	bl	80043c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2284      	movs	r2, #132	@ 0x84
 8004206:	2120      	movs	r1, #32
 8004208:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2278      	movs	r2, #120	@ 0x78
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00f      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	425a      	negs	r2, r3
 8004226:	4153      	adcs	r3, r2
 8004228:	b2db      	uxtb	r3, r3
 800422a:	001a      	movs	r2, r3
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0a4      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b004      	add	sp, #16
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b090      	sub	sp, #64	@ 0x40
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	1dbb      	adds	r3, r7, #6
 800424c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1dba      	adds	r2, r7, #6
 8004258:	2158      	movs	r1, #88	@ 0x58
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2284      	movs	r2, #132	@ 0x84
 8004262:	2100      	movs	r1, #0
 8004264:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2280      	movs	r2, #128	@ 0x80
 800426a:	2122      	movs	r1, #34	@ 0x22
 800426c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004272:	2b00      	cmp	r3, #0
 8004274:	d028      	beq.n	80042c8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427a:	4a3e      	ldr	r2, [pc, #248]	@ (8004374 <UART_Start_Receive_DMA+0x134>)
 800427c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	4a3d      	ldr	r2, [pc, #244]	@ (8004378 <UART_Start_Receive_DMA+0x138>)
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	4a3c      	ldr	r2, [pc, #240]	@ (800437c <UART_Start_Receive_DMA+0x13c>)
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004292:	2200      	movs	r2, #0
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3324      	adds	r3, #36	@ 0x24
 80042a0:	0019      	movs	r1, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	001a      	movs	r2, r3
 80042a8:	1dbb      	adds	r3, r7, #6
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	f7fd fd86 	bl	8001dbc <HAL_DMA_Start_IT>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d009      	beq.n	80042c8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2284      	movs	r2, #132	@ 0x84
 80042b8:	2110      	movs	r1, #16
 80042ba:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2280      	movs	r2, #128	@ 0x80
 80042c0:	2120      	movs	r1, #32
 80042c2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e050      	b.n	800436a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042da:	2301      	movs	r3, #1
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2180      	movs	r1, #128	@ 0x80
 80042f2:	0049      	lsls	r1, r1, #1
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004304:	f3ef 8310 	mrs	r3, PRIMASK
 8004308:	613b      	str	r3, [r7, #16]
  return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800430e:	2301      	movs	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004336:	f3ef 8310 	mrs	r3, PRIMASK
 800433a:	61fb      	str	r3, [r7, #28]
  return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004340:	2301      	movs	r3, #1
 8004342:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2140      	movs	r1, #64	@ 0x40
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b010      	add	sp, #64	@ 0x40
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	08004491 	.word	0x08004491
 8004378:	080045c1 	.word	0x080045c1
 800437c:	08004603 	.word	0x08004603

08004380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	60bb      	str	r3, [r7, #8]
  return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	2301      	movs	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			@ (mov r8, r8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	21c0      	movs	r1, #192	@ 0xc0
 80043aa:	438a      	bics	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f383 8810 	msr	PRIMASK, r3
}
 80043b8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b006      	add	sp, #24
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	@ 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d0:	f3ef 8310 	mrs	r3, PRIMASK
 80043d4:	617b      	str	r3, [r7, #20]
  return(result);
 80043d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043da:	2301      	movs	r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f383 8810 	msr	PRIMASK, r3
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4926      	ldr	r1, [pc, #152]	@ (800448c <UART_EndRxTransfer+0xc4>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f383 8810 	msr	PRIMASK, r3
}
 8004400:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004402:	f3ef 8310 	mrs	r3, PRIMASK
 8004406:	623b      	str	r3, [r7, #32]
  return(result);
 8004408:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	633b      	str	r3, [r7, #48]	@ 0x30
 800440c:	2301      	movs	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	f383 8810 	msr	PRIMASK, r3
}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2101      	movs	r1, #1
 8004424:	438a      	bics	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	f383 8810 	msr	PRIMASK, r3
}
 8004432:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	2b01      	cmp	r3, #1
 800443a:	d118      	bne.n	800446e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443c:	f3ef 8310 	mrs	r3, PRIMASK
 8004440:	60bb      	str	r3, [r7, #8]
  return(result);
 8004442:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004446:	2301      	movs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f383 8810 	msr	PRIMASK, r3
}
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2110      	movs	r1, #16
 800445e:	438a      	bics	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2280      	movs	r2, #128	@ 0x80
 8004472:	2120      	movs	r1, #32
 8004474:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b00e      	add	sp, #56	@ 0x38
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	fffffedf 	.word	0xfffffedf

08004490 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b094      	sub	sp, #80	@ 0x50
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2220      	movs	r2, #32
 80044a6:	4013      	ands	r3, r2
 80044a8:	d16f      	bne.n	800458a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80044aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ac:	225a      	movs	r2, #90	@ 0x5a
 80044ae:	2100      	movs	r1, #0
 80044b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b2:	f3ef 8310 	mrs	r3, PRIMASK
 80044b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80044b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044bc:	2301      	movs	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	493a      	ldr	r1, [pc, #232]	@ (80045bc <UART_DMAReceiveCplt+0x12c>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f383 8810 	msr	PRIMASK, r3
}
 80044e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e4:	f3ef 8310 	mrs	r3, PRIMASK
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	2301      	movs	r3, #1
 80044f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f4:	f383 8810 	msr	PRIMASK, r3
}
 80044f8:	46c0      	nop			@ (mov r8, r8)
 80044fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	438a      	bics	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8310 	mrs	r3, PRIMASK
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004520:	2301      	movs	r3, #1
 8004522:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004526:	f383 8810 	msr	PRIMASK, r3
}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2140      	movs	r1, #64	@ 0x40
 8004538:	438a      	bics	r2, r1
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454a:	2280      	movs	r2, #128	@ 0x80
 800454c:	2120      	movs	r1, #32
 800454e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	2b01      	cmp	r3, #1
 8004556:	d118      	bne.n	800458a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004558:	f3ef 8310 	mrs	r3, PRIMASK
 800455c:	60fb      	str	r3, [r7, #12]
  return(result);
 800455e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004562:	2301      	movs	r3, #1
 8004564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2110      	movs	r1, #16
 800457a:	438a      	bics	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f383 8810 	msr	PRIMASK, r3
}
 8004588:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458c:	2200      	movs	r2, #0
 800458e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004594:	2b01      	cmp	r3, #1
 8004596:	d108      	bne.n	80045aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459a:	2258      	movs	r2, #88	@ 0x58
 800459c:	5a9a      	ldrh	r2, [r3, r2]
 800459e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a0:	0011      	movs	r1, r2
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7fc f916 	bl	80007d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a8:	e003      	b.n	80045b2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80045aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff fa1f 	bl	80039f0 <HAL_UART_RxCpltCallback>
}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b014      	add	sp, #80	@ 0x50
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	fffffeff 	.word	0xfffffeff

080045c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10a      	bne.n	80045f2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2258      	movs	r2, #88	@ 0x58
 80045e0:	5a9b      	ldrh	r3, [r3, r2]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	0011      	movs	r1, r2
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7fc f8f2 	bl	80007d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045f0:	e003      	b.n	80045fa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7ff fa03 	bl	8003a00 <HAL_UART_RxHalfCpltCallback>
}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004614:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	589b      	ldr	r3, [r3, r2]
 800461c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2280      	movs	r2, #128	@ 0x80
 8004626:	4013      	ands	r3, r2
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	d10a      	bne.n	8004642 <UART_DMAError+0x40>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b21      	cmp	r3, #33	@ 0x21
 8004630:	d107      	bne.n	8004642 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2252      	movs	r2, #82	@ 0x52
 8004636:	2100      	movs	r1, #0
 8004638:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff fe9f 	bl	8004380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2240      	movs	r2, #64	@ 0x40
 800464a:	4013      	ands	r3, r2
 800464c:	2b40      	cmp	r3, #64	@ 0x40
 800464e:	d10a      	bne.n	8004666 <UART_DMAError+0x64>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b22      	cmp	r3, #34	@ 0x22
 8004654:	d107      	bne.n	8004666 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	225a      	movs	r2, #90	@ 0x5a
 800465a:	2100      	movs	r1, #0
 800465c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	0018      	movs	r0, r3
 8004662:	f7ff feb1 	bl	80043c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2284      	movs	r2, #132	@ 0x84
 800466a:	589b      	ldr	r3, [r3, r2]
 800466c:	2210      	movs	r2, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2184      	movs	r1, #132	@ 0x84
 8004674:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	0018      	movs	r0, r3
 800467a:	f7ff f9c9 	bl	8003a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	225a      	movs	r2, #90	@ 0x5a
 8004698:	2100      	movs	r1, #0
 800469a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2252      	movs	r2, #82	@ 0x52
 80046a0:	2100      	movs	r1, #0
 80046a2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff f9b2 	bl	8003a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ac:	46c0      	nop			@ (mov r8, r8)
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b004      	add	sp, #16
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046bc:	f3ef 8310 	mrs	r3, PRIMASK
 80046c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	2301      	movs	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2140      	movs	r1, #64	@ 0x40
 80046de:	438a      	bics	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f7ff f96f 	bl	80039e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b006      	add	sp, #24
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	b002      	add	sp, #8
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800471a:	b5b0      	push	{r4, r5, r7, lr}
 800471c:	b08a      	sub	sp, #40	@ 0x28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	1dbb      	adds	r3, r7, #6
 8004726:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	589b      	ldr	r3, [r3, r2]
 800472e:	2b20      	cmp	r3, #32
 8004730:	d156      	bne.n	80047e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004738:	1dbb      	adds	r3, r7, #6
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e04e      	b.n	80047e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	015b      	lsls	r3, r3, #5
 800474c:	429a      	cmp	r2, r3
 800474e:	d109      	bne.n	8004764 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2201      	movs	r2, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d001      	beq.n	8004764 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e03e      	b.n	80047e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004770:	2527      	movs	r5, #39	@ 0x27
 8004772:	197c      	adds	r4, r7, r5
 8004774:	1dbb      	adds	r3, r7, #6
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0018      	movs	r0, r3
 800477e:	f7ff fd5f 	bl	8004240 <UART_Start_Receive_DMA>
 8004782:	0003      	movs	r3, r0
 8004784:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004786:	197b      	adds	r3, r7, r5
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d124      	bne.n	80047d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004792:	2b01      	cmp	r3, #1
 8004794:	d11c      	bne.n	80047d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2210      	movs	r2, #16
 800479c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479e:	f3ef 8310 	mrs	r3, PRIMASK
 80047a2:	617b      	str	r3, [r7, #20]
  return(result);
 80047a4:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	2301      	movs	r3, #1
 80047aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2110      	movs	r1, #16
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	e003      	b.n	80047d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80047d0:	2327      	movs	r3, #39	@ 0x27
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80047d8:	2327      	movs	r3, #39	@ 0x27
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	e000      	b.n	80047e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b00a      	add	sp, #40	@ 0x28
 80047e8:	bdb0      	pop	{r4, r5, r7, pc}

080047ea <atoi>:
 80047ea:	b510      	push	{r4, lr}
 80047ec:	220a      	movs	r2, #10
 80047ee:	2100      	movs	r1, #0
 80047f0:	f000 f948 	bl	8004a84 <strtol>
 80047f4:	bd10      	pop	{r4, pc}
	...

080047f8 <malloc>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <malloc+0x10>)
 80047fc:	0001      	movs	r1, r0
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	f000 f826 	bl	8004850 <_malloc_r>
 8004804:	bd10      	pop	{r4, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	20000018 	.word	0x20000018

0800480c <sbrk_aligned>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4e0f      	ldr	r6, [pc, #60]	@ (800484c <sbrk_aligned+0x40>)
 8004810:	000d      	movs	r5, r1
 8004812:	6831      	ldr	r1, [r6, #0]
 8004814:	0004      	movs	r4, r0
 8004816:	2900      	cmp	r1, #0
 8004818:	d102      	bne.n	8004820 <sbrk_aligned+0x14>
 800481a:	f000 fb47 	bl	8004eac <_sbrk_r>
 800481e:	6030      	str	r0, [r6, #0]
 8004820:	0029      	movs	r1, r5
 8004822:	0020      	movs	r0, r4
 8004824:	f000 fb42 	bl	8004eac <_sbrk_r>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d103      	bne.n	8004834 <sbrk_aligned+0x28>
 800482c:	2501      	movs	r5, #1
 800482e:	426d      	negs	r5, r5
 8004830:	0028      	movs	r0, r5
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	2303      	movs	r3, #3
 8004836:	1cc5      	adds	r5, r0, #3
 8004838:	439d      	bics	r5, r3
 800483a:	42a8      	cmp	r0, r5
 800483c:	d0f8      	beq.n	8004830 <sbrk_aligned+0x24>
 800483e:	1a29      	subs	r1, r5, r0
 8004840:	0020      	movs	r0, r4
 8004842:	f000 fb33 	bl	8004eac <_sbrk_r>
 8004846:	3001      	adds	r0, #1
 8004848:	d1f2      	bne.n	8004830 <sbrk_aligned+0x24>
 800484a:	e7ef      	b.n	800482c <sbrk_aligned+0x20>
 800484c:	200005b4 	.word	0x200005b4

08004850 <_malloc_r>:
 8004850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004852:	2203      	movs	r2, #3
 8004854:	1ccb      	adds	r3, r1, #3
 8004856:	4393      	bics	r3, r2
 8004858:	3308      	adds	r3, #8
 800485a:	0005      	movs	r5, r0
 800485c:	001f      	movs	r7, r3
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d234      	bcs.n	80048cc <_malloc_r+0x7c>
 8004862:	270c      	movs	r7, #12
 8004864:	42b9      	cmp	r1, r7
 8004866:	d833      	bhi.n	80048d0 <_malloc_r+0x80>
 8004868:	0028      	movs	r0, r5
 800486a:	f000 f871 	bl	8004950 <__malloc_lock>
 800486e:	4e37      	ldr	r6, [pc, #220]	@ (800494c <_malloc_r+0xfc>)
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	001c      	movs	r4, r3
 8004874:	2c00      	cmp	r4, #0
 8004876:	d12f      	bne.n	80048d8 <_malloc_r+0x88>
 8004878:	0039      	movs	r1, r7
 800487a:	0028      	movs	r0, r5
 800487c:	f7ff ffc6 	bl	800480c <sbrk_aligned>
 8004880:	0004      	movs	r4, r0
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	d15f      	bne.n	8004946 <_malloc_r+0xf6>
 8004886:	6834      	ldr	r4, [r6, #0]
 8004888:	9400      	str	r4, [sp, #0]
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d14a      	bne.n	8004926 <_malloc_r+0xd6>
 8004890:	2c00      	cmp	r4, #0
 8004892:	d052      	beq.n	800493a <_malloc_r+0xea>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	0028      	movs	r0, r5
 8004898:	18e3      	adds	r3, r4, r3
 800489a:	9900      	ldr	r1, [sp, #0]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	f000 fb05 	bl	8004eac <_sbrk_r>
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	4283      	cmp	r3, r0
 80048a6:	d148      	bne.n	800493a <_malloc_r+0xea>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	0028      	movs	r0, r5
 80048ac:	1aff      	subs	r7, r7, r3
 80048ae:	0039      	movs	r1, r7
 80048b0:	f7ff ffac 	bl	800480c <sbrk_aligned>
 80048b4:	3001      	adds	r0, #1
 80048b6:	d040      	beq.n	800493a <_malloc_r+0xea>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	19db      	adds	r3, r3, r7
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	6833      	ldr	r3, [r6, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	d133      	bne.n	800492e <_malloc_r+0xde>
 80048c6:	9b00      	ldr	r3, [sp, #0]
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	e019      	b.n	8004900 <_malloc_r+0xb0>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dac9      	bge.n	8004864 <_malloc_r+0x14>
 80048d0:	230c      	movs	r3, #12
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	2000      	movs	r0, #0
 80048d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048d8:	6821      	ldr	r1, [r4, #0]
 80048da:	1bc9      	subs	r1, r1, r7
 80048dc:	d420      	bmi.n	8004920 <_malloc_r+0xd0>
 80048de:	290b      	cmp	r1, #11
 80048e0:	d90a      	bls.n	80048f8 <_malloc_r+0xa8>
 80048e2:	19e2      	adds	r2, r4, r7
 80048e4:	6027      	str	r7, [r4, #0]
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d104      	bne.n	80048f4 <_malloc_r+0xa4>
 80048ea:	6032      	str	r2, [r6, #0]
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	6011      	str	r1, [r2, #0]
 80048f0:	6053      	str	r3, [r2, #4]
 80048f2:	e005      	b.n	8004900 <_malloc_r+0xb0>
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	e7f9      	b.n	80048ec <_malloc_r+0x9c>
 80048f8:	6862      	ldr	r2, [r4, #4]
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d10e      	bne.n	800491c <_malloc_r+0xcc>
 80048fe:	6032      	str	r2, [r6, #0]
 8004900:	0028      	movs	r0, r5
 8004902:	f000 f82d 	bl	8004960 <__malloc_unlock>
 8004906:	0020      	movs	r0, r4
 8004908:	2207      	movs	r2, #7
 800490a:	300b      	adds	r0, #11
 800490c:	1d23      	adds	r3, r4, #4
 800490e:	4390      	bics	r0, r2
 8004910:	1ac2      	subs	r2, r0, r3
 8004912:	4298      	cmp	r0, r3
 8004914:	d0df      	beq.n	80048d6 <_malloc_r+0x86>
 8004916:	1a1b      	subs	r3, r3, r0
 8004918:	50a3      	str	r3, [r4, r2]
 800491a:	e7dc      	b.n	80048d6 <_malloc_r+0x86>
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	e7ef      	b.n	8004900 <_malloc_r+0xb0>
 8004920:	0023      	movs	r3, r4
 8004922:	6864      	ldr	r4, [r4, #4]
 8004924:	e7a6      	b.n	8004874 <_malloc_r+0x24>
 8004926:	9c00      	ldr	r4, [sp, #0]
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	e7ad      	b.n	800488a <_malloc_r+0x3a>
 800492e:	001a      	movs	r2, r3
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	42a3      	cmp	r3, r4
 8004934:	d1fb      	bne.n	800492e <_malloc_r+0xde>
 8004936:	2300      	movs	r3, #0
 8004938:	e7da      	b.n	80048f0 <_malloc_r+0xa0>
 800493a:	230c      	movs	r3, #12
 800493c:	0028      	movs	r0, r5
 800493e:	602b      	str	r3, [r5, #0]
 8004940:	f000 f80e 	bl	8004960 <__malloc_unlock>
 8004944:	e7c6      	b.n	80048d4 <_malloc_r+0x84>
 8004946:	6007      	str	r7, [r0, #0]
 8004948:	e7da      	b.n	8004900 <_malloc_r+0xb0>
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	200005b8 	.word	0x200005b8

08004950 <__malloc_lock>:
 8004950:	b510      	push	{r4, lr}
 8004952:	4802      	ldr	r0, [pc, #8]	@ (800495c <__malloc_lock+0xc>)
 8004954:	f000 fafb 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8004958:	bd10      	pop	{r4, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	200006fc 	.word	0x200006fc

08004960 <__malloc_unlock>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4802      	ldr	r0, [pc, #8]	@ (800496c <__malloc_unlock+0xc>)
 8004964:	f000 faf4 	bl	8004f50 <__retarget_lock_release_recursive>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	200006fc 	.word	0x200006fc

08004970 <_strtol_l.constprop.0>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b085      	sub	sp, #20
 8004974:	0017      	movs	r7, r2
 8004976:	001e      	movs	r6, r3
 8004978:	9003      	str	r0, [sp, #12]
 800497a:	9101      	str	r1, [sp, #4]
 800497c:	2b24      	cmp	r3, #36	@ 0x24
 800497e:	d844      	bhi.n	8004a0a <_strtol_l.constprop.0+0x9a>
 8004980:	000c      	movs	r4, r1
 8004982:	2b01      	cmp	r3, #1
 8004984:	d041      	beq.n	8004a0a <_strtol_l.constprop.0+0x9a>
 8004986:	4b3d      	ldr	r3, [pc, #244]	@ (8004a7c <_strtol_l.constprop.0+0x10c>)
 8004988:	2208      	movs	r2, #8
 800498a:	469c      	mov	ip, r3
 800498c:	0023      	movs	r3, r4
 800498e:	4661      	mov	r1, ip
 8004990:	781d      	ldrb	r5, [r3, #0]
 8004992:	3401      	adds	r4, #1
 8004994:	5d48      	ldrb	r0, [r1, r5]
 8004996:	0001      	movs	r1, r0
 8004998:	4011      	ands	r1, r2
 800499a:	4210      	tst	r0, r2
 800499c:	d1f6      	bne.n	800498c <_strtol_l.constprop.0+0x1c>
 800499e:	2d2d      	cmp	r5, #45	@ 0x2d
 80049a0:	d13a      	bne.n	8004a18 <_strtol_l.constprop.0+0xa8>
 80049a2:	7825      	ldrb	r5, [r4, #0]
 80049a4:	1c9c      	adds	r4, r3, #2
 80049a6:	2301      	movs	r3, #1
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	2210      	movs	r2, #16
 80049ac:	0033      	movs	r3, r6
 80049ae:	4393      	bics	r3, r2
 80049b0:	d109      	bne.n	80049c6 <_strtol_l.constprop.0+0x56>
 80049b2:	2d30      	cmp	r5, #48	@ 0x30
 80049b4:	d136      	bne.n	8004a24 <_strtol_l.constprop.0+0xb4>
 80049b6:	2120      	movs	r1, #32
 80049b8:	7823      	ldrb	r3, [r4, #0]
 80049ba:	438b      	bics	r3, r1
 80049bc:	2b58      	cmp	r3, #88	@ 0x58
 80049be:	d131      	bne.n	8004a24 <_strtol_l.constprop.0+0xb4>
 80049c0:	0016      	movs	r6, r2
 80049c2:	7865      	ldrb	r5, [r4, #1]
 80049c4:	3402      	adds	r4, #2
 80049c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <_strtol_l.constprop.0+0x110>)
 80049c8:	9b00      	ldr	r3, [sp, #0]
 80049ca:	4694      	mov	ip, r2
 80049cc:	4463      	add	r3, ip
 80049ce:	0031      	movs	r1, r6
 80049d0:	0018      	movs	r0, r3
 80049d2:	9302      	str	r3, [sp, #8]
 80049d4:	f7fb fc30 	bl	8000238 <__aeabi_uidivmod>
 80049d8:	2200      	movs	r2, #0
 80049da:	4684      	mov	ip, r0
 80049dc:	0010      	movs	r0, r2
 80049de:	002b      	movs	r3, r5
 80049e0:	3b30      	subs	r3, #48	@ 0x30
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d825      	bhi.n	8004a32 <_strtol_l.constprop.0+0xc2>
 80049e6:	001d      	movs	r5, r3
 80049e8:	42ae      	cmp	r6, r5
 80049ea:	dd31      	ble.n	8004a50 <_strtol_l.constprop.0+0xe0>
 80049ec:	1c53      	adds	r3, r2, #1
 80049ee:	d009      	beq.n	8004a04 <_strtol_l.constprop.0+0x94>
 80049f0:	2201      	movs	r2, #1
 80049f2:	4252      	negs	r2, r2
 80049f4:	4584      	cmp	ip, r0
 80049f6:	d305      	bcc.n	8004a04 <_strtol_l.constprop.0+0x94>
 80049f8:	d101      	bne.n	80049fe <_strtol_l.constprop.0+0x8e>
 80049fa:	42a9      	cmp	r1, r5
 80049fc:	db25      	blt.n	8004a4a <_strtol_l.constprop.0+0xda>
 80049fe:	2201      	movs	r2, #1
 8004a00:	4370      	muls	r0, r6
 8004a02:	1828      	adds	r0, r5, r0
 8004a04:	7825      	ldrb	r5, [r4, #0]
 8004a06:	3401      	adds	r4, #1
 8004a08:	e7e9      	b.n	80049de <_strtol_l.constprop.0+0x6e>
 8004a0a:	f000 fa75 	bl	8004ef8 <__errno>
 8004a0e:	2316      	movs	r3, #22
 8004a10:	6003      	str	r3, [r0, #0]
 8004a12:	2000      	movs	r0, #0
 8004a14:	b005      	add	sp, #20
 8004a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a18:	9100      	str	r1, [sp, #0]
 8004a1a:	2d2b      	cmp	r5, #43	@ 0x2b
 8004a1c:	d1c5      	bne.n	80049aa <_strtol_l.constprop.0+0x3a>
 8004a1e:	7825      	ldrb	r5, [r4, #0]
 8004a20:	1c9c      	adds	r4, r3, #2
 8004a22:	e7c2      	b.n	80049aa <_strtol_l.constprop.0+0x3a>
 8004a24:	2e00      	cmp	r6, #0
 8004a26:	d1ce      	bne.n	80049c6 <_strtol_l.constprop.0+0x56>
 8004a28:	3608      	adds	r6, #8
 8004a2a:	2d30      	cmp	r5, #48	@ 0x30
 8004a2c:	d0cb      	beq.n	80049c6 <_strtol_l.constprop.0+0x56>
 8004a2e:	3602      	adds	r6, #2
 8004a30:	e7c9      	b.n	80049c6 <_strtol_l.constprop.0+0x56>
 8004a32:	002b      	movs	r3, r5
 8004a34:	3b41      	subs	r3, #65	@ 0x41
 8004a36:	2b19      	cmp	r3, #25
 8004a38:	d801      	bhi.n	8004a3e <_strtol_l.constprop.0+0xce>
 8004a3a:	3d37      	subs	r5, #55	@ 0x37
 8004a3c:	e7d4      	b.n	80049e8 <_strtol_l.constprop.0+0x78>
 8004a3e:	002b      	movs	r3, r5
 8004a40:	3b61      	subs	r3, #97	@ 0x61
 8004a42:	2b19      	cmp	r3, #25
 8004a44:	d804      	bhi.n	8004a50 <_strtol_l.constprop.0+0xe0>
 8004a46:	3d57      	subs	r5, #87	@ 0x57
 8004a48:	e7ce      	b.n	80049e8 <_strtol_l.constprop.0+0x78>
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4252      	negs	r2, r2
 8004a4e:	e7d9      	b.n	8004a04 <_strtol_l.constprop.0+0x94>
 8004a50:	1c53      	adds	r3, r2, #1
 8004a52:	d108      	bne.n	8004a66 <_strtol_l.constprop.0+0xf6>
 8004a54:	2322      	movs	r3, #34	@ 0x22
 8004a56:	9a03      	ldr	r2, [sp, #12]
 8004a58:	9802      	ldr	r0, [sp, #8]
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d0d9      	beq.n	8004a14 <_strtol_l.constprop.0+0xa4>
 8004a60:	1e63      	subs	r3, r4, #1
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	e007      	b.n	8004a76 <_strtol_l.constprop.0+0x106>
 8004a66:	9b00      	ldr	r3, [sp, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d000      	beq.n	8004a6e <_strtol_l.constprop.0+0xfe>
 8004a6c:	4240      	negs	r0, r0
 8004a6e:	2f00      	cmp	r7, #0
 8004a70:	d0d0      	beq.n	8004a14 <_strtol_l.constprop.0+0xa4>
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d1f4      	bne.n	8004a60 <_strtol_l.constprop.0+0xf0>
 8004a76:	9b01      	ldr	r3, [sp, #4]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	e7cb      	b.n	8004a14 <_strtol_l.constprop.0+0xa4>
 8004a7c:	08005f89 	.word	0x08005f89
 8004a80:	7fffffff 	.word	0x7fffffff

08004a84 <strtol>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4c04      	ldr	r4, [pc, #16]	@ (8004a98 <strtol+0x14>)
 8004a88:	0013      	movs	r3, r2
 8004a8a:	000a      	movs	r2, r1
 8004a8c:	0001      	movs	r1, r0
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	f7ff ff6e 	bl	8004970 <_strtol_l.constprop.0>
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	20000018 	.word	0x20000018

08004a9c <std>:
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	0004      	movs	r4, r0
 8004aa2:	6003      	str	r3, [r0, #0]
 8004aa4:	6043      	str	r3, [r0, #4]
 8004aa6:	6083      	str	r3, [r0, #8]
 8004aa8:	8181      	strh	r1, [r0, #12]
 8004aaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004aac:	81c2      	strh	r2, [r0, #14]
 8004aae:	6103      	str	r3, [r0, #16]
 8004ab0:	6143      	str	r3, [r0, #20]
 8004ab2:	6183      	str	r3, [r0, #24]
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	305c      	adds	r0, #92	@ 0x5c
 8004aba:	f000 f941 	bl	8004d40 <memset>
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <std+0x50>)
 8004ac0:	6224      	str	r4, [r4, #32]
 8004ac2:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <std+0x54>)
 8004ac6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <std+0x58>)
 8004aca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004acc:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <std+0x5c>)
 8004ace:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <std+0x60>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	d005      	beq.n	8004ae2 <std+0x46>
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <std+0x64>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	d002      	beq.n	8004ae2 <std+0x46>
 8004adc:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <std+0x68>)
 8004ade:	429c      	cmp	r4, r3
 8004ae0:	d103      	bne.n	8004aea <std+0x4e>
 8004ae2:	0020      	movs	r0, r4
 8004ae4:	3058      	adds	r0, #88	@ 0x58
 8004ae6:	f000 fa31 	bl	8004f4c <__retarget_lock_init_recursive>
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	08004c8d 	.word	0x08004c8d
 8004af0:	08004cb5 	.word	0x08004cb5
 8004af4:	08004ced 	.word	0x08004ced
 8004af8:	08004d19 	.word	0x08004d19
 8004afc:	200005bc 	.word	0x200005bc
 8004b00:	20000624 	.word	0x20000624
 8004b04:	2000068c 	.word	0x2000068c

08004b08 <stdio_exit_handler>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4a03      	ldr	r2, [pc, #12]	@ (8004b18 <stdio_exit_handler+0x10>)
 8004b0c:	4903      	ldr	r1, [pc, #12]	@ (8004b1c <stdio_exit_handler+0x14>)
 8004b0e:	4804      	ldr	r0, [pc, #16]	@ (8004b20 <stdio_exit_handler+0x18>)
 8004b10:	f000 f86c 	bl	8004bec <_fwalk_sglue>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	080056f9 	.word	0x080056f9
 8004b20:	2000001c 	.word	0x2000001c

08004b24 <cleanup_stdio>:
 8004b24:	6841      	ldr	r1, [r0, #4]
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <cleanup_stdio+0x30>)
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	d001      	beq.n	8004b34 <cleanup_stdio+0x10>
 8004b30:	f000 fde2 	bl	80056f8 <_fflush_r>
 8004b34:	68a1      	ldr	r1, [r4, #8]
 8004b36:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <cleanup_stdio+0x34>)
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <cleanup_stdio+0x1e>
 8004b3c:	0020      	movs	r0, r4
 8004b3e:	f000 fddb 	bl	80056f8 <_fflush_r>
 8004b42:	68e1      	ldr	r1, [r4, #12]
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <cleanup_stdio+0x38>)
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d002      	beq.n	8004b50 <cleanup_stdio+0x2c>
 8004b4a:	0020      	movs	r0, r4
 8004b4c:	f000 fdd4 	bl	80056f8 <_fflush_r>
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	200005bc 	.word	0x200005bc
 8004b58:	20000624 	.word	0x20000624
 8004b5c:	2000068c 	.word	0x2000068c

08004b60 <global_stdio_init.part.0>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <global_stdio_init.part.0+0x28>)
 8004b64:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <global_stdio_init.part.0+0x2c>)
 8004b66:	2104      	movs	r1, #4
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	4809      	ldr	r0, [pc, #36]	@ (8004b90 <global_stdio_init.part.0+0x30>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f7ff ff95 	bl	8004a9c <std>
 8004b72:	2201      	movs	r2, #1
 8004b74:	2109      	movs	r1, #9
 8004b76:	4807      	ldr	r0, [pc, #28]	@ (8004b94 <global_stdio_init.part.0+0x34>)
 8004b78:	f7ff ff90 	bl	8004a9c <std>
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	2112      	movs	r1, #18
 8004b80:	4805      	ldr	r0, [pc, #20]	@ (8004b98 <global_stdio_init.part.0+0x38>)
 8004b82:	f7ff ff8b 	bl	8004a9c <std>
 8004b86:	bd10      	pop	{r4, pc}
 8004b88:	200006f4 	.word	0x200006f4
 8004b8c:	08004b09 	.word	0x08004b09
 8004b90:	200005bc 	.word	0x200005bc
 8004b94:	20000624 	.word	0x20000624
 8004b98:	2000068c 	.word	0x2000068c

08004b9c <__sfp_lock_acquire>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4802      	ldr	r0, [pc, #8]	@ (8004ba8 <__sfp_lock_acquire+0xc>)
 8004ba0:	f000 f9d5 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	200006fd 	.word	0x200006fd

08004bac <__sfp_lock_release>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	4802      	ldr	r0, [pc, #8]	@ (8004bb8 <__sfp_lock_release+0xc>)
 8004bb0:	f000 f9ce 	bl	8004f50 <__retarget_lock_release_recursive>
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	200006fd 	.word	0x200006fd

08004bbc <__sinit>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	0004      	movs	r4, r0
 8004bc0:	f7ff ffec 	bl	8004b9c <__sfp_lock_acquire>
 8004bc4:	6a23      	ldr	r3, [r4, #32]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <__sinit+0x14>
 8004bca:	f7ff ffef 	bl	8004bac <__sfp_lock_release>
 8004bce:	bd10      	pop	{r4, pc}
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <__sinit+0x28>)
 8004bd2:	6223      	str	r3, [r4, #32]
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <__sinit+0x2c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f6      	bne.n	8004bca <__sinit+0xe>
 8004bdc:	f7ff ffc0 	bl	8004b60 <global_stdio_init.part.0>
 8004be0:	e7f3      	b.n	8004bca <__sinit+0xe>
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	08004b25 	.word	0x08004b25
 8004be8:	200006f4 	.word	0x200006f4

08004bec <_fwalk_sglue>:
 8004bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bee:	0014      	movs	r4, r2
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	9000      	str	r0, [sp, #0]
 8004bf4:	9101      	str	r1, [sp, #4]
 8004bf6:	68a5      	ldr	r5, [r4, #8]
 8004bf8:	6867      	ldr	r7, [r4, #4]
 8004bfa:	3f01      	subs	r7, #1
 8004bfc:	d504      	bpl.n	8004c08 <_fwalk_sglue+0x1c>
 8004bfe:	6824      	ldr	r4, [r4, #0]
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d1f8      	bne.n	8004bf6 <_fwalk_sglue+0xa>
 8004c04:	0030      	movs	r0, r6
 8004c06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c08:	89ab      	ldrh	r3, [r5, #12]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d908      	bls.n	8004c20 <_fwalk_sglue+0x34>
 8004c0e:	220e      	movs	r2, #14
 8004c10:	5eab      	ldrsh	r3, [r5, r2]
 8004c12:	3301      	adds	r3, #1
 8004c14:	d004      	beq.n	8004c20 <_fwalk_sglue+0x34>
 8004c16:	0029      	movs	r1, r5
 8004c18:	9800      	ldr	r0, [sp, #0]
 8004c1a:	9b01      	ldr	r3, [sp, #4]
 8004c1c:	4798      	blx	r3
 8004c1e:	4306      	orrs	r6, r0
 8004c20:	3568      	adds	r5, #104	@ 0x68
 8004c22:	e7ea      	b.n	8004bfa <_fwalk_sglue+0xe>

08004c24 <sniprintf>:
 8004c24:	b40c      	push	{r2, r3}
 8004c26:	b530      	push	{r4, r5, lr}
 8004c28:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <sniprintf+0x64>)
 8004c2a:	000c      	movs	r4, r1
 8004c2c:	681d      	ldr	r5, [r3, #0]
 8004c2e:	b09d      	sub	sp, #116	@ 0x74
 8004c30:	2900      	cmp	r1, #0
 8004c32:	da08      	bge.n	8004c46 <sniprintf+0x22>
 8004c34:	238b      	movs	r3, #139	@ 0x8b
 8004c36:	2001      	movs	r0, #1
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	4240      	negs	r0, r0
 8004c3c:	b01d      	add	sp, #116	@ 0x74
 8004c3e:	bc30      	pop	{r4, r5}
 8004c40:	bc08      	pop	{r3}
 8004c42:	b002      	add	sp, #8
 8004c44:	4718      	bx	r3
 8004c46:	2382      	movs	r3, #130	@ 0x82
 8004c48:	466a      	mov	r2, sp
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	8293      	strh	r3, [r2, #20]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9002      	str	r0, [sp, #8]
 8004c52:	9006      	str	r0, [sp, #24]
 8004c54:	4299      	cmp	r1, r3
 8004c56:	d000      	beq.n	8004c5a <sniprintf+0x36>
 8004c58:	1e4b      	subs	r3, r1, #1
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	9307      	str	r3, [sp, #28]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	466a      	mov	r2, sp
 8004c62:	425b      	negs	r3, r3
 8004c64:	82d3      	strh	r3, [r2, #22]
 8004c66:	0028      	movs	r0, r5
 8004c68:	ab21      	add	r3, sp, #132	@ 0x84
 8004c6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c6c:	a902      	add	r1, sp, #8
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	f000 fa40 	bl	80050f4 <_svfiprintf_r>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	da01      	bge.n	8004c7c <sniprintf+0x58>
 8004c78:	238b      	movs	r3, #139	@ 0x8b
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d0dd      	beq.n	8004c3c <sniprintf+0x18>
 8004c80:	2200      	movs	r2, #0
 8004c82:	9b02      	ldr	r3, [sp, #8]
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e7d9      	b.n	8004c3c <sniprintf+0x18>
 8004c88:	20000018 	.word	0x20000018

08004c8c <__sread>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	000c      	movs	r4, r1
 8004c90:	250e      	movs	r5, #14
 8004c92:	5f49      	ldrsh	r1, [r1, r5]
 8004c94:	f000 f8f6 	bl	8004e84 <_read_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	db03      	blt.n	8004ca4 <__sread+0x18>
 8004c9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004c9e:	181b      	adds	r3, r3, r0
 8004ca0:	6563      	str	r3, [r4, #84]	@ 0x54
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	4a02      	ldr	r2, [pc, #8]	@ (8004cb0 <__sread+0x24>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	e7f9      	b.n	8004ca2 <__sread+0x16>
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	ffffefff 	.word	0xffffefff

08004cb4 <__swrite>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	001f      	movs	r7, r3
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	0005      	movs	r5, r0
 8004cbc:	000c      	movs	r4, r1
 8004cbe:	0016      	movs	r6, r2
 8004cc0:	05db      	lsls	r3, r3, #23
 8004cc2:	d505      	bpl.n	8004cd0 <__swrite+0x1c>
 8004cc4:	230e      	movs	r3, #14
 8004cc6:	5ec9      	ldrsh	r1, [r1, r3]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f000 f8c6 	bl	8004e5c <_lseek_r>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	4a05      	ldr	r2, [pc, #20]	@ (8004ce8 <__swrite+0x34>)
 8004cd4:	0028      	movs	r0, r5
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	0032      	movs	r2, r6
 8004cdc:	230e      	movs	r3, #14
 8004cde:	5ee1      	ldrsh	r1, [r4, r3]
 8004ce0:	003b      	movs	r3, r7
 8004ce2:	f000 f8f5 	bl	8004ed0 <_write_r>
 8004ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce8:	ffffefff 	.word	0xffffefff

08004cec <__sseek>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	000c      	movs	r4, r1
 8004cf0:	250e      	movs	r5, #14
 8004cf2:	5f49      	ldrsh	r1, [r1, r5]
 8004cf4:	f000 f8b2 	bl	8004e5c <_lseek_r>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	1c42      	adds	r2, r0, #1
 8004cfc:	d103      	bne.n	8004d06 <__sseek+0x1a>
 8004cfe:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <__sseek+0x28>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	2280      	movs	r2, #128	@ 0x80
 8004d08:	0152      	lsls	r2, r2, #5
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	81a3      	strh	r3, [r4, #12]
 8004d0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d10:	e7f8      	b.n	8004d04 <__sseek+0x18>
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	ffffefff 	.word	0xffffefff

08004d18 <__sclose>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	230e      	movs	r3, #14
 8004d1c:	5ec9      	ldrsh	r1, [r1, r3]
 8004d1e:	f000 f88b 	bl	8004e38 <_close_r>
 8004d22:	bd10      	pop	{r4, pc}

08004d24 <memcmp>:
 8004d24:	b530      	push	{r4, r5, lr}
 8004d26:	2400      	movs	r4, #0
 8004d28:	3901      	subs	r1, #1
 8004d2a:	42a2      	cmp	r2, r4
 8004d2c:	d101      	bne.n	8004d32 <memcmp+0xe>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e005      	b.n	8004d3e <memcmp+0x1a>
 8004d32:	5d03      	ldrb	r3, [r0, r4]
 8004d34:	3401      	adds	r4, #1
 8004d36:	5d0d      	ldrb	r5, [r1, r4]
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	d0f6      	beq.n	8004d2a <memcmp+0x6>
 8004d3c:	1b58      	subs	r0, r3, r5
 8004d3e:	bd30      	pop	{r4, r5, pc}

08004d40 <memset>:
 8004d40:	0003      	movs	r3, r0
 8004d42:	1882      	adds	r2, r0, r2
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d100      	bne.n	8004d4a <memset+0xa>
 8004d48:	4770      	bx	lr
 8004d4a:	7019      	strb	r1, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	e7f9      	b.n	8004d44 <memset+0x4>

08004d50 <strncpy>:
 8004d50:	0003      	movs	r3, r0
 8004d52:	b530      	push	{r4, r5, lr}
 8004d54:	001d      	movs	r5, r3
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	d006      	beq.n	8004d68 <strncpy+0x18>
 8004d5a:	780c      	ldrb	r4, [r1, #0]
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	3301      	adds	r3, #1
 8004d60:	702c      	strb	r4, [r5, #0]
 8004d62:	3101      	adds	r1, #1
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	d1f5      	bne.n	8004d54 <strncpy+0x4>
 8004d68:	2100      	movs	r1, #0
 8004d6a:	189a      	adds	r2, r3, r2
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <strncpy+0x22>
 8004d70:	bd30      	pop	{r4, r5, pc}
 8004d72:	7019      	strb	r1, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	e7f9      	b.n	8004d6c <strncpy+0x1c>

08004d78 <strtok>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	4b16      	ldr	r3, [pc, #88]	@ (8004dd4 <strtok+0x5c>)
 8004d7c:	0005      	movs	r5, r0
 8004d7e:	681f      	ldr	r7, [r3, #0]
 8004d80:	000e      	movs	r6, r1
 8004d82:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	d11d      	bne.n	8004dc4 <strtok+0x4c>
 8004d88:	2050      	movs	r0, #80	@ 0x50
 8004d8a:	f7ff fd35 	bl	80047f8 <malloc>
 8004d8e:	1e02      	subs	r2, r0, #0
 8004d90:	6478      	str	r0, [r7, #68]	@ 0x44
 8004d92:	d104      	bne.n	8004d9e <strtok+0x26>
 8004d94:	215b      	movs	r1, #91	@ 0x5b
 8004d96:	4b10      	ldr	r3, [pc, #64]	@ (8004dd8 <strtok+0x60>)
 8004d98:	4810      	ldr	r0, [pc, #64]	@ (8004ddc <strtok+0x64>)
 8004d9a:	f000 f8e3 	bl	8004f64 <__assert_func>
 8004d9e:	6004      	str	r4, [r0, #0]
 8004da0:	6044      	str	r4, [r0, #4]
 8004da2:	6084      	str	r4, [r0, #8]
 8004da4:	60c4      	str	r4, [r0, #12]
 8004da6:	6104      	str	r4, [r0, #16]
 8004da8:	6144      	str	r4, [r0, #20]
 8004daa:	6184      	str	r4, [r0, #24]
 8004dac:	6284      	str	r4, [r0, #40]	@ 0x28
 8004dae:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8004db0:	6304      	str	r4, [r0, #48]	@ 0x30
 8004db2:	6344      	str	r4, [r0, #52]	@ 0x34
 8004db4:	6384      	str	r4, [r0, #56]	@ 0x38
 8004db6:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8004db8:	6404      	str	r4, [r0, #64]	@ 0x40
 8004dba:	6444      	str	r4, [r0, #68]	@ 0x44
 8004dbc:	6484      	str	r4, [r0, #72]	@ 0x48
 8004dbe:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8004dc0:	7704      	strb	r4, [r0, #28]
 8004dc2:	6244      	str	r4, [r0, #36]	@ 0x24
 8004dc4:	0031      	movs	r1, r6
 8004dc6:	0028      	movs	r0, r5
 8004dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f000 f808 	bl	8004de0 <__strtok_r>
 8004dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	20000018 	.word	0x20000018
 8004dd8:	08006089 	.word	0x08006089
 8004ddc:	080060a0 	.word	0x080060a0

08004de0 <__strtok_r>:
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	1e04      	subs	r4, r0, #0
 8004de4:	d102      	bne.n	8004dec <__strtok_r+0xc>
 8004de6:	6814      	ldr	r4, [r2, #0]
 8004de8:	2c00      	cmp	r4, #0
 8004dea:	d009      	beq.n	8004e00 <__strtok_r+0x20>
 8004dec:	0020      	movs	r0, r4
 8004dee:	000e      	movs	r6, r1
 8004df0:	7805      	ldrb	r5, [r0, #0]
 8004df2:	3401      	adds	r4, #1
 8004df4:	7837      	ldrb	r7, [r6, #0]
 8004df6:	2f00      	cmp	r7, #0
 8004df8:	d104      	bne.n	8004e04 <__strtok_r+0x24>
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	d10d      	bne.n	8004e1a <__strtok_r+0x3a>
 8004dfe:	6015      	str	r5, [r2, #0]
 8004e00:	2000      	movs	r0, #0
 8004e02:	e006      	b.n	8004e12 <__strtok_r+0x32>
 8004e04:	3601      	adds	r6, #1
 8004e06:	42bd      	cmp	r5, r7
 8004e08:	d1f4      	bne.n	8004df4 <__strtok_r+0x14>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ee      	bne.n	8004dec <__strtok_r+0xc>
 8004e0e:	6014      	str	r4, [r2, #0]
 8004e10:	7003      	strb	r3, [r0, #0]
 8004e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e14:	3301      	adds	r3, #1
 8004e16:	2d00      	cmp	r5, #0
 8004e18:	d102      	bne.n	8004e20 <__strtok_r+0x40>
 8004e1a:	000b      	movs	r3, r1
 8004e1c:	7826      	ldrb	r6, [r4, #0]
 8004e1e:	3401      	adds	r4, #1
 8004e20:	781d      	ldrb	r5, [r3, #0]
 8004e22:	42ae      	cmp	r6, r5
 8004e24:	d1f6      	bne.n	8004e14 <__strtok_r+0x34>
 8004e26:	2300      	movs	r3, #0
 8004e28:	001d      	movs	r5, r3
 8004e2a:	429e      	cmp	r6, r3
 8004e2c:	d002      	beq.n	8004e34 <__strtok_r+0x54>
 8004e2e:	0023      	movs	r3, r4
 8004e30:	1e61      	subs	r1, r4, #1
 8004e32:	700d      	strb	r5, [r1, #0]
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e7ec      	b.n	8004e12 <__strtok_r+0x32>

08004e38 <_close_r>:
 8004e38:	2300      	movs	r3, #0
 8004e3a:	b570      	push	{r4, r5, r6, lr}
 8004e3c:	4d06      	ldr	r5, [pc, #24]	@ (8004e58 <_close_r+0x20>)
 8004e3e:	0004      	movs	r4, r0
 8004e40:	0008      	movs	r0, r1
 8004e42:	602b      	str	r3, [r5, #0]
 8004e44:	f7fc fba4 	bl	8001590 <_close>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d103      	bne.n	8004e54 <_close_r+0x1c>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d000      	beq.n	8004e54 <_close_r+0x1c>
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	200006f8 	.word	0x200006f8

08004e5c <_lseek_r>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	0004      	movs	r4, r0
 8004e60:	0008      	movs	r0, r1
 8004e62:	0011      	movs	r1, r2
 8004e64:	001a      	movs	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	4d05      	ldr	r5, [pc, #20]	@ (8004e80 <_lseek_r+0x24>)
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fc fbb1 	bl	80015d2 <_lseek>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d103      	bne.n	8004e7c <_lseek_r+0x20>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d000      	beq.n	8004e7c <_lseek_r+0x20>
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	200006f8 	.word	0x200006f8

08004e84 <_read_r>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	0004      	movs	r4, r0
 8004e88:	0008      	movs	r0, r1
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	2300      	movs	r3, #0
 8004e90:	4d05      	ldr	r5, [pc, #20]	@ (8004ea8 <_read_r+0x24>)
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fc fb43 	bl	800151e <_read>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d103      	bne.n	8004ea4 <_read_r+0x20>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d000      	beq.n	8004ea4 <_read_r+0x20>
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	200006f8 	.word	0x200006f8

08004eac <_sbrk_r>:
 8004eac:	2300      	movs	r3, #0
 8004eae:	b570      	push	{r4, r5, r6, lr}
 8004eb0:	4d06      	ldr	r5, [pc, #24]	@ (8004ecc <_sbrk_r+0x20>)
 8004eb2:	0004      	movs	r4, r0
 8004eb4:	0008      	movs	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fc fb96 	bl	80015e8 <_sbrk>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d103      	bne.n	8004ec8 <_sbrk_r+0x1c>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d000      	beq.n	8004ec8 <_sbrk_r+0x1c>
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	200006f8 	.word	0x200006f8

08004ed0 <_write_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	0004      	movs	r4, r0
 8004ed4:	0008      	movs	r0, r1
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	001a      	movs	r2, r3
 8004eda:	2300      	movs	r3, #0
 8004edc:	4d05      	ldr	r5, [pc, #20]	@ (8004ef4 <_write_r+0x24>)
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	f7fc fb3a 	bl	8001558 <_write>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d103      	bne.n	8004ef0 <_write_r+0x20>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d000      	beq.n	8004ef0 <_write_r+0x20>
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	200006f8 	.word	0x200006f8

08004ef8 <__errno>:
 8004ef8:	4b01      	ldr	r3, [pc, #4]	@ (8004f00 <__errno+0x8>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4770      	bx	lr
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	20000018 	.word	0x20000018

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	2600      	movs	r6, #0
 8004f08:	4c0c      	ldr	r4, [pc, #48]	@ (8004f3c <__libc_init_array+0x38>)
 8004f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f40 <__libc_init_array+0x3c>)
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	2600      	movs	r6, #0
 8004f16:	f000 ff45 	bl	8005da4 <_init>
 8004f1a:	4c0a      	ldr	r4, [pc, #40]	@ (8004f44 <__libc_init_array+0x40>)
 8004f1c:	4d0a      	ldr	r5, [pc, #40]	@ (8004f48 <__libc_init_array+0x44>)
 8004f1e:	1b64      	subs	r4, r4, r5
 8004f20:	10a4      	asrs	r4, r4, #2
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	00b3      	lsls	r3, r6, #2
 8004f2a:	58eb      	ldr	r3, [r5, r3]
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	00b3      	lsls	r3, r6, #2
 8004f34:	58eb      	ldr	r3, [r5, r3]
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08006174 	.word	0x08006174
 8004f40:	08006174 	.word	0x08006174
 8004f44:	08006178 	.word	0x08006178
 8004f48:	08006174 	.word	0x08006174

08004f4c <__retarget_lock_init_recursive>:
 8004f4c:	4770      	bx	lr

08004f4e <__retarget_lock_acquire_recursive>:
 8004f4e:	4770      	bx	lr

08004f50 <__retarget_lock_release_recursive>:
 8004f50:	4770      	bx	lr

08004f52 <memcpy>:
 8004f52:	2300      	movs	r3, #0
 8004f54:	b510      	push	{r4, lr}
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d100      	bne.n	8004f5c <memcpy+0xa>
 8004f5a:	bd10      	pop	{r4, pc}
 8004f5c:	5ccc      	ldrb	r4, [r1, r3]
 8004f5e:	54c4      	strb	r4, [r0, r3]
 8004f60:	3301      	adds	r3, #1
 8004f62:	e7f8      	b.n	8004f56 <memcpy+0x4>

08004f64 <__assert_func>:
 8004f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004f66:	0014      	movs	r4, r2
 8004f68:	001a      	movs	r2, r3
 8004f6a:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <__assert_func+0x2c>)
 8004f6c:	0005      	movs	r5, r0
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	000e      	movs	r6, r1
 8004f72:	68d8      	ldr	r0, [r3, #12]
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <__assert_func+0x30>)
 8004f76:	2c00      	cmp	r4, #0
 8004f78:	d101      	bne.n	8004f7e <__assert_func+0x1a>
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <__assert_func+0x34>)
 8004f7c:	001c      	movs	r4, r3
 8004f7e:	4907      	ldr	r1, [pc, #28]	@ (8004f9c <__assert_func+0x38>)
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	9402      	str	r4, [sp, #8]
 8004f84:	002b      	movs	r3, r5
 8004f86:	9600      	str	r6, [sp, #0]
 8004f88:	f000 fbe2 	bl	8005750 <fiprintf>
 8004f8c:	f000 fc0e 	bl	80057ac <abort>
 8004f90:	20000018 	.word	0x20000018
 8004f94:	080060fa 	.word	0x080060fa
 8004f98:	08006135 	.word	0x08006135
 8004f9c:	08006107 	.word	0x08006107

08004fa0 <_free_r>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	0005      	movs	r5, r0
 8004fa4:	1e0c      	subs	r4, r1, #0
 8004fa6:	d010      	beq.n	8004fca <_free_r+0x2a>
 8004fa8:	3c04      	subs	r4, #4
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	da00      	bge.n	8004fb2 <_free_r+0x12>
 8004fb0:	18e4      	adds	r4, r4, r3
 8004fb2:	0028      	movs	r0, r5
 8004fb4:	f7ff fccc 	bl	8004950 <__malloc_lock>
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005030 <_free_r+0x90>)
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <_free_r+0x2c>
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	6014      	str	r4, [r2, #0]
 8004fc4:	0028      	movs	r0, r5
 8004fc6:	f7ff fccb 	bl	8004960 <__malloc_unlock>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d908      	bls.n	8004fe2 <_free_r+0x42>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	1821      	adds	r1, r4, r0
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	d1f3      	bne.n	8004fc0 <_free_r+0x20>
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	1809      	adds	r1, r1, r0
 8004fde:	6021      	str	r1, [r4, #0]
 8004fe0:	e7ee      	b.n	8004fc0 <_free_r+0x20>
 8004fe2:	001a      	movs	r2, r3
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <_free_r+0x4e>
 8004fea:	42a3      	cmp	r3, r4
 8004fec:	d9f9      	bls.n	8004fe2 <_free_r+0x42>
 8004fee:	6811      	ldr	r1, [r2, #0]
 8004ff0:	1850      	adds	r0, r2, r1
 8004ff2:	42a0      	cmp	r0, r4
 8004ff4:	d10b      	bne.n	800500e <_free_r+0x6e>
 8004ff6:	6820      	ldr	r0, [r4, #0]
 8004ff8:	1809      	adds	r1, r1, r0
 8004ffa:	1850      	adds	r0, r2, r1
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	4283      	cmp	r3, r0
 8005000:	d1e0      	bne.n	8004fc4 <_free_r+0x24>
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	1841      	adds	r1, r0, r1
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	6053      	str	r3, [r2, #4]
 800500c:	e7da      	b.n	8004fc4 <_free_r+0x24>
 800500e:	42a0      	cmp	r0, r4
 8005010:	d902      	bls.n	8005018 <_free_r+0x78>
 8005012:	230c      	movs	r3, #12
 8005014:	602b      	str	r3, [r5, #0]
 8005016:	e7d5      	b.n	8004fc4 <_free_r+0x24>
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	1821      	adds	r1, r4, r0
 800501c:	428b      	cmp	r3, r1
 800501e:	d103      	bne.n	8005028 <_free_r+0x88>
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	1809      	adds	r1, r1, r0
 8005026:	6021      	str	r1, [r4, #0]
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	6054      	str	r4, [r2, #4]
 800502c:	e7ca      	b.n	8004fc4 <_free_r+0x24>
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	200005b8 	.word	0x200005b8

08005034 <__ssputs_r>:
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	688e      	ldr	r6, [r1, #8]
 8005038:	b085      	sub	sp, #20
 800503a:	001f      	movs	r7, r3
 800503c:	000c      	movs	r4, r1
 800503e:	680b      	ldr	r3, [r1, #0]
 8005040:	9002      	str	r0, [sp, #8]
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	42be      	cmp	r6, r7
 8005046:	d830      	bhi.n	80050aa <__ssputs_r+0x76>
 8005048:	210c      	movs	r1, #12
 800504a:	5e62      	ldrsh	r2, [r4, r1]
 800504c:	2190      	movs	r1, #144	@ 0x90
 800504e:	00c9      	lsls	r1, r1, #3
 8005050:	420a      	tst	r2, r1
 8005052:	d028      	beq.n	80050a6 <__ssputs_r+0x72>
 8005054:	2003      	movs	r0, #3
 8005056:	6921      	ldr	r1, [r4, #16]
 8005058:	1a5b      	subs	r3, r3, r1
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	6963      	ldr	r3, [r4, #20]
 800505e:	4343      	muls	r3, r0
 8005060:	9801      	ldr	r0, [sp, #4]
 8005062:	0fdd      	lsrs	r5, r3, #31
 8005064:	18ed      	adds	r5, r5, r3
 8005066:	1c7b      	adds	r3, r7, #1
 8005068:	181b      	adds	r3, r3, r0
 800506a:	106d      	asrs	r5, r5, #1
 800506c:	42ab      	cmp	r3, r5
 800506e:	d900      	bls.n	8005072 <__ssputs_r+0x3e>
 8005070:	001d      	movs	r5, r3
 8005072:	0552      	lsls	r2, r2, #21
 8005074:	d528      	bpl.n	80050c8 <__ssputs_r+0x94>
 8005076:	0029      	movs	r1, r5
 8005078:	9802      	ldr	r0, [sp, #8]
 800507a:	f7ff fbe9 	bl	8004850 <_malloc_r>
 800507e:	1e06      	subs	r6, r0, #0
 8005080:	d02c      	beq.n	80050dc <__ssputs_r+0xa8>
 8005082:	9a01      	ldr	r2, [sp, #4]
 8005084:	6921      	ldr	r1, [r4, #16]
 8005086:	f7ff ff64 	bl	8004f52 <memcpy>
 800508a:	89a2      	ldrh	r2, [r4, #12]
 800508c:	4b18      	ldr	r3, [pc, #96]	@ (80050f0 <__ssputs_r+0xbc>)
 800508e:	401a      	ands	r2, r3
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	4313      	orrs	r3, r2
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	6126      	str	r6, [r4, #16]
 800509a:	18f6      	adds	r6, r6, r3
 800509c:	6026      	str	r6, [r4, #0]
 800509e:	003e      	movs	r6, r7
 80050a0:	6165      	str	r5, [r4, #20]
 80050a2:	1aed      	subs	r5, r5, r3
 80050a4:	60a5      	str	r5, [r4, #8]
 80050a6:	42be      	cmp	r6, r7
 80050a8:	d900      	bls.n	80050ac <__ssputs_r+0x78>
 80050aa:	003e      	movs	r6, r7
 80050ac:	0032      	movs	r2, r6
 80050ae:	9903      	ldr	r1, [sp, #12]
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	f000 fb5d 	bl	8005770 <memmove>
 80050b6:	2000      	movs	r0, #0
 80050b8:	68a3      	ldr	r3, [r4, #8]
 80050ba:	1b9b      	subs	r3, r3, r6
 80050bc:	60a3      	str	r3, [r4, #8]
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	199b      	adds	r3, r3, r6
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	b005      	add	sp, #20
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c8:	002a      	movs	r2, r5
 80050ca:	9802      	ldr	r0, [sp, #8]
 80050cc:	f000 fb75 	bl	80057ba <_realloc_r>
 80050d0:	1e06      	subs	r6, r0, #0
 80050d2:	d1e0      	bne.n	8005096 <__ssputs_r+0x62>
 80050d4:	6921      	ldr	r1, [r4, #16]
 80050d6:	9802      	ldr	r0, [sp, #8]
 80050d8:	f7ff ff62 	bl	8004fa0 <_free_r>
 80050dc:	230c      	movs	r3, #12
 80050de:	2001      	movs	r0, #1
 80050e0:	9a02      	ldr	r2, [sp, #8]
 80050e2:	4240      	negs	r0, r0
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	89a2      	ldrh	r2, [r4, #12]
 80050e8:	3334      	adds	r3, #52	@ 0x34
 80050ea:	4313      	orrs	r3, r2
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	e7e9      	b.n	80050c4 <__ssputs_r+0x90>
 80050f0:	fffffb7f 	.word	0xfffffb7f

080050f4 <_svfiprintf_r>:
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	b0a1      	sub	sp, #132	@ 0x84
 80050f8:	9003      	str	r0, [sp, #12]
 80050fa:	001d      	movs	r5, r3
 80050fc:	898b      	ldrh	r3, [r1, #12]
 80050fe:	000f      	movs	r7, r1
 8005100:	0016      	movs	r6, r2
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	d511      	bpl.n	800512a <_svfiprintf_r+0x36>
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10e      	bne.n	800512a <_svfiprintf_r+0x36>
 800510c:	2140      	movs	r1, #64	@ 0x40
 800510e:	f7ff fb9f 	bl	8004850 <_malloc_r>
 8005112:	6038      	str	r0, [r7, #0]
 8005114:	6138      	str	r0, [r7, #16]
 8005116:	2800      	cmp	r0, #0
 8005118:	d105      	bne.n	8005126 <_svfiprintf_r+0x32>
 800511a:	230c      	movs	r3, #12
 800511c:	9a03      	ldr	r2, [sp, #12]
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	2001      	movs	r0, #1
 8005122:	4240      	negs	r0, r0
 8005124:	e0cf      	b.n	80052c6 <_svfiprintf_r+0x1d2>
 8005126:	2340      	movs	r3, #64	@ 0x40
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	2300      	movs	r3, #0
 800512c:	ac08      	add	r4, sp, #32
 800512e:	6163      	str	r3, [r4, #20]
 8005130:	3320      	adds	r3, #32
 8005132:	7663      	strb	r3, [r4, #25]
 8005134:	3310      	adds	r3, #16
 8005136:	76a3      	strb	r3, [r4, #26]
 8005138:	9507      	str	r5, [sp, #28]
 800513a:	0035      	movs	r5, r6
 800513c:	782b      	ldrb	r3, [r5, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <_svfiprintf_r+0x52>
 8005142:	2b25      	cmp	r3, #37	@ 0x25
 8005144:	d148      	bne.n	80051d8 <_svfiprintf_r+0xe4>
 8005146:	1bab      	subs	r3, r5, r6
 8005148:	9305      	str	r3, [sp, #20]
 800514a:	42b5      	cmp	r5, r6
 800514c:	d00b      	beq.n	8005166 <_svfiprintf_r+0x72>
 800514e:	0032      	movs	r2, r6
 8005150:	0039      	movs	r1, r7
 8005152:	9803      	ldr	r0, [sp, #12]
 8005154:	f7ff ff6e 	bl	8005034 <__ssputs_r>
 8005158:	3001      	adds	r0, #1
 800515a:	d100      	bne.n	800515e <_svfiprintf_r+0x6a>
 800515c:	e0ae      	b.n	80052bc <_svfiprintf_r+0x1c8>
 800515e:	6963      	ldr	r3, [r4, #20]
 8005160:	9a05      	ldr	r2, [sp, #20]
 8005162:	189b      	adds	r3, r3, r2
 8005164:	6163      	str	r3, [r4, #20]
 8005166:	782b      	ldrb	r3, [r5, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d100      	bne.n	800516e <_svfiprintf_r+0x7a>
 800516c:	e0a6      	b.n	80052bc <_svfiprintf_r+0x1c8>
 800516e:	2201      	movs	r2, #1
 8005170:	2300      	movs	r3, #0
 8005172:	4252      	negs	r2, r2
 8005174:	6062      	str	r2, [r4, #4]
 8005176:	a904      	add	r1, sp, #16
 8005178:	3254      	adds	r2, #84	@ 0x54
 800517a:	1852      	adds	r2, r2, r1
 800517c:	1c6e      	adds	r6, r5, #1
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	60e3      	str	r3, [r4, #12]
 8005182:	60a3      	str	r3, [r4, #8]
 8005184:	7013      	strb	r3, [r2, #0]
 8005186:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005188:	4b54      	ldr	r3, [pc, #336]	@ (80052dc <_svfiprintf_r+0x1e8>)
 800518a:	2205      	movs	r2, #5
 800518c:	0018      	movs	r0, r3
 800518e:	7831      	ldrb	r1, [r6, #0]
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	f000 fb00 	bl	8005796 <memchr>
 8005196:	1c75      	adds	r5, r6, #1
 8005198:	2800      	cmp	r0, #0
 800519a:	d11f      	bne.n	80051dc <_svfiprintf_r+0xe8>
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	06d3      	lsls	r3, r2, #27
 80051a0:	d504      	bpl.n	80051ac <_svfiprintf_r+0xb8>
 80051a2:	2353      	movs	r3, #83	@ 0x53
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	185b      	adds	r3, r3, r1
 80051a8:	2120      	movs	r1, #32
 80051aa:	7019      	strb	r1, [r3, #0]
 80051ac:	0713      	lsls	r3, r2, #28
 80051ae:	d504      	bpl.n	80051ba <_svfiprintf_r+0xc6>
 80051b0:	2353      	movs	r3, #83	@ 0x53
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	185b      	adds	r3, r3, r1
 80051b6:	212b      	movs	r1, #43	@ 0x2b
 80051b8:	7019      	strb	r1, [r3, #0]
 80051ba:	7833      	ldrb	r3, [r6, #0]
 80051bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051be:	d016      	beq.n	80051ee <_svfiprintf_r+0xfa>
 80051c0:	0035      	movs	r5, r6
 80051c2:	2100      	movs	r1, #0
 80051c4:	200a      	movs	r0, #10
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	782a      	ldrb	r2, [r5, #0]
 80051ca:	1c6e      	adds	r6, r5, #1
 80051cc:	3a30      	subs	r2, #48	@ 0x30
 80051ce:	2a09      	cmp	r2, #9
 80051d0:	d950      	bls.n	8005274 <_svfiprintf_r+0x180>
 80051d2:	2900      	cmp	r1, #0
 80051d4:	d111      	bne.n	80051fa <_svfiprintf_r+0x106>
 80051d6:	e017      	b.n	8005208 <_svfiprintf_r+0x114>
 80051d8:	3501      	adds	r5, #1
 80051da:	e7af      	b.n	800513c <_svfiprintf_r+0x48>
 80051dc:	9b05      	ldr	r3, [sp, #20]
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	1ac0      	subs	r0, r0, r3
 80051e2:	2301      	movs	r3, #1
 80051e4:	4083      	lsls	r3, r0
 80051e6:	4313      	orrs	r3, r2
 80051e8:	002e      	movs	r6, r5
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	e7cc      	b.n	8005188 <_svfiprintf_r+0x94>
 80051ee:	9b07      	ldr	r3, [sp, #28]
 80051f0:	1d19      	adds	r1, r3, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	9107      	str	r1, [sp, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	db01      	blt.n	80051fe <_svfiprintf_r+0x10a>
 80051fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051fc:	e004      	b.n	8005208 <_svfiprintf_r+0x114>
 80051fe:	425b      	negs	r3, r3
 8005200:	60e3      	str	r3, [r4, #12]
 8005202:	2302      	movs	r3, #2
 8005204:	4313      	orrs	r3, r2
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	782b      	ldrb	r3, [r5, #0]
 800520a:	2b2e      	cmp	r3, #46	@ 0x2e
 800520c:	d10c      	bne.n	8005228 <_svfiprintf_r+0x134>
 800520e:	786b      	ldrb	r3, [r5, #1]
 8005210:	2b2a      	cmp	r3, #42	@ 0x2a
 8005212:	d134      	bne.n	800527e <_svfiprintf_r+0x18a>
 8005214:	9b07      	ldr	r3, [sp, #28]
 8005216:	3502      	adds	r5, #2
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	9207      	str	r2, [sp, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	da01      	bge.n	8005226 <_svfiprintf_r+0x132>
 8005222:	2301      	movs	r3, #1
 8005224:	425b      	negs	r3, r3
 8005226:	9309      	str	r3, [sp, #36]	@ 0x24
 8005228:	4e2d      	ldr	r6, [pc, #180]	@ (80052e0 <_svfiprintf_r+0x1ec>)
 800522a:	2203      	movs	r2, #3
 800522c:	0030      	movs	r0, r6
 800522e:	7829      	ldrb	r1, [r5, #0]
 8005230:	f000 fab1 	bl	8005796 <memchr>
 8005234:	2800      	cmp	r0, #0
 8005236:	d006      	beq.n	8005246 <_svfiprintf_r+0x152>
 8005238:	2340      	movs	r3, #64	@ 0x40
 800523a:	1b80      	subs	r0, r0, r6
 800523c:	4083      	lsls	r3, r0
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	3501      	adds	r5, #1
 8005242:	4313      	orrs	r3, r2
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	7829      	ldrb	r1, [r5, #0]
 8005248:	2206      	movs	r2, #6
 800524a:	4826      	ldr	r0, [pc, #152]	@ (80052e4 <_svfiprintf_r+0x1f0>)
 800524c:	1c6e      	adds	r6, r5, #1
 800524e:	7621      	strb	r1, [r4, #24]
 8005250:	f000 faa1 	bl	8005796 <memchr>
 8005254:	2800      	cmp	r0, #0
 8005256:	d038      	beq.n	80052ca <_svfiprintf_r+0x1d6>
 8005258:	4b23      	ldr	r3, [pc, #140]	@ (80052e8 <_svfiprintf_r+0x1f4>)
 800525a:	2b00      	cmp	r3, #0
 800525c:	d122      	bne.n	80052a4 <_svfiprintf_r+0x1b0>
 800525e:	2207      	movs	r2, #7
 8005260:	9b07      	ldr	r3, [sp, #28]
 8005262:	3307      	adds	r3, #7
 8005264:	4393      	bics	r3, r2
 8005266:	3308      	adds	r3, #8
 8005268:	9307      	str	r3, [sp, #28]
 800526a:	6963      	ldr	r3, [r4, #20]
 800526c:	9a04      	ldr	r2, [sp, #16]
 800526e:	189b      	adds	r3, r3, r2
 8005270:	6163      	str	r3, [r4, #20]
 8005272:	e762      	b.n	800513a <_svfiprintf_r+0x46>
 8005274:	4343      	muls	r3, r0
 8005276:	0035      	movs	r5, r6
 8005278:	2101      	movs	r1, #1
 800527a:	189b      	adds	r3, r3, r2
 800527c:	e7a4      	b.n	80051c8 <_svfiprintf_r+0xd4>
 800527e:	2300      	movs	r3, #0
 8005280:	200a      	movs	r0, #10
 8005282:	0019      	movs	r1, r3
 8005284:	3501      	adds	r5, #1
 8005286:	6063      	str	r3, [r4, #4]
 8005288:	782a      	ldrb	r2, [r5, #0]
 800528a:	1c6e      	adds	r6, r5, #1
 800528c:	3a30      	subs	r2, #48	@ 0x30
 800528e:	2a09      	cmp	r2, #9
 8005290:	d903      	bls.n	800529a <_svfiprintf_r+0x1a6>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0c8      	beq.n	8005228 <_svfiprintf_r+0x134>
 8005296:	9109      	str	r1, [sp, #36]	@ 0x24
 8005298:	e7c6      	b.n	8005228 <_svfiprintf_r+0x134>
 800529a:	4341      	muls	r1, r0
 800529c:	0035      	movs	r5, r6
 800529e:	2301      	movs	r3, #1
 80052a0:	1889      	adds	r1, r1, r2
 80052a2:	e7f1      	b.n	8005288 <_svfiprintf_r+0x194>
 80052a4:	aa07      	add	r2, sp, #28
 80052a6:	9200      	str	r2, [sp, #0]
 80052a8:	0021      	movs	r1, r4
 80052aa:	003a      	movs	r2, r7
 80052ac:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <_svfiprintf_r+0x1f8>)
 80052ae:	9803      	ldr	r0, [sp, #12]
 80052b0:	e000      	b.n	80052b4 <_svfiprintf_r+0x1c0>
 80052b2:	bf00      	nop
 80052b4:	9004      	str	r0, [sp, #16]
 80052b6:	9b04      	ldr	r3, [sp, #16]
 80052b8:	3301      	adds	r3, #1
 80052ba:	d1d6      	bne.n	800526a <_svfiprintf_r+0x176>
 80052bc:	89bb      	ldrh	r3, [r7, #12]
 80052be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80052c0:	065b      	lsls	r3, r3, #25
 80052c2:	d500      	bpl.n	80052c6 <_svfiprintf_r+0x1d2>
 80052c4:	e72c      	b.n	8005120 <_svfiprintf_r+0x2c>
 80052c6:	b021      	add	sp, #132	@ 0x84
 80052c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ca:	aa07      	add	r2, sp, #28
 80052cc:	9200      	str	r2, [sp, #0]
 80052ce:	0021      	movs	r1, r4
 80052d0:	003a      	movs	r2, r7
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <_svfiprintf_r+0x1f8>)
 80052d4:	9803      	ldr	r0, [sp, #12]
 80052d6:	f000 f87b 	bl	80053d0 <_printf_i>
 80052da:	e7eb      	b.n	80052b4 <_svfiprintf_r+0x1c0>
 80052dc:	08006136 	.word	0x08006136
 80052e0:	0800613c 	.word	0x0800613c
 80052e4:	08006140 	.word	0x08006140
 80052e8:	00000000 	.word	0x00000000
 80052ec:	08005035 	.word	0x08005035

080052f0 <_printf_common>:
 80052f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052f2:	0016      	movs	r6, r2
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	688a      	ldr	r2, [r1, #8]
 80052f8:	690b      	ldr	r3, [r1, #16]
 80052fa:	000c      	movs	r4, r1
 80052fc:	9000      	str	r0, [sp, #0]
 80052fe:	4293      	cmp	r3, r2
 8005300:	da00      	bge.n	8005304 <_printf_common+0x14>
 8005302:	0013      	movs	r3, r2
 8005304:	0022      	movs	r2, r4
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	3243      	adds	r2, #67	@ 0x43
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	2a00      	cmp	r2, #0
 800530e:	d001      	beq.n	8005314 <_printf_common+0x24>
 8005310:	3301      	adds	r3, #1
 8005312:	6033      	str	r3, [r6, #0]
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	069b      	lsls	r3, r3, #26
 8005318:	d502      	bpl.n	8005320 <_printf_common+0x30>
 800531a:	6833      	ldr	r3, [r6, #0]
 800531c:	3302      	adds	r3, #2
 800531e:	6033      	str	r3, [r6, #0]
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	2306      	movs	r3, #6
 8005324:	0015      	movs	r5, r2
 8005326:	401d      	ands	r5, r3
 8005328:	421a      	tst	r2, r3
 800532a:	d027      	beq.n	800537c <_printf_common+0x8c>
 800532c:	0023      	movs	r3, r4
 800532e:	3343      	adds	r3, #67	@ 0x43
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	4193      	sbcs	r3, r2
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	0692      	lsls	r2, r2, #26
 800533a:	d430      	bmi.n	800539e <_printf_common+0xae>
 800533c:	0022      	movs	r2, r4
 800533e:	9901      	ldr	r1, [sp, #4]
 8005340:	9800      	ldr	r0, [sp, #0]
 8005342:	9d08      	ldr	r5, [sp, #32]
 8005344:	3243      	adds	r2, #67	@ 0x43
 8005346:	47a8      	blx	r5
 8005348:	3001      	adds	r0, #1
 800534a:	d025      	beq.n	8005398 <_printf_common+0xa8>
 800534c:	2206      	movs	r2, #6
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	2500      	movs	r5, #0
 8005352:	4013      	ands	r3, r2
 8005354:	2b04      	cmp	r3, #4
 8005356:	d105      	bne.n	8005364 <_printf_common+0x74>
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	68e5      	ldr	r5, [r4, #12]
 800535c:	1aed      	subs	r5, r5, r3
 800535e:	43eb      	mvns	r3, r5
 8005360:	17db      	asrs	r3, r3, #31
 8005362:	401d      	ands	r5, r3
 8005364:	68a3      	ldr	r3, [r4, #8]
 8005366:	6922      	ldr	r2, [r4, #16]
 8005368:	4293      	cmp	r3, r2
 800536a:	dd01      	ble.n	8005370 <_printf_common+0x80>
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	18ed      	adds	r5, r5, r3
 8005370:	2600      	movs	r6, #0
 8005372:	42b5      	cmp	r5, r6
 8005374:	d120      	bne.n	80053b8 <_printf_common+0xc8>
 8005376:	2000      	movs	r0, #0
 8005378:	e010      	b.n	800539c <_printf_common+0xac>
 800537a:	3501      	adds	r5, #1
 800537c:	68e3      	ldr	r3, [r4, #12]
 800537e:	6832      	ldr	r2, [r6, #0]
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	42ab      	cmp	r3, r5
 8005384:	ddd2      	ble.n	800532c <_printf_common+0x3c>
 8005386:	0022      	movs	r2, r4
 8005388:	2301      	movs	r3, #1
 800538a:	9901      	ldr	r1, [sp, #4]
 800538c:	9800      	ldr	r0, [sp, #0]
 800538e:	9f08      	ldr	r7, [sp, #32]
 8005390:	3219      	adds	r2, #25
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	d1f0      	bne.n	800537a <_printf_common+0x8a>
 8005398:	2001      	movs	r0, #1
 800539a:	4240      	negs	r0, r0
 800539c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800539e:	2030      	movs	r0, #48	@ 0x30
 80053a0:	18e1      	adds	r1, r4, r3
 80053a2:	3143      	adds	r1, #67	@ 0x43
 80053a4:	7008      	strb	r0, [r1, #0]
 80053a6:	0021      	movs	r1, r4
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	3145      	adds	r1, #69	@ 0x45
 80053ac:	7809      	ldrb	r1, [r1, #0]
 80053ae:	18a2      	adds	r2, r4, r2
 80053b0:	3243      	adds	r2, #67	@ 0x43
 80053b2:	3302      	adds	r3, #2
 80053b4:	7011      	strb	r1, [r2, #0]
 80053b6:	e7c1      	b.n	800533c <_printf_common+0x4c>
 80053b8:	0022      	movs	r2, r4
 80053ba:	2301      	movs	r3, #1
 80053bc:	9901      	ldr	r1, [sp, #4]
 80053be:	9800      	ldr	r0, [sp, #0]
 80053c0:	9f08      	ldr	r7, [sp, #32]
 80053c2:	321a      	adds	r2, #26
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0e6      	beq.n	8005398 <_printf_common+0xa8>
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7d1      	b.n	8005372 <_printf_common+0x82>
	...

080053d0 <_printf_i>:
 80053d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d2:	b08b      	sub	sp, #44	@ 0x2c
 80053d4:	9206      	str	r2, [sp, #24]
 80053d6:	000a      	movs	r2, r1
 80053d8:	3243      	adds	r2, #67	@ 0x43
 80053da:	9307      	str	r3, [sp, #28]
 80053dc:	9005      	str	r0, [sp, #20]
 80053de:	9203      	str	r2, [sp, #12]
 80053e0:	7e0a      	ldrb	r2, [r1, #24]
 80053e2:	000c      	movs	r4, r1
 80053e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80053e6:	2a78      	cmp	r2, #120	@ 0x78
 80053e8:	d809      	bhi.n	80053fe <_printf_i+0x2e>
 80053ea:	2a62      	cmp	r2, #98	@ 0x62
 80053ec:	d80b      	bhi.n	8005406 <_printf_i+0x36>
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	d100      	bne.n	80053f4 <_printf_i+0x24>
 80053f2:	e0bc      	b.n	800556e <_printf_i+0x19e>
 80053f4:	497b      	ldr	r1, [pc, #492]	@ (80055e4 <_printf_i+0x214>)
 80053f6:	9104      	str	r1, [sp, #16]
 80053f8:	2a58      	cmp	r2, #88	@ 0x58
 80053fa:	d100      	bne.n	80053fe <_printf_i+0x2e>
 80053fc:	e090      	b.n	8005520 <_printf_i+0x150>
 80053fe:	0025      	movs	r5, r4
 8005400:	3542      	adds	r5, #66	@ 0x42
 8005402:	702a      	strb	r2, [r5, #0]
 8005404:	e022      	b.n	800544c <_printf_i+0x7c>
 8005406:	0010      	movs	r0, r2
 8005408:	3863      	subs	r0, #99	@ 0x63
 800540a:	2815      	cmp	r0, #21
 800540c:	d8f7      	bhi.n	80053fe <_printf_i+0x2e>
 800540e:	f7fa fe83 	bl	8000118 <__gnu_thumb1_case_shi>
 8005412:	0016      	.short	0x0016
 8005414:	fff6001f 	.word	0xfff6001f
 8005418:	fff6fff6 	.word	0xfff6fff6
 800541c:	001ffff6 	.word	0x001ffff6
 8005420:	fff6fff6 	.word	0xfff6fff6
 8005424:	fff6fff6 	.word	0xfff6fff6
 8005428:	003600a1 	.word	0x003600a1
 800542c:	fff60080 	.word	0xfff60080
 8005430:	00b2fff6 	.word	0x00b2fff6
 8005434:	0036fff6 	.word	0x0036fff6
 8005438:	fff6fff6 	.word	0xfff6fff6
 800543c:	0084      	.short	0x0084
 800543e:	0025      	movs	r5, r4
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	3542      	adds	r5, #66	@ 0x42
 8005444:	1d11      	adds	r1, r2, #4
 8005446:	6019      	str	r1, [r3, #0]
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	702b      	strb	r3, [r5, #0]
 800544c:	2301      	movs	r3, #1
 800544e:	e0a0      	b.n	8005592 <_printf_i+0x1c2>
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	6809      	ldr	r1, [r1, #0]
 8005454:	1d02      	adds	r2, r0, #4
 8005456:	060d      	lsls	r5, r1, #24
 8005458:	d50b      	bpl.n	8005472 <_printf_i+0xa2>
 800545a:	6806      	ldr	r6, [r0, #0]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	2e00      	cmp	r6, #0
 8005460:	da03      	bge.n	800546a <_printf_i+0x9a>
 8005462:	232d      	movs	r3, #45	@ 0x2d
 8005464:	9a03      	ldr	r2, [sp, #12]
 8005466:	4276      	negs	r6, r6
 8005468:	7013      	strb	r3, [r2, #0]
 800546a:	4b5e      	ldr	r3, [pc, #376]	@ (80055e4 <_printf_i+0x214>)
 800546c:	270a      	movs	r7, #10
 800546e:	9304      	str	r3, [sp, #16]
 8005470:	e018      	b.n	80054a4 <_printf_i+0xd4>
 8005472:	6806      	ldr	r6, [r0, #0]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	0649      	lsls	r1, r1, #25
 8005478:	d5f1      	bpl.n	800545e <_printf_i+0x8e>
 800547a:	b236      	sxth	r6, r6
 800547c:	e7ef      	b.n	800545e <_printf_i+0x8e>
 800547e:	6808      	ldr	r0, [r1, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	c940      	ldmia	r1!, {r6}
 8005484:	0605      	lsls	r5, r0, #24
 8005486:	d402      	bmi.n	800548e <_printf_i+0xbe>
 8005488:	0640      	lsls	r0, r0, #25
 800548a:	d500      	bpl.n	800548e <_printf_i+0xbe>
 800548c:	b2b6      	uxth	r6, r6
 800548e:	6019      	str	r1, [r3, #0]
 8005490:	4b54      	ldr	r3, [pc, #336]	@ (80055e4 <_printf_i+0x214>)
 8005492:	270a      	movs	r7, #10
 8005494:	9304      	str	r3, [sp, #16]
 8005496:	2a6f      	cmp	r2, #111	@ 0x6f
 8005498:	d100      	bne.n	800549c <_printf_i+0xcc>
 800549a:	3f02      	subs	r7, #2
 800549c:	0023      	movs	r3, r4
 800549e:	2200      	movs	r2, #0
 80054a0:	3343      	adds	r3, #67	@ 0x43
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	60a3      	str	r3, [r4, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	db03      	blt.n	80054b4 <_printf_i+0xe4>
 80054ac:	2104      	movs	r1, #4
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	438a      	bics	r2, r1
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	2e00      	cmp	r6, #0
 80054b6:	d102      	bne.n	80054be <_printf_i+0xee>
 80054b8:	9d03      	ldr	r5, [sp, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <_printf_i+0x108>
 80054be:	9d03      	ldr	r5, [sp, #12]
 80054c0:	0030      	movs	r0, r6
 80054c2:	0039      	movs	r1, r7
 80054c4:	f7fa feb8 	bl	8000238 <__aeabi_uidivmod>
 80054c8:	9b04      	ldr	r3, [sp, #16]
 80054ca:	3d01      	subs	r5, #1
 80054cc:	5c5b      	ldrb	r3, [r3, r1]
 80054ce:	702b      	strb	r3, [r5, #0]
 80054d0:	0033      	movs	r3, r6
 80054d2:	0006      	movs	r6, r0
 80054d4:	429f      	cmp	r7, r3
 80054d6:	d9f3      	bls.n	80054c0 <_printf_i+0xf0>
 80054d8:	2f08      	cmp	r7, #8
 80054da:	d109      	bne.n	80054f0 <_printf_i+0x120>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	07db      	lsls	r3, r3, #31
 80054e0:	d506      	bpl.n	80054f0 <_printf_i+0x120>
 80054e2:	6862      	ldr	r2, [r4, #4]
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	dc02      	bgt.n	80054f0 <_printf_i+0x120>
 80054ea:	2330      	movs	r3, #48	@ 0x30
 80054ec:	3d01      	subs	r5, #1
 80054ee:	702b      	strb	r3, [r5, #0]
 80054f0:	9b03      	ldr	r3, [sp, #12]
 80054f2:	1b5b      	subs	r3, r3, r5
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	9b07      	ldr	r3, [sp, #28]
 80054f8:	0021      	movs	r1, r4
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	9805      	ldr	r0, [sp, #20]
 80054fe:	9b06      	ldr	r3, [sp, #24]
 8005500:	aa09      	add	r2, sp, #36	@ 0x24
 8005502:	f7ff fef5 	bl	80052f0 <_printf_common>
 8005506:	3001      	adds	r0, #1
 8005508:	d148      	bne.n	800559c <_printf_i+0x1cc>
 800550a:	2001      	movs	r0, #1
 800550c:	4240      	negs	r0, r0
 800550e:	b00b      	add	sp, #44	@ 0x2c
 8005510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005512:	2220      	movs	r2, #32
 8005514:	6809      	ldr	r1, [r1, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	6022      	str	r2, [r4, #0]
 800551a:	2278      	movs	r2, #120	@ 0x78
 800551c:	4932      	ldr	r1, [pc, #200]	@ (80055e8 <_printf_i+0x218>)
 800551e:	9104      	str	r1, [sp, #16]
 8005520:	0021      	movs	r1, r4
 8005522:	3145      	adds	r1, #69	@ 0x45
 8005524:	700a      	strb	r2, [r1, #0]
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	c940      	ldmia	r1!, {r6}
 800552c:	0610      	lsls	r0, r2, #24
 800552e:	d402      	bmi.n	8005536 <_printf_i+0x166>
 8005530:	0650      	lsls	r0, r2, #25
 8005532:	d500      	bpl.n	8005536 <_printf_i+0x166>
 8005534:	b2b6      	uxth	r6, r6
 8005536:	6019      	str	r1, [r3, #0]
 8005538:	07d3      	lsls	r3, r2, #31
 800553a:	d502      	bpl.n	8005542 <_printf_i+0x172>
 800553c:	2320      	movs	r3, #32
 800553e:	4313      	orrs	r3, r2
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	2e00      	cmp	r6, #0
 8005544:	d001      	beq.n	800554a <_printf_i+0x17a>
 8005546:	2710      	movs	r7, #16
 8005548:	e7a8      	b.n	800549c <_printf_i+0xcc>
 800554a:	2220      	movs	r2, #32
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	4393      	bics	r3, r2
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	e7f8      	b.n	8005546 <_printf_i+0x176>
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	680d      	ldr	r5, [r1, #0]
 8005558:	1d10      	adds	r0, r2, #4
 800555a:	6949      	ldr	r1, [r1, #20]
 800555c:	6018      	str	r0, [r3, #0]
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	062e      	lsls	r6, r5, #24
 8005562:	d501      	bpl.n	8005568 <_printf_i+0x198>
 8005564:	6019      	str	r1, [r3, #0]
 8005566:	e002      	b.n	800556e <_printf_i+0x19e>
 8005568:	066d      	lsls	r5, r5, #25
 800556a:	d5fb      	bpl.n	8005564 <_printf_i+0x194>
 800556c:	8019      	strh	r1, [r3, #0]
 800556e:	2300      	movs	r3, #0
 8005570:	9d03      	ldr	r5, [sp, #12]
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	e7bf      	b.n	80054f6 <_printf_i+0x126>
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	1d11      	adds	r1, r2, #4
 800557a:	6019      	str	r1, [r3, #0]
 800557c:	6815      	ldr	r5, [r2, #0]
 800557e:	2100      	movs	r1, #0
 8005580:	0028      	movs	r0, r5
 8005582:	6862      	ldr	r2, [r4, #4]
 8005584:	f000 f907 	bl	8005796 <memchr>
 8005588:	2800      	cmp	r0, #0
 800558a:	d001      	beq.n	8005590 <_printf_i+0x1c0>
 800558c:	1b40      	subs	r0, r0, r5
 800558e:	6060      	str	r0, [r4, #4]
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	2300      	movs	r3, #0
 8005596:	9a03      	ldr	r2, [sp, #12]
 8005598:	7013      	strb	r3, [r2, #0]
 800559a:	e7ac      	b.n	80054f6 <_printf_i+0x126>
 800559c:	002a      	movs	r2, r5
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	9906      	ldr	r1, [sp, #24]
 80055a2:	9805      	ldr	r0, [sp, #20]
 80055a4:	9d07      	ldr	r5, [sp, #28]
 80055a6:	47a8      	blx	r5
 80055a8:	3001      	adds	r0, #1
 80055aa:	d0ae      	beq.n	800550a <_printf_i+0x13a>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	079b      	lsls	r3, r3, #30
 80055b0:	d415      	bmi.n	80055de <_printf_i+0x20e>
 80055b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b4:	68e0      	ldr	r0, [r4, #12]
 80055b6:	4298      	cmp	r0, r3
 80055b8:	daa9      	bge.n	800550e <_printf_i+0x13e>
 80055ba:	0018      	movs	r0, r3
 80055bc:	e7a7      	b.n	800550e <_printf_i+0x13e>
 80055be:	0022      	movs	r2, r4
 80055c0:	2301      	movs	r3, #1
 80055c2:	9906      	ldr	r1, [sp, #24]
 80055c4:	9805      	ldr	r0, [sp, #20]
 80055c6:	9e07      	ldr	r6, [sp, #28]
 80055c8:	3219      	adds	r2, #25
 80055ca:	47b0      	blx	r6
 80055cc:	3001      	adds	r0, #1
 80055ce:	d09c      	beq.n	800550a <_printf_i+0x13a>
 80055d0:	3501      	adds	r5, #1
 80055d2:	68e3      	ldr	r3, [r4, #12]
 80055d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	42ab      	cmp	r3, r5
 80055da:	dcf0      	bgt.n	80055be <_printf_i+0x1ee>
 80055dc:	e7e9      	b.n	80055b2 <_printf_i+0x1e2>
 80055de:	2500      	movs	r5, #0
 80055e0:	e7f7      	b.n	80055d2 <_printf_i+0x202>
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	08006147 	.word	0x08006147
 80055e8:	08006158 	.word	0x08006158

080055ec <__sflush_r>:
 80055ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ee:	220c      	movs	r2, #12
 80055f0:	5e8b      	ldrsh	r3, [r1, r2]
 80055f2:	0005      	movs	r5, r0
 80055f4:	000c      	movs	r4, r1
 80055f6:	071a      	lsls	r2, r3, #28
 80055f8:	d456      	bmi.n	80056a8 <__sflush_r+0xbc>
 80055fa:	684a      	ldr	r2, [r1, #4]
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	dc02      	bgt.n	8005606 <__sflush_r+0x1a>
 8005600:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005602:	2a00      	cmp	r2, #0
 8005604:	dd4e      	ble.n	80056a4 <__sflush_r+0xb8>
 8005606:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005608:	2f00      	cmp	r7, #0
 800560a:	d04b      	beq.n	80056a4 <__sflush_r+0xb8>
 800560c:	2200      	movs	r2, #0
 800560e:	2080      	movs	r0, #128	@ 0x80
 8005610:	682e      	ldr	r6, [r5, #0]
 8005612:	602a      	str	r2, [r5, #0]
 8005614:	001a      	movs	r2, r3
 8005616:	0140      	lsls	r0, r0, #5
 8005618:	6a21      	ldr	r1, [r4, #32]
 800561a:	4002      	ands	r2, r0
 800561c:	4203      	tst	r3, r0
 800561e:	d033      	beq.n	8005688 <__sflush_r+0x9c>
 8005620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	075b      	lsls	r3, r3, #29
 8005626:	d506      	bpl.n	8005636 <__sflush_r+0x4a>
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	1ad2      	subs	r2, r2, r3
 800562c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <__sflush_r+0x4a>
 8005632:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	0028      	movs	r0, r5
 800563a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800563c:	6a21      	ldr	r1, [r4, #32]
 800563e:	47b8      	blx	r7
 8005640:	89a2      	ldrh	r2, [r4, #12]
 8005642:	1c43      	adds	r3, r0, #1
 8005644:	d106      	bne.n	8005654 <__sflush_r+0x68>
 8005646:	6829      	ldr	r1, [r5, #0]
 8005648:	291d      	cmp	r1, #29
 800564a:	d846      	bhi.n	80056da <__sflush_r+0xee>
 800564c:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <__sflush_r+0x108>)
 800564e:	410b      	asrs	r3, r1
 8005650:	07db      	lsls	r3, r3, #31
 8005652:	d442      	bmi.n	80056da <__sflush_r+0xee>
 8005654:	2300      	movs	r3, #0
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	04d2      	lsls	r2, r2, #19
 800565e:	d505      	bpl.n	800566c <__sflush_r+0x80>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <__sflush_r+0x7e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d100      	bne.n	800566c <__sflush_r+0x80>
 800566a:	6560      	str	r0, [r4, #84]	@ 0x54
 800566c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800566e:	602e      	str	r6, [r5, #0]
 8005670:	2900      	cmp	r1, #0
 8005672:	d017      	beq.n	80056a4 <__sflush_r+0xb8>
 8005674:	0023      	movs	r3, r4
 8005676:	3344      	adds	r3, #68	@ 0x44
 8005678:	4299      	cmp	r1, r3
 800567a:	d002      	beq.n	8005682 <__sflush_r+0x96>
 800567c:	0028      	movs	r0, r5
 800567e:	f7ff fc8f 	bl	8004fa0 <_free_r>
 8005682:	2300      	movs	r3, #0
 8005684:	6363      	str	r3, [r4, #52]	@ 0x34
 8005686:	e00d      	b.n	80056a4 <__sflush_r+0xb8>
 8005688:	2301      	movs	r3, #1
 800568a:	0028      	movs	r0, r5
 800568c:	47b8      	blx	r7
 800568e:	0002      	movs	r2, r0
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d1c6      	bne.n	8005622 <__sflush_r+0x36>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0c3      	beq.n	8005622 <__sflush_r+0x36>
 800569a:	2b1d      	cmp	r3, #29
 800569c:	d001      	beq.n	80056a2 <__sflush_r+0xb6>
 800569e:	2b16      	cmp	r3, #22
 80056a0:	d11a      	bne.n	80056d8 <__sflush_r+0xec>
 80056a2:	602e      	str	r6, [r5, #0]
 80056a4:	2000      	movs	r0, #0
 80056a6:	e01e      	b.n	80056e6 <__sflush_r+0xfa>
 80056a8:	690e      	ldr	r6, [r1, #16]
 80056aa:	2e00      	cmp	r6, #0
 80056ac:	d0fa      	beq.n	80056a4 <__sflush_r+0xb8>
 80056ae:	680f      	ldr	r7, [r1, #0]
 80056b0:	600e      	str	r6, [r1, #0]
 80056b2:	1bba      	subs	r2, r7, r6
 80056b4:	9201      	str	r2, [sp, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	079b      	lsls	r3, r3, #30
 80056ba:	d100      	bne.n	80056be <__sflush_r+0xd2>
 80056bc:	694a      	ldr	r2, [r1, #20]
 80056be:	60a2      	str	r2, [r4, #8]
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	ddee      	ble.n	80056a4 <__sflush_r+0xb8>
 80056c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80056c8:	0032      	movs	r2, r6
 80056ca:	001f      	movs	r7, r3
 80056cc:	0028      	movs	r0, r5
 80056ce:	9b01      	ldr	r3, [sp, #4]
 80056d0:	6a21      	ldr	r1, [r4, #32]
 80056d2:	47b8      	blx	r7
 80056d4:	2800      	cmp	r0, #0
 80056d6:	dc07      	bgt.n	80056e8 <__sflush_r+0xfc>
 80056d8:	89a2      	ldrh	r2, [r4, #12]
 80056da:	2340      	movs	r3, #64	@ 0x40
 80056dc:	2001      	movs	r0, #1
 80056de:	4313      	orrs	r3, r2
 80056e0:	b21b      	sxth	r3, r3
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	4240      	negs	r0, r0
 80056e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	1836      	adds	r6, r6, r0
 80056ec:	1a1b      	subs	r3, r3, r0
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	e7e6      	b.n	80056c0 <__sflush_r+0xd4>
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	dfbffffe 	.word	0xdfbffffe

080056f8 <_fflush_r>:
 80056f8:	690b      	ldr	r3, [r1, #16]
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	0005      	movs	r5, r0
 80056fe:	000c      	movs	r4, r1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <_fflush_r+0x12>
 8005704:	2500      	movs	r5, #0
 8005706:	0028      	movs	r0, r5
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	2800      	cmp	r0, #0
 800570c:	d004      	beq.n	8005718 <_fflush_r+0x20>
 800570e:	6a03      	ldr	r3, [r0, #32]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <_fflush_r+0x20>
 8005714:	f7ff fa52 	bl	8004bbc <__sinit>
 8005718:	220c      	movs	r2, #12
 800571a:	5ea3      	ldrsh	r3, [r4, r2]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f1      	beq.n	8005704 <_fflush_r+0xc>
 8005720:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005722:	07d2      	lsls	r2, r2, #31
 8005724:	d404      	bmi.n	8005730 <_fflush_r+0x38>
 8005726:	059b      	lsls	r3, r3, #22
 8005728:	d402      	bmi.n	8005730 <_fflush_r+0x38>
 800572a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800572c:	f7ff fc0f 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8005730:	0028      	movs	r0, r5
 8005732:	0021      	movs	r1, r4
 8005734:	f7ff ff5a 	bl	80055ec <__sflush_r>
 8005738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800573a:	0005      	movs	r5, r0
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d4e2      	bmi.n	8005706 <_fflush_r+0xe>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	059b      	lsls	r3, r3, #22
 8005744:	d4df      	bmi.n	8005706 <_fflush_r+0xe>
 8005746:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005748:	f7ff fc02 	bl	8004f50 <__retarget_lock_release_recursive>
 800574c:	e7db      	b.n	8005706 <_fflush_r+0xe>
	...

08005750 <fiprintf>:
 8005750:	b40e      	push	{r1, r2, r3}
 8005752:	b517      	push	{r0, r1, r2, r4, lr}
 8005754:	4c05      	ldr	r4, [pc, #20]	@ (800576c <fiprintf+0x1c>)
 8005756:	ab05      	add	r3, sp, #20
 8005758:	cb04      	ldmia	r3!, {r2}
 800575a:	0001      	movs	r1, r0
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	f000 f882 	bl	8005868 <_vfiprintf_r>
 8005764:	bc1e      	pop	{r1, r2, r3, r4}
 8005766:	bc08      	pop	{r3}
 8005768:	b003      	add	sp, #12
 800576a:	4718      	bx	r3
 800576c:	20000018 	.word	0x20000018

08005770 <memmove>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4288      	cmp	r0, r1
 8005774:	d806      	bhi.n	8005784 <memmove+0x14>
 8005776:	2300      	movs	r3, #0
 8005778:	429a      	cmp	r2, r3
 800577a:	d008      	beq.n	800578e <memmove+0x1e>
 800577c:	5ccc      	ldrb	r4, [r1, r3]
 800577e:	54c4      	strb	r4, [r0, r3]
 8005780:	3301      	adds	r3, #1
 8005782:	e7f9      	b.n	8005778 <memmove+0x8>
 8005784:	188b      	adds	r3, r1, r2
 8005786:	4298      	cmp	r0, r3
 8005788:	d2f5      	bcs.n	8005776 <memmove+0x6>
 800578a:	3a01      	subs	r2, #1
 800578c:	d200      	bcs.n	8005790 <memmove+0x20>
 800578e:	bd10      	pop	{r4, pc}
 8005790:	5c8b      	ldrb	r3, [r1, r2]
 8005792:	5483      	strb	r3, [r0, r2]
 8005794:	e7f9      	b.n	800578a <memmove+0x1a>

08005796 <memchr>:
 8005796:	b2c9      	uxtb	r1, r1
 8005798:	1882      	adds	r2, r0, r2
 800579a:	4290      	cmp	r0, r2
 800579c:	d101      	bne.n	80057a2 <memchr+0xc>
 800579e:	2000      	movs	r0, #0
 80057a0:	4770      	bx	lr
 80057a2:	7803      	ldrb	r3, [r0, #0]
 80057a4:	428b      	cmp	r3, r1
 80057a6:	d0fb      	beq.n	80057a0 <memchr+0xa>
 80057a8:	3001      	adds	r0, #1
 80057aa:	e7f6      	b.n	800579a <memchr+0x4>

080057ac <abort>:
 80057ac:	2006      	movs	r0, #6
 80057ae:	b510      	push	{r4, lr}
 80057b0:	f000 fa40 	bl	8005c34 <raise>
 80057b4:	2001      	movs	r0, #1
 80057b6:	f7fb fea5 	bl	8001504 <_exit>

080057ba <_realloc_r>:
 80057ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057bc:	0006      	movs	r6, r0
 80057be:	000c      	movs	r4, r1
 80057c0:	0015      	movs	r5, r2
 80057c2:	2900      	cmp	r1, #0
 80057c4:	d105      	bne.n	80057d2 <_realloc_r+0x18>
 80057c6:	0011      	movs	r1, r2
 80057c8:	f7ff f842 	bl	8004850 <_malloc_r>
 80057cc:	0004      	movs	r4, r0
 80057ce:	0020      	movs	r0, r4
 80057d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d103      	bne.n	80057de <_realloc_r+0x24>
 80057d6:	f7ff fbe3 	bl	8004fa0 <_free_r>
 80057da:	2400      	movs	r4, #0
 80057dc:	e7f7      	b.n	80057ce <_realloc_r+0x14>
 80057de:	f000 fa49 	bl	8005c74 <_malloc_usable_size_r>
 80057e2:	0007      	movs	r7, r0
 80057e4:	4285      	cmp	r5, r0
 80057e6:	d802      	bhi.n	80057ee <_realloc_r+0x34>
 80057e8:	0843      	lsrs	r3, r0, #1
 80057ea:	42ab      	cmp	r3, r5
 80057ec:	d3ef      	bcc.n	80057ce <_realloc_r+0x14>
 80057ee:	0029      	movs	r1, r5
 80057f0:	0030      	movs	r0, r6
 80057f2:	f7ff f82d 	bl	8004850 <_malloc_r>
 80057f6:	9001      	str	r0, [sp, #4]
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d0ee      	beq.n	80057da <_realloc_r+0x20>
 80057fc:	002a      	movs	r2, r5
 80057fe:	42bd      	cmp	r5, r7
 8005800:	d900      	bls.n	8005804 <_realloc_r+0x4a>
 8005802:	003a      	movs	r2, r7
 8005804:	0021      	movs	r1, r4
 8005806:	9801      	ldr	r0, [sp, #4]
 8005808:	f7ff fba3 	bl	8004f52 <memcpy>
 800580c:	0021      	movs	r1, r4
 800580e:	0030      	movs	r0, r6
 8005810:	f7ff fbc6 	bl	8004fa0 <_free_r>
 8005814:	9c01      	ldr	r4, [sp, #4]
 8005816:	e7da      	b.n	80057ce <_realloc_r+0x14>

08005818 <__sfputc_r>:
 8005818:	6893      	ldr	r3, [r2, #8]
 800581a:	b510      	push	{r4, lr}
 800581c:	3b01      	subs	r3, #1
 800581e:	6093      	str	r3, [r2, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da04      	bge.n	800582e <__sfputc_r+0x16>
 8005824:	6994      	ldr	r4, [r2, #24]
 8005826:	42a3      	cmp	r3, r4
 8005828:	db07      	blt.n	800583a <__sfputc_r+0x22>
 800582a:	290a      	cmp	r1, #10
 800582c:	d005      	beq.n	800583a <__sfputc_r+0x22>
 800582e:	6813      	ldr	r3, [r2, #0]
 8005830:	1c58      	adds	r0, r3, #1
 8005832:	6010      	str	r0, [r2, #0]
 8005834:	7019      	strb	r1, [r3, #0]
 8005836:	0008      	movs	r0, r1
 8005838:	bd10      	pop	{r4, pc}
 800583a:	f000 f931 	bl	8005aa0 <__swbuf_r>
 800583e:	0001      	movs	r1, r0
 8005840:	e7f9      	b.n	8005836 <__sfputc_r+0x1e>

08005842 <__sfputs_r>:
 8005842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005844:	0006      	movs	r6, r0
 8005846:	000f      	movs	r7, r1
 8005848:	0014      	movs	r4, r2
 800584a:	18d5      	adds	r5, r2, r3
 800584c:	42ac      	cmp	r4, r5
 800584e:	d101      	bne.n	8005854 <__sfputs_r+0x12>
 8005850:	2000      	movs	r0, #0
 8005852:	e007      	b.n	8005864 <__sfputs_r+0x22>
 8005854:	7821      	ldrb	r1, [r4, #0]
 8005856:	003a      	movs	r2, r7
 8005858:	0030      	movs	r0, r6
 800585a:	f7ff ffdd 	bl	8005818 <__sfputc_r>
 800585e:	3401      	adds	r4, #1
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d1f3      	bne.n	800584c <__sfputs_r+0xa>
 8005864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005868 <_vfiprintf_r>:
 8005868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586a:	b0a1      	sub	sp, #132	@ 0x84
 800586c:	000f      	movs	r7, r1
 800586e:	0015      	movs	r5, r2
 8005870:	001e      	movs	r6, r3
 8005872:	9003      	str	r0, [sp, #12]
 8005874:	2800      	cmp	r0, #0
 8005876:	d004      	beq.n	8005882 <_vfiprintf_r+0x1a>
 8005878:	6a03      	ldr	r3, [r0, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <_vfiprintf_r+0x1a>
 800587e:	f7ff f99d 	bl	8004bbc <__sinit>
 8005882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005884:	07db      	lsls	r3, r3, #31
 8005886:	d405      	bmi.n	8005894 <_vfiprintf_r+0x2c>
 8005888:	89bb      	ldrh	r3, [r7, #12]
 800588a:	059b      	lsls	r3, r3, #22
 800588c:	d402      	bmi.n	8005894 <_vfiprintf_r+0x2c>
 800588e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005890:	f7ff fb5d 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8005894:	89bb      	ldrh	r3, [r7, #12]
 8005896:	071b      	lsls	r3, r3, #28
 8005898:	d502      	bpl.n	80058a0 <_vfiprintf_r+0x38>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d113      	bne.n	80058c8 <_vfiprintf_r+0x60>
 80058a0:	0039      	movs	r1, r7
 80058a2:	9803      	ldr	r0, [sp, #12]
 80058a4:	f000 f93e 	bl	8005b24 <__swsetup_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d00d      	beq.n	80058c8 <_vfiprintf_r+0x60>
 80058ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d503      	bpl.n	80058ba <_vfiprintf_r+0x52>
 80058b2:	2001      	movs	r0, #1
 80058b4:	4240      	negs	r0, r0
 80058b6:	b021      	add	sp, #132	@ 0x84
 80058b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ba:	89bb      	ldrh	r3, [r7, #12]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	d4f8      	bmi.n	80058b2 <_vfiprintf_r+0x4a>
 80058c0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80058c2:	f7ff fb45 	bl	8004f50 <__retarget_lock_release_recursive>
 80058c6:	e7f4      	b.n	80058b2 <_vfiprintf_r+0x4a>
 80058c8:	2300      	movs	r3, #0
 80058ca:	ac08      	add	r4, sp, #32
 80058cc:	6163      	str	r3, [r4, #20]
 80058ce:	3320      	adds	r3, #32
 80058d0:	7663      	strb	r3, [r4, #25]
 80058d2:	3310      	adds	r3, #16
 80058d4:	76a3      	strb	r3, [r4, #26]
 80058d6:	9607      	str	r6, [sp, #28]
 80058d8:	002e      	movs	r6, r5
 80058da:	7833      	ldrb	r3, [r6, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <_vfiprintf_r+0x7c>
 80058e0:	2b25      	cmp	r3, #37	@ 0x25
 80058e2:	d148      	bne.n	8005976 <_vfiprintf_r+0x10e>
 80058e4:	1b73      	subs	r3, r6, r5
 80058e6:	9305      	str	r3, [sp, #20]
 80058e8:	42ae      	cmp	r6, r5
 80058ea:	d00b      	beq.n	8005904 <_vfiprintf_r+0x9c>
 80058ec:	002a      	movs	r2, r5
 80058ee:	0039      	movs	r1, r7
 80058f0:	9803      	ldr	r0, [sp, #12]
 80058f2:	f7ff ffa6 	bl	8005842 <__sfputs_r>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d100      	bne.n	80058fc <_vfiprintf_r+0x94>
 80058fa:	e0ae      	b.n	8005a5a <_vfiprintf_r+0x1f2>
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	9a05      	ldr	r2, [sp, #20]
 8005900:	189b      	adds	r3, r3, r2
 8005902:	6163      	str	r3, [r4, #20]
 8005904:	7833      	ldrb	r3, [r6, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d100      	bne.n	800590c <_vfiprintf_r+0xa4>
 800590a:	e0a6      	b.n	8005a5a <_vfiprintf_r+0x1f2>
 800590c:	2201      	movs	r2, #1
 800590e:	2300      	movs	r3, #0
 8005910:	4252      	negs	r2, r2
 8005912:	6062      	str	r2, [r4, #4]
 8005914:	a904      	add	r1, sp, #16
 8005916:	3254      	adds	r2, #84	@ 0x54
 8005918:	1852      	adds	r2, r2, r1
 800591a:	1c75      	adds	r5, r6, #1
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	60e3      	str	r3, [r4, #12]
 8005920:	60a3      	str	r3, [r4, #8]
 8005922:	7013      	strb	r3, [r2, #0]
 8005924:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005926:	4b59      	ldr	r3, [pc, #356]	@ (8005a8c <_vfiprintf_r+0x224>)
 8005928:	2205      	movs	r2, #5
 800592a:	0018      	movs	r0, r3
 800592c:	7829      	ldrb	r1, [r5, #0]
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	f7ff ff31 	bl	8005796 <memchr>
 8005934:	1c6e      	adds	r6, r5, #1
 8005936:	2800      	cmp	r0, #0
 8005938:	d11f      	bne.n	800597a <_vfiprintf_r+0x112>
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	06d3      	lsls	r3, r2, #27
 800593e:	d504      	bpl.n	800594a <_vfiprintf_r+0xe2>
 8005940:	2353      	movs	r3, #83	@ 0x53
 8005942:	a904      	add	r1, sp, #16
 8005944:	185b      	adds	r3, r3, r1
 8005946:	2120      	movs	r1, #32
 8005948:	7019      	strb	r1, [r3, #0]
 800594a:	0713      	lsls	r3, r2, #28
 800594c:	d504      	bpl.n	8005958 <_vfiprintf_r+0xf0>
 800594e:	2353      	movs	r3, #83	@ 0x53
 8005950:	a904      	add	r1, sp, #16
 8005952:	185b      	adds	r3, r3, r1
 8005954:	212b      	movs	r1, #43	@ 0x2b
 8005956:	7019      	strb	r1, [r3, #0]
 8005958:	782b      	ldrb	r3, [r5, #0]
 800595a:	2b2a      	cmp	r3, #42	@ 0x2a
 800595c:	d016      	beq.n	800598c <_vfiprintf_r+0x124>
 800595e:	002e      	movs	r6, r5
 8005960:	2100      	movs	r1, #0
 8005962:	200a      	movs	r0, #10
 8005964:	68e3      	ldr	r3, [r4, #12]
 8005966:	7832      	ldrb	r2, [r6, #0]
 8005968:	1c75      	adds	r5, r6, #1
 800596a:	3a30      	subs	r2, #48	@ 0x30
 800596c:	2a09      	cmp	r2, #9
 800596e:	d950      	bls.n	8005a12 <_vfiprintf_r+0x1aa>
 8005970:	2900      	cmp	r1, #0
 8005972:	d111      	bne.n	8005998 <_vfiprintf_r+0x130>
 8005974:	e017      	b.n	80059a6 <_vfiprintf_r+0x13e>
 8005976:	3601      	adds	r6, #1
 8005978:	e7af      	b.n	80058da <_vfiprintf_r+0x72>
 800597a:	9b05      	ldr	r3, [sp, #20]
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	1ac0      	subs	r0, r0, r3
 8005980:	2301      	movs	r3, #1
 8005982:	4083      	lsls	r3, r0
 8005984:	4313      	orrs	r3, r2
 8005986:	0035      	movs	r5, r6
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	e7cc      	b.n	8005926 <_vfiprintf_r+0xbe>
 800598c:	9b07      	ldr	r3, [sp, #28]
 800598e:	1d19      	adds	r1, r3, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	9107      	str	r1, [sp, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	db01      	blt.n	800599c <_vfiprintf_r+0x134>
 8005998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800599a:	e004      	b.n	80059a6 <_vfiprintf_r+0x13e>
 800599c:	425b      	negs	r3, r3
 800599e:	60e3      	str	r3, [r4, #12]
 80059a0:	2302      	movs	r3, #2
 80059a2:	4313      	orrs	r3, r2
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	7833      	ldrb	r3, [r6, #0]
 80059a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80059aa:	d10c      	bne.n	80059c6 <_vfiprintf_r+0x15e>
 80059ac:	7873      	ldrb	r3, [r6, #1]
 80059ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b0:	d134      	bne.n	8005a1c <_vfiprintf_r+0x1b4>
 80059b2:	9b07      	ldr	r3, [sp, #28]
 80059b4:	3602      	adds	r6, #2
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	9207      	str	r2, [sp, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da01      	bge.n	80059c4 <_vfiprintf_r+0x15c>
 80059c0:	2301      	movs	r3, #1
 80059c2:	425b      	negs	r3, r3
 80059c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c6:	4d32      	ldr	r5, [pc, #200]	@ (8005a90 <_vfiprintf_r+0x228>)
 80059c8:	2203      	movs	r2, #3
 80059ca:	0028      	movs	r0, r5
 80059cc:	7831      	ldrb	r1, [r6, #0]
 80059ce:	f7ff fee2 	bl	8005796 <memchr>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d006      	beq.n	80059e4 <_vfiprintf_r+0x17c>
 80059d6:	2340      	movs	r3, #64	@ 0x40
 80059d8:	1b40      	subs	r0, r0, r5
 80059da:	4083      	lsls	r3, r0
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	3601      	adds	r6, #1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	7831      	ldrb	r1, [r6, #0]
 80059e6:	2206      	movs	r2, #6
 80059e8:	482a      	ldr	r0, [pc, #168]	@ (8005a94 <_vfiprintf_r+0x22c>)
 80059ea:	1c75      	adds	r5, r6, #1
 80059ec:	7621      	strb	r1, [r4, #24]
 80059ee:	f7ff fed2 	bl	8005796 <memchr>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d040      	beq.n	8005a78 <_vfiprintf_r+0x210>
 80059f6:	4b28      	ldr	r3, [pc, #160]	@ (8005a98 <_vfiprintf_r+0x230>)
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d122      	bne.n	8005a42 <_vfiprintf_r+0x1da>
 80059fc:	2207      	movs	r2, #7
 80059fe:	9b07      	ldr	r3, [sp, #28]
 8005a00:	3307      	adds	r3, #7
 8005a02:	4393      	bics	r3, r2
 8005a04:	3308      	adds	r3, #8
 8005a06:	9307      	str	r3, [sp, #28]
 8005a08:	6963      	ldr	r3, [r4, #20]
 8005a0a:	9a04      	ldr	r2, [sp, #16]
 8005a0c:	189b      	adds	r3, r3, r2
 8005a0e:	6163      	str	r3, [r4, #20]
 8005a10:	e762      	b.n	80058d8 <_vfiprintf_r+0x70>
 8005a12:	4343      	muls	r3, r0
 8005a14:	002e      	movs	r6, r5
 8005a16:	2101      	movs	r1, #1
 8005a18:	189b      	adds	r3, r3, r2
 8005a1a:	e7a4      	b.n	8005966 <_vfiprintf_r+0xfe>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	200a      	movs	r0, #10
 8005a20:	0019      	movs	r1, r3
 8005a22:	3601      	adds	r6, #1
 8005a24:	6063      	str	r3, [r4, #4]
 8005a26:	7832      	ldrb	r2, [r6, #0]
 8005a28:	1c75      	adds	r5, r6, #1
 8005a2a:	3a30      	subs	r2, #48	@ 0x30
 8005a2c:	2a09      	cmp	r2, #9
 8005a2e:	d903      	bls.n	8005a38 <_vfiprintf_r+0x1d0>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0c8      	beq.n	80059c6 <_vfiprintf_r+0x15e>
 8005a34:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a36:	e7c6      	b.n	80059c6 <_vfiprintf_r+0x15e>
 8005a38:	4341      	muls	r1, r0
 8005a3a:	002e      	movs	r6, r5
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	1889      	adds	r1, r1, r2
 8005a40:	e7f1      	b.n	8005a26 <_vfiprintf_r+0x1be>
 8005a42:	aa07      	add	r2, sp, #28
 8005a44:	9200      	str	r2, [sp, #0]
 8005a46:	0021      	movs	r1, r4
 8005a48:	003a      	movs	r2, r7
 8005a4a:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <_vfiprintf_r+0x234>)
 8005a4c:	9803      	ldr	r0, [sp, #12]
 8005a4e:	e000      	b.n	8005a52 <_vfiprintf_r+0x1ea>
 8005a50:	bf00      	nop
 8005a52:	9004      	str	r0, [sp, #16]
 8005a54:	9b04      	ldr	r3, [sp, #16]
 8005a56:	3301      	adds	r3, #1
 8005a58:	d1d6      	bne.n	8005a08 <_vfiprintf_r+0x1a0>
 8005a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a5c:	07db      	lsls	r3, r3, #31
 8005a5e:	d405      	bmi.n	8005a6c <_vfiprintf_r+0x204>
 8005a60:	89bb      	ldrh	r3, [r7, #12]
 8005a62:	059b      	lsls	r3, r3, #22
 8005a64:	d402      	bmi.n	8005a6c <_vfiprintf_r+0x204>
 8005a66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a68:	f7ff fa72 	bl	8004f50 <__retarget_lock_release_recursive>
 8005a6c:	89bb      	ldrh	r3, [r7, #12]
 8005a6e:	065b      	lsls	r3, r3, #25
 8005a70:	d500      	bpl.n	8005a74 <_vfiprintf_r+0x20c>
 8005a72:	e71e      	b.n	80058b2 <_vfiprintf_r+0x4a>
 8005a74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005a76:	e71e      	b.n	80058b6 <_vfiprintf_r+0x4e>
 8005a78:	aa07      	add	r2, sp, #28
 8005a7a:	9200      	str	r2, [sp, #0]
 8005a7c:	0021      	movs	r1, r4
 8005a7e:	003a      	movs	r2, r7
 8005a80:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <_vfiprintf_r+0x234>)
 8005a82:	9803      	ldr	r0, [sp, #12]
 8005a84:	f7ff fca4 	bl	80053d0 <_printf_i>
 8005a88:	e7e3      	b.n	8005a52 <_vfiprintf_r+0x1ea>
 8005a8a:	46c0      	nop			@ (mov r8, r8)
 8005a8c:	08006136 	.word	0x08006136
 8005a90:	0800613c 	.word	0x0800613c
 8005a94:	08006140 	.word	0x08006140
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	08005843 	.word	0x08005843

08005aa0 <__swbuf_r>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	0006      	movs	r6, r0
 8005aa4:	000d      	movs	r5, r1
 8005aa6:	0014      	movs	r4, r2
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d004      	beq.n	8005ab6 <__swbuf_r+0x16>
 8005aac:	6a03      	ldr	r3, [r0, #32]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <__swbuf_r+0x16>
 8005ab2:	f7ff f883 	bl	8004bbc <__sinit>
 8005ab6:	69a3      	ldr	r3, [r4, #24]
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	d502      	bpl.n	8005ac6 <__swbuf_r+0x26>
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <__swbuf_r+0x3a>
 8005ac6:	0021      	movs	r1, r4
 8005ac8:	0030      	movs	r0, r6
 8005aca:	f000 f82b 	bl	8005b24 <__swsetup_r>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d003      	beq.n	8005ada <__swbuf_r+0x3a>
 8005ad2:	2501      	movs	r5, #1
 8005ad4:	426d      	negs	r5, r5
 8005ad6:	0028      	movs	r0, r5
 8005ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	b2ef      	uxtb	r7, r5
 8005ae0:	1ac0      	subs	r0, r0, r3
 8005ae2:	6963      	ldr	r3, [r4, #20]
 8005ae4:	b2ed      	uxtb	r5, r5
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	dc05      	bgt.n	8005af6 <__swbuf_r+0x56>
 8005aea:	0021      	movs	r1, r4
 8005aec:	0030      	movs	r0, r6
 8005aee:	f7ff fe03 	bl	80056f8 <_fflush_r>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d1ed      	bne.n	8005ad2 <__swbuf_r+0x32>
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	3001      	adds	r0, #1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	6022      	str	r2, [r4, #0]
 8005b04:	701f      	strb	r7, [r3, #0]
 8005b06:	6963      	ldr	r3, [r4, #20]
 8005b08:	4283      	cmp	r3, r0
 8005b0a:	d004      	beq.n	8005b16 <__swbuf_r+0x76>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d5e1      	bpl.n	8005ad6 <__swbuf_r+0x36>
 8005b12:	2d0a      	cmp	r5, #10
 8005b14:	d1df      	bne.n	8005ad6 <__swbuf_r+0x36>
 8005b16:	0021      	movs	r1, r4
 8005b18:	0030      	movs	r0, r6
 8005b1a:	f7ff fded 	bl	80056f8 <_fflush_r>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0d9      	beq.n	8005ad6 <__swbuf_r+0x36>
 8005b22:	e7d6      	b.n	8005ad2 <__swbuf_r+0x32>

08005b24 <__swsetup_r>:
 8005b24:	4b2d      	ldr	r3, [pc, #180]	@ (8005bdc <__swsetup_r+0xb8>)
 8005b26:	b570      	push	{r4, r5, r6, lr}
 8005b28:	0005      	movs	r5, r0
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	000c      	movs	r4, r1
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d004      	beq.n	8005b3c <__swsetup_r+0x18>
 8005b32:	6a03      	ldr	r3, [r0, #32]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <__swsetup_r+0x18>
 8005b38:	f7ff f840 	bl	8004bbc <__sinit>
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	5ee2      	ldrsh	r2, [r4, r3]
 8005b40:	0713      	lsls	r3, r2, #28
 8005b42:	d423      	bmi.n	8005b8c <__swsetup_r+0x68>
 8005b44:	06d3      	lsls	r3, r2, #27
 8005b46:	d407      	bmi.n	8005b58 <__swsetup_r+0x34>
 8005b48:	2309      	movs	r3, #9
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	2340      	movs	r3, #64	@ 0x40
 8005b4e:	2001      	movs	r0, #1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	4240      	negs	r0, r0
 8005b56:	e03a      	b.n	8005bce <__swsetup_r+0xaa>
 8005b58:	0752      	lsls	r2, r2, #29
 8005b5a:	d513      	bpl.n	8005b84 <__swsetup_r+0x60>
 8005b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d008      	beq.n	8005b74 <__swsetup_r+0x50>
 8005b62:	0023      	movs	r3, r4
 8005b64:	3344      	adds	r3, #68	@ 0x44
 8005b66:	4299      	cmp	r1, r3
 8005b68:	d002      	beq.n	8005b70 <__swsetup_r+0x4c>
 8005b6a:	0028      	movs	r0, r5
 8005b6c:	f7ff fa18 	bl	8004fa0 <_free_r>
 8005b70:	2300      	movs	r3, #0
 8005b72:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b74:	2224      	movs	r2, #36	@ 0x24
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	4393      	bics	r3, r2
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	6923      	ldr	r3, [r4, #16]
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	2308      	movs	r3, #8
 8005b86:	89a2      	ldrh	r2, [r4, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	81a3      	strh	r3, [r4, #12]
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <__swsetup_r+0x86>
 8005b92:	21a0      	movs	r1, #160	@ 0xa0
 8005b94:	2280      	movs	r2, #128	@ 0x80
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	0089      	lsls	r1, r1, #2
 8005b9a:	0092      	lsls	r2, r2, #2
 8005b9c:	400b      	ands	r3, r1
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <__swsetup_r+0x86>
 8005ba2:	0021      	movs	r1, r4
 8005ba4:	0028      	movs	r0, r5
 8005ba6:	f000 f897 	bl	8005cd8 <__smakebuf_r>
 8005baa:	230c      	movs	r3, #12
 8005bac:	5ee2      	ldrsh	r2, [r4, r3]
 8005bae:	2101      	movs	r1, #1
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	420a      	tst	r2, r1
 8005bb6:	d00b      	beq.n	8005bd0 <__swsetup_r+0xac>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	6963      	ldr	r3, [r4, #20]
 8005bbe:	425b      	negs	r3, r3
 8005bc0:	61a3      	str	r3, [r4, #24]
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	4283      	cmp	r3, r0
 8005bc8:	d101      	bne.n	8005bce <__swsetup_r+0xaa>
 8005bca:	0613      	lsls	r3, r2, #24
 8005bcc:	d4be      	bmi.n	8005b4c <__swsetup_r+0x28>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	0791      	lsls	r1, r2, #30
 8005bd2:	d400      	bmi.n	8005bd6 <__swsetup_r+0xb2>
 8005bd4:	6963      	ldr	r3, [r4, #20]
 8005bd6:	60a3      	str	r3, [r4, #8]
 8005bd8:	e7f3      	b.n	8005bc2 <__swsetup_r+0x9e>
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	20000018 	.word	0x20000018

08005be0 <_raise_r>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	0004      	movs	r4, r0
 8005be4:	000d      	movs	r5, r1
 8005be6:	291f      	cmp	r1, #31
 8005be8:	d904      	bls.n	8005bf4 <_raise_r+0x14>
 8005bea:	2316      	movs	r3, #22
 8005bec:	6003      	str	r3, [r0, #0]
 8005bee:	2001      	movs	r0, #1
 8005bf0:	4240      	negs	r0, r0
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <_raise_r+0x24>
 8005bfa:	008a      	lsls	r2, r1, #2
 8005bfc:	189b      	adds	r3, r3, r2
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	d108      	bne.n	8005c16 <_raise_r+0x36>
 8005c04:	0020      	movs	r0, r4
 8005c06:	f000 f831 	bl	8005c6c <_getpid_r>
 8005c0a:	002a      	movs	r2, r5
 8005c0c:	0001      	movs	r1, r0
 8005c0e:	0020      	movs	r0, r4
 8005c10:	f000 f81a 	bl	8005c48 <_kill_r>
 8005c14:	e7ed      	b.n	8005bf2 <_raise_r+0x12>
 8005c16:	2a01      	cmp	r2, #1
 8005c18:	d009      	beq.n	8005c2e <_raise_r+0x4e>
 8005c1a:	1c51      	adds	r1, r2, #1
 8005c1c:	d103      	bne.n	8005c26 <_raise_r+0x46>
 8005c1e:	2316      	movs	r3, #22
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	2001      	movs	r0, #1
 8005c24:	e7e5      	b.n	8005bf2 <_raise_r+0x12>
 8005c26:	2100      	movs	r1, #0
 8005c28:	0028      	movs	r0, r5
 8005c2a:	6019      	str	r1, [r3, #0]
 8005c2c:	4790      	blx	r2
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7df      	b.n	8005bf2 <_raise_r+0x12>
	...

08005c34 <raise>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4b03      	ldr	r3, [pc, #12]	@ (8005c44 <raise+0x10>)
 8005c38:	0001      	movs	r1, r0
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	f7ff ffd0 	bl	8005be0 <_raise_r>
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	20000018 	.word	0x20000018

08005c48 <_kill_r>:
 8005c48:	2300      	movs	r3, #0
 8005c4a:	b570      	push	{r4, r5, r6, lr}
 8005c4c:	4d06      	ldr	r5, [pc, #24]	@ (8005c68 <_kill_r+0x20>)
 8005c4e:	0004      	movs	r4, r0
 8005c50:	0008      	movs	r0, r1
 8005c52:	0011      	movs	r1, r2
 8005c54:	602b      	str	r3, [r5, #0]
 8005c56:	f7fb fc45 	bl	80014e4 <_kill>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	d103      	bne.n	8005c66 <_kill_r+0x1e>
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d000      	beq.n	8005c66 <_kill_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	200006f8 	.word	0x200006f8

08005c6c <_getpid_r>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	f7fb fc33 	bl	80014d8 <_getpid>
 8005c72:	bd10      	pop	{r4, pc}

08005c74 <_malloc_usable_size_r>:
 8005c74:	1f0b      	subs	r3, r1, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	1f18      	subs	r0, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da01      	bge.n	8005c82 <_malloc_usable_size_r+0xe>
 8005c7e:	580b      	ldr	r3, [r1, r0]
 8005c80:	18c0      	adds	r0, r0, r3
 8005c82:	4770      	bx	lr

08005c84 <__swhatbuf_r>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	000e      	movs	r6, r1
 8005c88:	001d      	movs	r5, r3
 8005c8a:	230e      	movs	r3, #14
 8005c8c:	5ec9      	ldrsh	r1, [r1, r3]
 8005c8e:	0014      	movs	r4, r2
 8005c90:	b096      	sub	sp, #88	@ 0x58
 8005c92:	2900      	cmp	r1, #0
 8005c94:	da0c      	bge.n	8005cb0 <__swhatbuf_r+0x2c>
 8005c96:	89b2      	ldrh	r2, [r6, #12]
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	0011      	movs	r1, r2
 8005c9c:	4019      	ands	r1, r3
 8005c9e:	421a      	tst	r2, r3
 8005ca0:	d114      	bne.n	8005ccc <__swhatbuf_r+0x48>
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	6029      	str	r1, [r5, #0]
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	b016      	add	sp, #88	@ 0x58
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	466a      	mov	r2, sp
 8005cb2:	f000 f853 	bl	8005d5c <_fstat_r>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	dbed      	blt.n	8005c96 <__swhatbuf_r+0x12>
 8005cba:	23f0      	movs	r3, #240	@ 0xf0
 8005cbc:	9901      	ldr	r1, [sp, #4]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	4019      	ands	r1, r3
 8005cc2:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <__swhatbuf_r+0x50>)
 8005cc4:	18c9      	adds	r1, r1, r3
 8005cc6:	424b      	negs	r3, r1
 8005cc8:	4159      	adcs	r1, r3
 8005cca:	e7ea      	b.n	8005ca2 <__swhatbuf_r+0x1e>
 8005ccc:	2100      	movs	r1, #0
 8005cce:	2340      	movs	r3, #64	@ 0x40
 8005cd0:	e7e9      	b.n	8005ca6 <__swhatbuf_r+0x22>
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	ffffe000 	.word	0xffffe000

08005cd8 <__smakebuf_r>:
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	2602      	movs	r6, #2
 8005cdc:	898b      	ldrh	r3, [r1, #12]
 8005cde:	0005      	movs	r5, r0
 8005ce0:	000c      	movs	r4, r1
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	4233      	tst	r3, r6
 8005ce6:	d007      	beq.n	8005cf8 <__smakebuf_r+0x20>
 8005ce8:	0023      	movs	r3, r4
 8005cea:	3347      	adds	r3, #71	@ 0x47
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	6163      	str	r3, [r4, #20]
 8005cf4:	b005      	add	sp, #20
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf8:	ab03      	add	r3, sp, #12
 8005cfa:	aa02      	add	r2, sp, #8
 8005cfc:	f7ff ffc2 	bl	8005c84 <__swhatbuf_r>
 8005d00:	9f02      	ldr	r7, [sp, #8]
 8005d02:	9001      	str	r0, [sp, #4]
 8005d04:	0039      	movs	r1, r7
 8005d06:	0028      	movs	r0, r5
 8005d08:	f7fe fda2 	bl	8004850 <_malloc_r>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d108      	bne.n	8005d22 <__smakebuf_r+0x4a>
 8005d10:	220c      	movs	r2, #12
 8005d12:	5ea3      	ldrsh	r3, [r4, r2]
 8005d14:	059a      	lsls	r2, r3, #22
 8005d16:	d4ed      	bmi.n	8005cf4 <__smakebuf_r+0x1c>
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4393      	bics	r3, r2
 8005d1c:	431e      	orrs	r6, r3
 8005d1e:	81a6      	strh	r6, [r4, #12]
 8005d20:	e7e2      	b.n	8005ce8 <__smakebuf_r+0x10>
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	89a2      	ldrh	r2, [r4, #12]
 8005d26:	6020      	str	r0, [r4, #0]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	6120      	str	r0, [r4, #16]
 8005d30:	6167      	str	r7, [r4, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <__smakebuf_r+0x78>
 8005d36:	0028      	movs	r0, r5
 8005d38:	230e      	movs	r3, #14
 8005d3a:	5ee1      	ldrsh	r1, [r4, r3]
 8005d3c:	f000 f820 	bl	8005d80 <_isatty_r>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d005      	beq.n	8005d50 <__smakebuf_r+0x78>
 8005d44:	2303      	movs	r3, #3
 8005d46:	89a2      	ldrh	r2, [r4, #12]
 8005d48:	439a      	bics	r2, r3
 8005d4a:	3b02      	subs	r3, #2
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	9a01      	ldr	r2, [sp, #4]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	e7cc      	b.n	8005cf4 <__smakebuf_r+0x1c>
	...

08005d5c <_fstat_r>:
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b570      	push	{r4, r5, r6, lr}
 8005d60:	4d06      	ldr	r5, [pc, #24]	@ (8005d7c <_fstat_r+0x20>)
 8005d62:	0004      	movs	r4, r0
 8005d64:	0008      	movs	r0, r1
 8005d66:	0011      	movs	r1, r2
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	f7fb fc1b 	bl	80015a4 <_fstat>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d103      	bne.n	8005d7a <_fstat_r+0x1e>
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d000      	beq.n	8005d7a <_fstat_r+0x1e>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	200006f8 	.word	0x200006f8

08005d80 <_isatty_r>:
 8005d80:	2300      	movs	r3, #0
 8005d82:	b570      	push	{r4, r5, r6, lr}
 8005d84:	4d06      	ldr	r5, [pc, #24]	@ (8005da0 <_isatty_r+0x20>)
 8005d86:	0004      	movs	r4, r0
 8005d88:	0008      	movs	r0, r1
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	f7fb fc18 	bl	80015c0 <_isatty>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d103      	bne.n	8005d9c <_isatty_r+0x1c>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d000      	beq.n	8005d9c <_isatty_r+0x1c>
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	200006f8 	.word	0x200006f8

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
