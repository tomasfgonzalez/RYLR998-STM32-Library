
rylr998_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003828  08003828  00004828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003934  08003934  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800393c  0800393c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800393c  0800393c  0000493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003940  08003940  00004940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003944  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  08003950  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003950  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a22  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd7  00000000  00000000  0000ea56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00010730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d7  00000000  00000000  00010ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112d1  00000000  00000000  000114b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b92e  00000000  00000000  00022788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065fe0  00000000  00000000  0002e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00094096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000199c  00000000  00000000  000940dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00095a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003810 	.word	0x08003810

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003810 	.word	0x08003810

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_DMA_Init+0x48>)
 80004b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_DMA_Init+0x48>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	430a      	orrs	r2, r1
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_DMA_Init+0x48>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	2201      	movs	r2, #1
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	200a      	movs	r0, #10
 80004cc:	f000 fc6c 	bl	8000da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f000 fc7e 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200b      	movs	r0, #11
 80004dc:	f000 fc64 	bl	8000da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80004e0:	200b      	movs	r0, #11
 80004e2:	f000 fc76 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b089      	sub	sp, #36	@ 0x24
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	240c      	movs	r4, #12
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f003 f956 	bl	80037b6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b20      	ldr	r3, [pc, #128]	@ (800058c <MX_GPIO_Init+0x98>)
 800050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050e:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <MX_GPIO_Init+0x98>)
 8000510:	2104      	movs	r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000516:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_GPIO_Init+0x98>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	2204      	movs	r2, #4
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_GPIO_Init+0x98>)
 8000524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <MX_GPIO_Init+0x98>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800052e:	4b17      	ldr	r3, [pc, #92]	@ (800058c <MX_GPIO_Init+0x98>)
 8000530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_GPIO_Init+0x98>)
 800053c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <MX_GPIO_Init+0x98>)
 8000540:	2102      	movs	r1, #2
 8000542:	430a      	orrs	r2, r1
 8000544:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_GPIO_Init+0x98>)
 8000548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800054a:	2202      	movs	r2, #2
 800054c:	4013      	ands	r3, r2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_GPIO_Init+0x9c>)
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	0018      	movs	r0, r3
 800055a:	f001 f807 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055e:	0021      	movs	r1, r4
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2208      	movs	r2, #8
 8000564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2201      	movs	r2, #1
 800056a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000578:	187b      	adds	r3, r7, r1
 800057a:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <MX_GPIO_Init+0x9c>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f000 fe86 	bl	8001290 <HAL_GPIO_Init>

}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b009      	add	sp, #36	@ 0x24
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	50000400 	.word	0x50000400

08000594 <HAL_UARTEx_RxEventCallback>:
    }
}

uint16_t indx = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	000a      	movs	r2, r1
 800059e:	1cbb      	adds	r3, r7, #2
 80005a0:	801a      	strh	r2, [r3, #0]

    // Process the received data
    //process_rxBuff(indx, size);

    // Update the index for the next chunk of data
    indx = size;
 80005a2:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <HAL_UARTEx_RxEventCallback+0x2c>)
 80005a4:	1cba      	adds	r2, r7, #2
 80005a6:	8812      	ldrh	r2, [r2, #0]
 80005a8:	801a      	strh	r2, [r3, #0]
    // Re-enable DMA
    //__HAL_DMA_ENABLE(huart->hdmarx);

    // Restart DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buff, 30);
 80005aa:	4906      	ldr	r1, [pc, #24]	@ (80005c4 <HAL_UARTEx_RxEventCallback+0x30>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	221e      	movs	r2, #30
 80005b0:	0018      	movs	r0, r3
 80005b2:	f003 f898 	bl	80036e6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000046 	.word	0x20000046
 80005c4:	20000028 	.word	0x20000028

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 facf 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f81d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f7ff ff8d 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005da:	f7ff ff65 	bl	80004a8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005de:	f000 f903 	bl	80007e8 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f92f 	bl	8000844 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_to_send[]= "Hola";
 80005e6:	003b      	movs	r3, r7
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <main+0x3c>)
 80005ea:	6811      	ldr	r1, [r2, #0]
 80005ec:	6019      	str	r1, [r3, #0]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	711a      	strb	r2, [r3, #4]

  // HAL_UART_Transmit_DMA(&hlpuart1,tx_buff,strlen((char*)tx_buff));
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buff, 30);
 80005f2:	4905      	ldr	r1, [pc, #20]	@ (8000608 <main+0x40>)
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <main+0x44>)
 80005f6:	221e      	movs	r2, #30
 80005f8:	0018      	movs	r0, r3
 80005fa:	f003 f874 	bl	80036e6 <HAL_UARTEx_ReceiveToIdle_DMA>
 /* Infinite loop */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	e7fd      	b.n	80005fe <main+0x36>
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	080038c0 	.word	0x080038c0
 8000608:	20000028 	.word	0x20000028
 800060c:	200000d0 	.word	0x200000d0

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b099      	sub	sp, #100	@ 0x64
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	242c      	movs	r4, #44	@ 0x2c
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2334      	movs	r3, #52	@ 0x34
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 f8c8 	bl	80037b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	2318      	movs	r3, #24
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 f8c0 	bl	80037b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2318      	movs	r3, #24
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f003 f8b9 	bl	80037b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <SystemClock_Config+0xe4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a2b      	ldr	r2, [pc, #172]	@ (80006f8 <SystemClock_Config+0xe8>)
 800064a:	401a      	ands	r2, r3
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <SystemClock_Config+0xe4>)
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	0109      	lsls	r1, r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000656:	0021      	movs	r1, r4
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2210      	movs	r2, #16
 8000668:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	02d2      	lsls	r2, r2, #11
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	03d2      	lsls	r2, r2, #15
 8000684:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	187b      	adds	r3, r7, r1
 8000688:	0018      	movs	r0, r3
 800068a:	f000 ff8d 	bl	80015a8 <HAL_RCC_OscConfig>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000692:	f000 f833 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	2118      	movs	r1, #24
 8000698:	187b      	adds	r3, r7, r1
 800069a:	220f      	movs	r2, #15
 800069c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2203      	movs	r2, #3
 80006a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2101      	movs	r1, #1
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 faf0 	bl	8001ca0 <HAL_RCC_ClockConfig>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006c4:	f000 f81a 	bl	80006fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2206      	movs	r2, #6
 80006cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006da:	003b      	movs	r3, r7
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fd03 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80006e6:	f000 f809 	bl	80006fc <Error_Handler>
  }
}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b019      	add	sp, #100	@ 0x64
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	40007000 	.word	0x40007000
 80006f8:	ffffe7ff 	.word	0xffffe7ff

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_MspInit+0x24>)
 800070e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_MspInit+0x24>)
 8000712:	2101      	movs	r1, #1
 8000714:	430a      	orrs	r2, r1
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <HAL_MspInit+0x24>)
 800071a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <HAL_MspInit+0x24>)
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	0549      	lsls	r1, r1, #21
 8000722:	430a      	orrs	r2, r1
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 fa5e 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fcb3 	bl	80010d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fcaf 	bl	80010d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	200001a0 	.word	0x200001a0
 8000784:	20000158 	.word	0x20000158

08000788 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fca1 	bl	80010d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fc9d 	bl	80010d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000230 	.word	0x20000230
 80007a8:	200001e8 	.word	0x200001e8

080007ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <USART2_IRQHandler+0x14>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fe18 	bl	80023e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	200000d0 	.word	0x200000d0

080007c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <LPUART1_IRQHandler+0x14>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fe0c 	bl	80023e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	20000048 	.word	0x20000048

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 80007ee:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <MX_LPUART1_UART_Init+0x58>)
 80007f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 80007f4:	22e1      	movs	r2, #225	@ 0xe1
 80007f6:	0252      	lsls	r2, r2, #9
 80007f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <MX_LPUART1_UART_Init+0x54>)
 8000826:	0018      	movs	r0, r3
 8000828:	f001 fd8a 	bl	8002340 <HAL_UART_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000830:	f7ff ff64 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	20000048 	.word	0x20000048
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART2_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000850:	22e1      	movs	r2, #225	@ 0xe1
 8000852:	0252      	lsls	r2, r2, #9
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fd59 	bl	8002340 <HAL_UART_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f7ff ff33 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000d0 	.word	0x200000d0
 80008a0:	40004400 	.word	0x40004400

080008a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	@ 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	2414      	movs	r4, #20
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f002 ff7d 	bl	80037b6 <memset>
  if(uartHandle->Instance==LPUART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a8b      	ldr	r2, [pc, #556]	@ (8000af0 <HAL_UART_MspInit+0x24c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d000      	beq.n	80008c8 <HAL_UART_MspInit+0x24>
 80008c6:	e084      	b.n	80009d2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008c8:	4b8a      	ldr	r3, [pc, #552]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80008ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008cc:	4b89      	ldr	r3, [pc, #548]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	02c9      	lsls	r1, r1, #11
 80008d2:	430a      	orrs	r2, r1
 80008d4:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b87      	ldr	r3, [pc, #540]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008da:	4b86      	ldr	r3, [pc, #536]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008e2:	4b84      	ldr	r3, [pc, #528]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2202      	movs	r2, #2
 80008fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2203      	movs	r2, #3
 8000906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2206      	movs	r2, #6
 800090c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	187a      	adds	r2, r7, r1
 8000910:	23a0      	movs	r3, #160	@ 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fcba 	bl	8001290 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800091c:	4b76      	ldr	r3, [pc, #472]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 800091e:	4a77      	ldr	r2, [pc, #476]	@ (8000afc <HAL_UART_MspInit+0x258>)
 8000920:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000922:	4b75      	ldr	r3, [pc, #468]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000924:	2205      	movs	r2, #5
 8000926:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000928:	4b73      	ldr	r3, [pc, #460]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b72      	ldr	r3, [pc, #456]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b70      	ldr	r3, [pc, #448]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093a:	4b6f      	ldr	r3, [pc, #444]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000940:	4b6d      	ldr	r3, [pc, #436]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000946:	4b6c      	ldr	r3, [pc, #432]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800094c:	4b6a      	ldr	r3, [pc, #424]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000952:	4b69      	ldr	r3, [pc, #420]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fa59 	bl	8000e0c <HAL_DMA_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800095e:	f7ff fecd 	bl	80006fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a64      	ldr	r2, [pc, #400]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 8000966:	675a      	str	r2, [r3, #116]	@ 0x74
 8000968:	4b63      	ldr	r3, [pc, #396]	@ (8000af8 <HAL_UART_MspInit+0x254>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800096e:	4b64      	ldr	r3, [pc, #400]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 8000970:	4a64      	ldr	r2, [pc, #400]	@ (8000b04 <HAL_UART_MspInit+0x260>)
 8000972:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000974:	4b62      	ldr	r3, [pc, #392]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 8000976:	2205      	movs	r2, #5
 8000978:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800097a:	4b61      	ldr	r3, [pc, #388]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 800097c:	2210      	movs	r2, #16
 800097e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000980:	4b5f      	ldr	r3, [pc, #380]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000986:	4b5e      	ldr	r3, [pc, #376]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800098c:	4b5c      	ldr	r3, [pc, #368]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000992:	4b5b      	ldr	r3, [pc, #364]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000998:	4b59      	ldr	r3, [pc, #356]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b58      	ldr	r3, [pc, #352]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80009a4:	4b56      	ldr	r3, [pc, #344]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fa30 	bl	8000e0c <HAL_DMA_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80009b0:	f7ff fea4 	bl	80006fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a52      	ldr	r2, [pc, #328]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 80009b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80009ba:	4b51      	ldr	r3, [pc, #324]	@ (8000b00 <HAL_UART_MspInit+0x25c>)
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	201d      	movs	r0, #29
 80009c6:	f000 f9ef 	bl	8000da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80009ca:	201d      	movs	r0, #29
 80009cc:	f000 fa01 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009d0:	e08a      	b.n	8000ae8 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000b08 <HAL_UART_MspInit+0x264>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d000      	beq.n	80009de <HAL_UART_MspInit+0x13a>
 80009dc:	e084      	b.n	8000ae8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b45      	ldr	r3, [pc, #276]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80009e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009e2:	4b44      	ldr	r3, [pc, #272]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b41      	ldr	r3, [pc, #260]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80009ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009f0:	4b40      	ldr	r3, [pc, #256]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	430a      	orrs	r2, r1
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009f8:	4b3e      	ldr	r3, [pc, #248]	@ (8000af4 <HAL_UART_MspInit+0x250>)
 80009fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fc:	2201      	movs	r2, #1
 80009fe:	4013      	ands	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|VCP_RX_Pin;
 8000a04:	2114      	movs	r1, #20
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2282      	movs	r2, #130	@ 0x82
 8000a0a:	0212      	lsls	r2, r2, #8
 8000a0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	187a      	adds	r2, r7, r1
 8000a28:	23a0      	movs	r3, #160	@ 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fc2e 	bl	8001290 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000a34:	4b35      	ldr	r3, [pc, #212]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a36:	4a36      	ldr	r2, [pc, #216]	@ (8000b10 <HAL_UART_MspInit+0x26c>)
 8000a38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a40:	4b32      	ldr	r3, [pc, #200]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a4e:	2280      	movs	r2, #128	@ 0x80
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a52:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a60:	2220      	movs	r2, #32
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 f9cd 	bl	8000e0c <HAL_DMA_Init>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8000a76:	f7ff fe41 	bl	80006fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a7e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <HAL_UART_MspInit+0x268>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000a86:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000a88:	4a23      	ldr	r2, [pc, #140]	@ (8000b18 <HAL_UART_MspInit+0x274>)
 8000a8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000a94:	2210      	movs	r2, #16
 8000a96:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f9a4 	bl	8000e0c <HAL_DMA_Init>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000ac8:	f7ff fe18 	bl	80006fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a11      	ldr	r2, [pc, #68]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000ad0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <HAL_UART_MspInit+0x270>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	201c      	movs	r0, #28
 8000ade:	f000 f963 	bl	8000da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 f975 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b00b      	add	sp, #44	@ 0x2c
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40004800 	.word	0x40004800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	20000158 	.word	0x20000158
 8000afc:	40020030 	.word	0x40020030
 8000b00:	200001a0 	.word	0x200001a0
 8000b04:	4002001c 	.word	0x4002001c
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	200001e8 	.word	0x200001e8
 8000b10:	40020058 	.word	0x40020058
 8000b14:	20000230 	.word	0x20000230
 8000b18:	40020044 	.word	0x40020044

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	   ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff fe5c 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 fe3d 	bl	80037c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd3b 	bl	80005c8 <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
	   ldr   r0, =_estack
 8000b54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08003944 	.word	0x08003944
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	2000027c 	.word	0x2000027c

08000b6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_COMP_IRQHandler>
	...

08000b70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <HAL_Init+0x3c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <HAL_Init+0x3c>)
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f811 	bl	8000bb0 <HAL_InitTick>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e001      	b.n	8000b9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9a:	f7ff fdb5 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_InitTick+0x5c>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_InitTick+0x60>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	23fa      	movs	r3, #250	@ 0xfa
 8000bc4:	0098      	lsls	r0, r3, #2
 8000bc6:	f7ff fa9f 	bl	8000108 <__udivsi3>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f7ff fa9a 	bl	8000108 <__udivsi3>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f90b 	bl	8000df2 <HAL_SYSTICK_Config>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e00f      	b.n	8000c04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d80b      	bhi.n	8000c02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f8d8 	bl	8000da8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_InitTick+0x64>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	18d2      	adds	r2, r2, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000278 	.word	0x20000278

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	@ (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	20000278 	.word	0x20000278

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c62:	d809      	bhi.n	8000c78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	001a      	movs	r2, r3
 8000c6a:	231f      	movs	r3, #31
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <__NVIC_EnableIRQ+0x30>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	4091      	lsls	r1, r2
 8000c74:	000a      	movs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
  }
}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c98:	d828      	bhi.n	8000cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d58 <__NVIC_SetPriority+0xd4>)
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	33c0      	adds	r3, #192	@ 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	589b      	ldr	r3, [r3, r2]
 8000caa:	1dfa      	adds	r2, r7, #7
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	0011      	movs	r1, r2
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	00d2      	lsls	r2, r2, #3
 8000cb6:	21ff      	movs	r1, #255	@ 0xff
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	22ff      	movs	r2, #255	@ 0xff
 8000cc8:	401a      	ands	r2, r3
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	4003      	ands	r3, r0
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	481f      	ldr	r0, [pc, #124]	@ (8000d58 <__NVIC_SetPriority+0xd4>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	33c0      	adds	r3, #192	@ 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cea:	e031      	b.n	8000d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3306      	adds	r3, #6
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	3304      	adds	r3, #4
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	400a      	ands	r2, r1
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	21ff      	movs	r1, #255	@ 0xff
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	43d2      	mvns	r2, r2
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	22ff      	movs	r2, #255	@ 0xff
 8000d24:	401a      	ands	r2, r3
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	4003      	ands	r3, r0
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	4023      	ands	r3, r4
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	430a      	orrs	r2, r1
 8000d46:	3306      	adds	r3, #6
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	18c3      	adds	r3, r0, r3
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b003      	add	sp, #12
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	045b      	lsls	r3, r3, #17
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d301      	bcc.n	8000d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d74:	2301      	movs	r3, #1
 8000d76:	e010      	b.n	8000d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <SysTick_Config+0x44>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2103      	movs	r1, #3
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff ff7c 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SysTick_Config+0x44>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <SysTick_Config+0x44>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	210f      	movs	r1, #15
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	1c02      	adds	r2, r0, #0
 8000db8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	0002      	movs	r2, r0
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff33 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff ffaf 	bl	8000d60 <SysTick_Config>
 8000e02:	0003      	movs	r3, r0
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e061      	b.n	8000ee2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_DMA_Init+0xe0>)
 8000e24:	4694      	mov	ip, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	2114      	movs	r1, #20
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff f96c 	bl	8000108 <__udivsi3>
 8000e30:	0003      	movs	r3, r0
 8000e32:	009a      	lsls	r2, r3, #2
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef0 <HAL_DMA_Init+0xe4>)
 8000e3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2225      	movs	r2, #37	@ 0x25
 8000e42:	2102      	movs	r1, #2
 8000e44:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <HAL_DMA_Init+0xe8>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	01db      	lsls	r3, r3, #7
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d018      	beq.n	8000eca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_DMA_Init+0xec>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea0:	211c      	movs	r1, #28
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	4099      	lsls	r1, r3
 8000ea8:	000b      	movs	r3, r1
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_DMA_Init+0xec>)
 8000eae:	400a      	ands	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_DMA_Init+0xec>)
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	4003      	ands	r3, r0
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_DMA_Init+0xec>)
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2225      	movs	r2, #37	@ 0x25
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	2100      	movs	r1, #0
 8000ede:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	ffff800f 	.word	0xffff800f
 8000ef8:	400200a8 	.word	0x400200a8

08000efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2317      	movs	r3, #23
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2224      	movs	r2, #36	@ 0x24
 8000f16:	5c9b      	ldrb	r3, [r3, r2]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_DMA_Start_IT+0x24>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e04f      	b.n	8000fc0 <HAL_DMA_Start_IT+0xc4>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2224      	movs	r2, #36	@ 0x24
 8000f24:	2101      	movs	r1, #1
 8000f26:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2225      	movs	r2, #37	@ 0x25
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d13a      	bne.n	8000faa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2225      	movs	r2, #37	@ 0x25
 8000f38:	2102      	movs	r1, #2
 8000f3a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f000 f96a 	bl	8001232 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	210e      	movs	r1, #14
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e00f      	b.n	8000f98 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2104      	movs	r1, #4
 8000f84:	438a      	bics	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	210a      	movs	r1, #10
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e007      	b.n	8000fba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2224      	movs	r2, #36	@ 0x24
 8000fae:	2100      	movs	r1, #0
 8000fb0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fb2:	2317      	movs	r3, #23
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000fba:	2317      	movs	r3, #23
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2225      	movs	r2, #37	@ 0x25
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2224      	movs	r2, #36	@ 0x24
 8000fee:	2100      	movs	r1, #0
 8000ff0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e024      	b.n	8001040 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	210e      	movs	r1, #14
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	221c      	movs	r2, #28
 800101c:	401a      	ands	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	2101      	movs	r1, #1
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2225      	movs	r2, #37	@ 0x25
 800102e:	2101      	movs	r1, #1
 8001030:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2224      	movs	r2, #36	@ 0x24
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]

    return status;
 800103a:	230f      	movs	r3, #15
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001050:	210f      	movs	r1, #15
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2225      	movs	r2, #37	@ 0x25
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d006      	beq.n	8001072 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2204      	movs	r2, #4
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e02a      	b.n	80010c8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	210e      	movs	r1, #14
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	438a      	bics	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	221c      	movs	r2, #28
 8001098:	401a      	ands	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	2101      	movs	r1, #1
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2225      	movs	r2, #37	@ 0x25
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2224      	movs	r2, #36	@ 0x24
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	0010      	movs	r0, r2
 80010c6:	4798      	blx	r3
    }
  }
  return status;
 80010c8:	230f      	movs	r3, #15
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	221c      	movs	r2, #28
 80010f4:	4013      	ands	r3, r2
 80010f6:	2204      	movs	r2, #4
 80010f8:	409a      	lsls	r2, r3
 80010fa:	0013      	movs	r3, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	d026      	beq.n	8001150 <HAL_DMA_IRQHandler+0x7a>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2204      	movs	r2, #4
 8001106:	4013      	ands	r3, r2
 8001108:	d022      	beq.n	8001150 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2220      	movs	r2, #32
 8001112:	4013      	ands	r3, r2
 8001114:	d107      	bne.n	8001126 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2104      	movs	r1, #4
 8001122:	438a      	bics	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	221c      	movs	r2, #28
 800112c:	401a      	ands	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	2104      	movs	r1, #4
 8001134:	4091      	lsls	r1, r2
 8001136:	000a      	movs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <HAL_DMA_IRQHandler+0x6e>
 8001142:	e071      	b.n	8001228 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	0010      	movs	r0, r2
 800114c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800114e:	e06b      	b.n	8001228 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001154:	221c      	movs	r2, #28
 8001156:	4013      	ands	r3, r2
 8001158:	2202      	movs	r2, #2
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4013      	ands	r3, r2
 8001162:	d02d      	beq.n	80011c0 <HAL_DMA_IRQHandler+0xea>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d029      	beq.n	80011c0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2220      	movs	r2, #32
 8001174:	4013      	ands	r3, r2
 8001176:	d10b      	bne.n	8001190 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	210a      	movs	r1, #10
 8001184:	438a      	bics	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2225      	movs	r2, #37	@ 0x25
 800118c:	2101      	movs	r1, #1
 800118e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001194:	221c      	movs	r2, #28
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	2102      	movs	r1, #2
 800119e:	4091      	lsls	r1, r2
 80011a0:	000a      	movs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2224      	movs	r2, #36	@ 0x24
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d039      	beq.n	8001228 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	0010      	movs	r0, r2
 80011bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011be:	e033      	b.n	8001228 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c4:	221c      	movs	r2, #28
 80011c6:	4013      	ands	r3, r2
 80011c8:	2208      	movs	r2, #8
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	d02a      	beq.n	800122a <HAL_DMA_IRQHandler+0x154>
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2208      	movs	r2, #8
 80011d8:	4013      	ands	r3, r2
 80011da:	d026      	beq.n	800122a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	210e      	movs	r1, #14
 80011e8:	438a      	bics	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f0:	221c      	movs	r2, #28
 80011f2:	401a      	ands	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	2101      	movs	r1, #1
 80011fa:	4091      	lsls	r1, r2
 80011fc:	000a      	movs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2225      	movs	r2, #37	@ 0x25
 800120a:	2101      	movs	r1, #1
 800120c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2224      	movs	r2, #36	@ 0x24
 8001212:	2100      	movs	r1, #0
 8001214:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	0010      	movs	r0, r2
 8001226:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46c0      	nop			@ (mov r8, r8)
}
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001244:	221c      	movs	r2, #28
 8001246:	401a      	ands	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	2101      	movs	r1, #1
 800124e:	4091      	lsls	r1, r2
 8001250:	000a      	movs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b10      	cmp	r3, #16
 8001262:	d108      	bne.n	8001276 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001274:	e007      	b.n	8001286 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	60da      	str	r2, [r3, #12]
}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b004      	add	sp, #16
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012a6:	e149      	b.n	800153c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <HAL_GPIO_Init+0x30>
 80012be:	e13a      	b.n	8001536 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	43da      	mvns	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	409a      	lsls	r2, r3
 80012fa:	0013      	movs	r3, r2
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	2201      	movs	r2, #1
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2203      	movs	r2, #3
 800137c:	4013      	ands	r3, r2
 800137e:	2b02      	cmp	r3, #2
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	58d3      	ldr	r3, [r2, r3]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2207      	movs	r2, #7
 8001394:	4013      	ands	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2107      	movs	r1, #7
 80013ae:	400b      	ands	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	6939      	ldr	r1, [r7, #16]
 80013c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	401a      	ands	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	23c0      	movs	r3, #192	@ 0xc0
 8001404:	029b      	lsls	r3, r3, #10
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_GPIO_Init+0x17c>
 800140a:	e094      	b.n	8001536 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b51      	ldr	r3, [pc, #324]	@ (8001554 <HAL_GPIO_Init+0x2c4>)
 800140e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001410:	4b50      	ldr	r3, [pc, #320]	@ (8001554 <HAL_GPIO_Init+0x2c4>)
 8001412:	2101      	movs	r1, #1
 8001414:	430a      	orrs	r2, r1
 8001416:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001418:	4a4f      	ldr	r2, [pc, #316]	@ (8001558 <HAL_GPIO_Init+0x2c8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	589b      	ldr	r3, [r3, r2]
 8001424:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	23a0      	movs	r3, #160	@ 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	429a      	cmp	r2, r3
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1de>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a44      	ldr	r2, [pc, #272]	@ (800155c <HAL_GPIO_Init+0x2cc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1da>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a43      	ldr	r2, [pc, #268]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1d6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a42      	ldr	r2, [pc, #264]	@ (8001564 <HAL_GPIO_Init+0x2d4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1d2>
 800145e:	2305      	movs	r3, #5
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x1e0>
 8001462:	2306      	movs	r3, #6
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x1e0>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x1e0>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x1e0>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2103      	movs	r1, #3
 8001474:	400a      	ands	r2, r1
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x2c8>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	035b      	lsls	r3, r3, #13
 80014a6:	4013      	ands	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	039b      	lsls	r3, r3, #14
 80014d0:	4013      	ands	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	029b      	lsls	r3, r3, #10
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001530:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_GPIO_Init+0x2d8>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	40da      	lsrs	r2, r3
 8001544:	1e13      	subs	r3, r2, #0
 8001546:	d000      	beq.n	800154a <HAL_GPIO_Init+0x2ba>
 8001548:	e6ae      	b.n	80012a8 <HAL_GPIO_Init+0x18>
  }
}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	50000400 	.word	0x50000400
 8001560:	50000800 	.word	0x50000800
 8001564:	50001c00 	.word	0x50001c00
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	0008      	movs	r0, r1
 8001576:	0011      	movs	r1, r2
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	1c02      	adds	r2, r0, #0
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	1c7b      	adds	r3, r7, #1
 8001580:	1c0a      	adds	r2, r1, #0
 8001582:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001584:	1c7b      	adds	r3, r7, #1
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158c:	1cbb      	adds	r3, r7, #2
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001596:	1cbb      	adds	r3, r7, #2
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 fb6c 	bl	8001c94 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4bc8      	ldr	r3, [pc, #800]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	220c      	movs	r2, #12
 80015c2:	4013      	ands	r3, r2
 80015c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4bc6      	ldr	r3, [pc, #792]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_RCC_OscConfig+0x36>
 80015dc:	e07d      	b.n	80016da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x68>
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4bba      	ldr	r3, [pc, #744]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4013      	ands	r3, r2
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x5a>
 8001600:	e06a      	b.n	80016d8 <HAL_RCC_OscConfig+0x130>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d166      	bne.n	80016d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 fb42 	bl	8001c94 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x84>
 800161c:	4bb0      	ldr	r3, [pc, #704]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4baf      	ldr	r3, [pc, #700]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	0249      	lsls	r1, r1, #9
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e027      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	23a0      	movs	r3, #160	@ 0xa0
 8001632:	02db      	lsls	r3, r3, #11
 8001634:	429a      	cmp	r2, r3
 8001636:	d10e      	bne.n	8001656 <HAL_RCC_OscConfig+0xae>
 8001638:	4ba9      	ldr	r3, [pc, #676]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4ba8      	ldr	r3, [pc, #672]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800163e:	2180      	movs	r1, #128	@ 0x80
 8001640:	02c9      	lsls	r1, r1, #11
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	4ba6      	ldr	r3, [pc, #664]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4ba5      	ldr	r3, [pc, #660]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	0249      	lsls	r1, r1, #9
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e012      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001656:	4ba2      	ldr	r3, [pc, #648]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4ba1      	ldr	r3, [pc, #644]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800165c:	49a1      	ldr	r1, [pc, #644]	@ (80018e4 <HAL_RCC_OscConfig+0x33c>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	4b9f      	ldr	r3, [pc, #636]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4b9b      	ldr	r3, [pc, #620]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b9a      	ldr	r3, [pc, #616]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001676:	499c      	ldr	r1, [pc, #624]	@ (80018e8 <HAL_RCC_OscConfig+0x340>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d014      	beq.n	80016ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fada 	bl	8000c3c <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fad5 	bl	8000c3c <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	@ 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e2f9      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a0:	4b8f      	ldr	r3, [pc, #572]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0xe6>
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fac5 	bl	8000c3c <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fac0 	bl	8000c3c <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e2e4      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ca:	4b85      	ldr	r3, [pc, #532]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x110>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_OscConfig+0x13e>
 80016e4:	e099      	b.n	800181a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	2220      	movs	r2, #32
 80016f0:	4013      	ands	r3, r2
 80016f2:	d009      	beq.n	8001708 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80016f4:	4b7a      	ldr	r3, [pc, #488]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b79      	ldr	r3, [pc, #484]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80016fa:	2120      	movs	r1, #32
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	2220      	movs	r2, #32
 8001704:	4393      	bics	r3, r2
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b04      	cmp	r3, #4
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d13e      	bne.n	8001792 <HAL_RCC_OscConfig+0x1ea>
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d13b      	bne.n	8001792 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800171a:	4b71      	ldr	r3, [pc, #452]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2204      	movs	r2, #4
 8001720:	4013      	ands	r3, r2
 8001722:	d004      	beq.n	800172e <HAL_RCC_OscConfig+0x186>
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e2b2      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a6e      	ldr	r2, [pc, #440]	@ (80018ec <HAL_RCC_OscConfig+0x344>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	021a      	lsls	r2, r3, #8
 800173e:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001744:	4b66      	ldr	r3, [pc, #408]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2209      	movs	r2, #9
 800174a:	4393      	bics	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001756:	f000 fbeb 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 800175a:	0001      	movs	r1, r0
 800175c:	4b60      	ldr	r3, [pc, #384]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	220f      	movs	r2, #15
 8001764:	4013      	ands	r3, r2
 8001766:	4a62      	ldr	r2, [pc, #392]	@ (80018f0 <HAL_RCC_OscConfig+0x348>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	000a      	movs	r2, r1
 800176c:	40da      	lsrs	r2, r3
 800176e:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <HAL_RCC_OscConfig+0x34c>)
 8001770:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001772:	4b61      	ldr	r3, [pc, #388]	@ (80018f8 <HAL_RCC_OscConfig+0x350>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2513      	movs	r5, #19
 8001778:	197c      	adds	r4, r7, r5
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff fa18 	bl	8000bb0 <HAL_InitTick>
 8001780:	0003      	movs	r3, r0
 8001782:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001784:	197b      	adds	r3, r7, r5
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d046      	beq.n	800181a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800178c:	197b      	adds	r3, r7, r5
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	e280      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	2b00      	cmp	r3, #0
 8001796:	d027      	beq.n	80017e8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001798:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2209      	movs	r2, #9
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	4b4f      	ldr	r3, [pc, #316]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa47 	bl	8000c3c <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fa42 	bl	8000c3c <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e266      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2204      	movs	r2, #4
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a45      	ldr	r2, [pc, #276]	@ (80018ec <HAL_RCC_OscConfig+0x344>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	021a      	lsls	r2, r3, #8
 80017e0:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	e018      	b.n	800181a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e8:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b3c      	ldr	r3, [pc, #240]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	438a      	bics	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa22 	bl	8000c3c <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fa1d 	bl	8000c3c <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e241      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d1f1      	bne.n	80017fe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2210      	movs	r2, #16
 8001820:	4013      	ands	r3, r2
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x27e>
 8001824:	e0a1      	b.n	800196a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d140      	bne.n	80018ae <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800182c:	4b2c      	ldr	r3, [pc, #176]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d005      	beq.n	8001844 <HAL_RCC_OscConfig+0x29c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e227      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001844:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <HAL_RCC_OscConfig+0x354>)
 800184a:	4013      	ands	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	0a19      	lsrs	r1, r3, #8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	061a      	lsls	r2, r3, #24
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	0b5b      	lsrs	r3, r3, #13
 8001872:	3301      	adds	r3, #1
 8001874:	2280      	movs	r2, #128	@ 0x80
 8001876:	0212      	lsls	r2, r2, #8
 8001878:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	210f      	movs	r1, #15
 8001882:	400b      	ands	r3, r1
 8001884:	491a      	ldr	r1, [pc, #104]	@ (80018f0 <HAL_RCC_OscConfig+0x348>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_RCC_OscConfig+0x34c>)
 800188c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HAL_RCC_OscConfig+0x350>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2513      	movs	r5, #19
 8001894:	197c      	adds	r4, r7, r5
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff f98a 	bl	8000bb0 <HAL_InitTick>
 800189c:	0003      	movs	r3, r0
 800189e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018a0:	197b      	adds	r3, r7, r5
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d060      	beq.n	800196a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80018a8:	197b      	adds	r3, r7, r5
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	e1f2      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03f      	beq.n	8001936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_OscConfig+0x338>)
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	0049      	lsls	r1, r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f9ba 	bl	8000c3c <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018cc:	e018      	b.n	8001900 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ce:	f7ff f9b5 	bl	8000c3c <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d911      	bls.n	8001900 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1d9      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	fffeffff 	.word	0xfffeffff
 80018e8:	fffbffff 	.word	0xfffbffff
 80018ec:	ffffe0ff 	.word	0xffffe0ff
 80018f0:	080038c8 	.word	0x080038c8
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004
 80018fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001900:	4bc9      	ldr	r3, [pc, #804]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d0e0      	beq.n	80018ce <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190c:	4bc6      	ldr	r3, [pc, #792]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4ac6      	ldr	r2, [pc, #792]	@ (8001c2c <HAL_RCC_OscConfig+0x684>)
 8001912:	4013      	ands	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4bc3      	ldr	r3, [pc, #780]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 800191c:	430a      	orrs	r2, r1
 800191e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001920:	4bc1      	ldr	r3, [pc, #772]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	0a19      	lsrs	r1, r3, #8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	061a      	lsls	r2, r3, #24
 800192e:	4bbe      	ldr	r3, [pc, #760]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	e019      	b.n	800196a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001936:	4bbc      	ldr	r3, [pc, #752]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4bbb      	ldr	r3, [pc, #748]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 800193c:	49bc      	ldr	r1, [pc, #752]	@ (8001c30 <HAL_RCC_OscConfig+0x688>)
 800193e:	400a      	ands	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f97b 	bl	8000c3c <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff f976 	bl	8000c3c <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e19a      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800195e:	4bb2      	ldr	r3, [pc, #712]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2208      	movs	r2, #8
 8001970:	4013      	ands	r3, r2
 8001972:	d036      	beq.n	80019e2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d019      	beq.n	80019b0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4baa      	ldr	r3, [pc, #680]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 800197e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001980:	4ba9      	ldr	r3, [pc, #676]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001982:	2101      	movs	r1, #1
 8001984:	430a      	orrs	r2, r1
 8001986:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff f958 	bl	8000c3c <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff f953 	bl	8000c3c <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e177      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019a4:	4ba0      	ldr	r3, [pc, #640]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 80019a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019a8:	2202      	movs	r2, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0f1      	beq.n	8001992 <HAL_RCC_OscConfig+0x3ea>
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 80019b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b4:	4b9c      	ldr	r3, [pc, #624]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff f93e 	bl	8000c3c <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f939 	bl	8000c3c <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e15d      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019d8:	4b93      	ldr	r3, [pc, #588]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 80019da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d1f1      	bne.n	80019c6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2204      	movs	r2, #4
 80019e8:	4013      	ands	r3, r2
 80019ea:	d100      	bne.n	80019ee <HAL_RCC_OscConfig+0x446>
 80019ec:	e0ae      	b.n	8001b4c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2023      	movs	r0, #35	@ 0x23
 80019f0:	183b      	adds	r3, r7, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 80019f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	055b      	lsls	r3, r3, #21
 80019fe:	4013      	ands	r3, r2
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b89      	ldr	r3, [pc, #548]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a06:	4b88      	ldr	r3, [pc, #544]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0549      	lsls	r1, r1, #21
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b87      	ldr	r3, [pc, #540]	@ (8001c34 <HAL_RCC_OscConfig+0x68c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4b84      	ldr	r3, [pc, #528]	@ (8001c34 <HAL_RCC_OscConfig+0x68c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b83      	ldr	r3, [pc, #524]	@ (8001c34 <HAL_RCC_OscConfig+0x68c>)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	0049      	lsls	r1, r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a30:	f7ff f904 	bl	8000c3c <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3a:	f7ff f8ff 	bl	8000c3c <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	@ 0x64
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e123      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b79      	ldr	r3, [pc, #484]	@ (8001c34 <HAL_RCC_OscConfig+0x68c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x4cc>
 8001a64:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a68:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	0049      	lsls	r1, r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a72:	e031      	b.n	8001ad8 <HAL_RCC_OscConfig+0x530>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4ee>
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a80:	4b69      	ldr	r3, [pc, #420]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a82:	496b      	ldr	r1, [pc, #428]	@ (8001c30 <HAL_RCC_OscConfig+0x688>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a88:	4b67      	ldr	r3, [pc, #412]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001a8e:	496a      	ldr	r1, [pc, #424]	@ (8001c38 <HAL_RCC_OscConfig+0x690>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a94:	e020      	b.n	8001ad8 <HAL_RCC_OscConfig+0x530>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	23a0      	movs	r3, #160	@ 0xa0
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x518>
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aa6:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	00c9      	lsls	r1, r1, #3
 8001aac:	430a      	orrs	r2, r1
 8001aae:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001ab2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	0049      	lsls	r1, r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x530>
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001ac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ac4:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001ac6:	495a      	ldr	r1, [pc, #360]	@ (8001c30 <HAL_RCC_OscConfig+0x688>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	651a      	str	r2, [r3, #80]	@ 0x50
 8001acc:	4b56      	ldr	r3, [pc, #344]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001ace:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ad0:	4b55      	ldr	r3, [pc, #340]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001ad2:	4959      	ldr	r1, [pc, #356]	@ (8001c38 <HAL_RCC_OscConfig+0x690>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d015      	beq.n	8001b0c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f8ac 	bl	8000c3c <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f8a7 	bl	8000c3c <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a51      	ldr	r2, [pc, #324]	@ (8001c3c <HAL_RCC_OscConfig+0x694>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0ca      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001afe:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b02:	2380      	movs	r3, #128	@ 0x80
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d0ef      	beq.n	8001aea <HAL_RCC_OscConfig+0x542>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f896 	bl	8000c3c <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff f891 	bl	8000c3c <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a46      	ldr	r2, [pc, #280]	@ (8001c3c <HAL_RCC_OscConfig+0x694>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0b4      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b36:	2323      	movs	r3, #35	@ 0x23
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b44:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b46:	493e      	ldr	r1, [pc, #248]	@ (8001c40 <HAL_RCC_OscConfig+0x698>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5ae>
 8001b54:	e09d      	b.n	8001c92 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	2b0c      	cmp	r3, #12
 8001b5a:	d100      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5b6>
 8001b5c:	e076      	b.n	8001c4c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d145      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b6c:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <HAL_RCC_OscConfig+0x69c>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f863 	bl	8000c3c <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff f85e 	bl	8000c3c <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e082      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8e:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001c48 <HAL_RCC_OscConfig+0x6a0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	0449      	lsls	r1, r1, #17
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f838 	bl	8000c3c <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f833 	bl	8000c3c <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e057      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001be4:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	049b      	lsls	r3, r3, #18
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x62a>
 8001bf0:	e04f      	b.n	8001c92 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001bf8:	4912      	ldr	r1, [pc, #72]	@ (8001c44 <HAL_RCC_OscConfig+0x69c>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f81d 	bl	8000c3c <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f818 	bl	8000c3c <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03c      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c1a:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	049b      	lsls	r3, r3, #18
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x660>
 8001c26:	e034      	b.n	8001c92 <HAL_RCC_OscConfig+0x6ea>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	ffff1fff 	.word	0xffff1fff
 8001c30:	fffffeff 	.word	0xfffffeff
 8001c34:	40007000 	.word	0x40007000
 8001c38:	fffffbff 	.word	0xfffffbff
 8001c3c:	00001388 	.word	0x00001388
 8001c40:	efffffff 	.word	0xefffffff
 8001c44:	feffffff 	.word	0xfeffffff
 8001c48:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_RCC_OscConfig+0x6f4>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10f      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	23f0      	movs	r3, #240	@ 0xf0
 8001c72:	039b      	lsls	r3, r3, #14
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	23c0      	movs	r3, #192	@ 0xc0
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b00a      	add	sp, #40	@ 0x28
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e128      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b96      	ldr	r3, [pc, #600]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d91e      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b93      	ldr	r3, [pc, #588]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4393      	bics	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4b90      	ldr	r3, [pc, #576]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd4:	f7fe ffb2 	bl	8000c3c <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cdc:	e009      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cde:	f7fe ffad 	bl	8000c3c <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	4a8a      	ldr	r2, [pc, #552]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e109      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b87      	ldr	r3, [pc, #540]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0a:	4b83      	ldr	r3, [pc, #524]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	22f0      	movs	r2, #240	@ 0xf0
 8001d10:	4393      	bics	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b7f      	ldr	r3, [pc, #508]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d100      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x8a>
 8001d28:	e089      	b.n	8001e3e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d32:	4b79      	ldr	r3, [pc, #484]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	029b      	lsls	r3, r3, #10
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d120      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0e1      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	049b      	lsls	r3, r3, #18
 8001d52:	4013      	ands	r3, r2
 8001d54:	d114      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0d5      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d62:	4b6d      	ldr	r3, [pc, #436]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d109      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0ca      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d70:	4b69      	ldr	r3, [pc, #420]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0c2      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d80:	4b65      	ldr	r3, [pc, #404]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2203      	movs	r2, #3
 8001d86:	4393      	bics	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4b62      	ldr	r3, [pc, #392]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7fe ff52 	bl	8000c3c <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d111      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da4:	e009      	b.n	8001dba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da6:	f7fe ff49 	bl	8000c3c <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	4a58      	ldr	r2, [pc, #352]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e0a5      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dba:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x106>
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d111      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	e009      	b.n	8001de6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7fe ff33 	bl	8000c3c <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e08f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de6:	4b4c      	ldr	r3, [pc, #304]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	220c      	movs	r2, #12
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x132>
 8001df2:	e024      	b.n	8001e3e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d11b      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7fe ff1d 	bl	8000c3c <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a42      	ldr	r2, [pc, #264]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e079      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	220c      	movs	r2, #12
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x15e>
 8001e1e:	e00e      	b.n	8001e3e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7fe ff0c 	bl	8000c3c <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e068      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e34:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	220c      	movs	r2, #12
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3e:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d21e      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4393      	bics	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e5e:	f7fe feed 	bl	8000c3c <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	e009      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7fe fee8 	bl	8000c3c <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e044      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d1ee      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a20      	ldr	r2, [pc, #128]	@ (8001f1c <HAL_RCC_ClockConfig+0x27c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2208      	movs	r2, #8
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_RCC_ClockConfig+0x280>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	00da      	lsls	r2, r3, #3
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec8:	f000 f832 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001ecc:	0001      	movs	r1, r0
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <HAL_RCC_ClockConfig+0x284>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	000a      	movs	r2, r1
 8001ede:	40da      	lsrs	r2, r3
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_RCC_ClockConfig+0x288>)
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_RCC_ClockConfig+0x28c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	250b      	movs	r5, #11
 8001eea:	197c      	adds	r4, r7, r5
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7fe fe5f 	bl	8000bb0 <HAL_InitTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ef6:	197b      	adds	r3, r7, r5
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001efe:	197b      	adds	r3, r7, r5
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	40022000 	.word	0x40022000
 8001f14:	00001388 	.word	0x00001388
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	fffff8ff 	.word	0xfffff8ff
 8001f20:	ffffc7ff 	.word	0xffffc7ff
 8001f24:	080038c8 	.word	0x080038c8
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b08e      	sub	sp, #56	@ 0x38
 8001f34:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f36:	4b4c      	ldr	r3, [pc, #304]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f3e:	230c      	movs	r3, #12
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d014      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x40>
 8001f46:	d900      	bls.n	8001f4a <HAL_RCC_GetSysClockFreq+0x1a>
 8001f48:	e07b      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x112>
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x24>
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d00b      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f52:	e076      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f54:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f62:	e07c      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f64:	4b42      	ldr	r3, [pc, #264]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f66:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f68:	e079      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f6a:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f6c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f6e:	e076      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f72:	0c9a      	lsrs	r2, r3, #18
 8001f74:	230f      	movs	r3, #15
 8001f76:	401a      	ands	r2, r3
 8001f78:	4b3f      	ldr	r3, [pc, #252]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x148>)
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	0d9a      	lsrs	r2, r3, #22
 8001f82:	2303      	movs	r3, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	3301      	adds	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8a:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	2380      	movs	r3, #128	@ 0x80
 8001f90:	025b      	lsls	r3, r3, #9
 8001f92:	4013      	ands	r3, r2
 8001f94:	d01a      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	4a35      	ldr	r2, [pc, #212]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	69b8      	ldr	r0, [r7, #24]
 8001fa4:	69f9      	ldr	r1, [r7, #28]
 8001fa6:	f7fe f95b 	bl	8000260 <__aeabi_lmul>
 8001faa:	0002      	movs	r2, r0
 8001fac:	000b      	movs	r3, r1
 8001fae:	0010      	movs	r0, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f7fe f92f 	bl	8000220 <__aeabi_uldivmod>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	000b      	movs	r3, r1
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fca:	e037      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fcc:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d01a      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	f7fe f93b 	bl	8000260 <__aeabi_lmul>
 8001fea:	0002      	movs	r2, r0
 8001fec:	000b      	movs	r3, r1
 8001fee:	0010      	movs	r0, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f7fe f90f 	bl	8000220 <__aeabi_uldivmod>
 8002002:	0002      	movs	r2, r0
 8002004:	000b      	movs	r3, r1
 8002006:	0013      	movs	r3, r2
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
 800200a:	e017      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200e:	0018      	movs	r0, r3
 8002010:	2300      	movs	r3, #0
 8002012:	0019      	movs	r1, r3
 8002014:	4a16      	ldr	r2, [pc, #88]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x140>)
 8002016:	2300      	movs	r3, #0
 8002018:	f7fe f922 	bl	8000260 <__aeabi_lmul>
 800201c:	0002      	movs	r2, r0
 800201e:	000b      	movs	r3, r1
 8002020:	0010      	movs	r0, r2
 8002022:	0019      	movs	r1, r3
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	001c      	movs	r4, r3
 8002028:	2300      	movs	r3, #0
 800202a:	001d      	movs	r5, r3
 800202c:	0022      	movs	r2, r4
 800202e:	002b      	movs	r3, r5
 8002030:	f7fe f8f6 	bl	8000220 <__aeabi_uldivmod>
 8002034:	0002      	movs	r2, r0
 8002036:	000b      	movs	r3, r1
 8002038:	0013      	movs	r3, r2
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002040:	e00d      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x138>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0b5b      	lsrs	r3, r3, #13
 8002048:	2207      	movs	r2, #7
 800204a:	4013      	ands	r3, r2
 800204c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	3301      	adds	r3, #1
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	0212      	lsls	r2, r2, #8
 8002056:	409a      	lsls	r2, r3
 8002058:	0013      	movs	r3, r2
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800205c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b00e      	add	sp, #56	@ 0x38
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	003d0900 	.word	0x003d0900
 8002070:	00f42400 	.word	0x00f42400
 8002074:	007a1200 	.word	0x007a1200
 8002078:	080038e0 	.word	0x080038e0

0800207c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002080:	4b02      	ldr	r3, [pc, #8]	@ (800208c <HAL_RCC_GetHCLKFreq+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	20000000 	.word	0x20000000

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002094:	f7ff fff2 	bl	800207c <HAL_RCC_GetHCLKFreq>
 8002098:	0001      	movs	r1, r0
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	2207      	movs	r2, #7
 80020a2:	4013      	ands	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	40d9      	lsrs	r1, r3
 80020aa:	000b      	movs	r3, r1
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080038d8 	.word	0x080038d8

080020bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c0:	f7ff ffdc 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80020c4:	0001      	movs	r1, r0
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	0adb      	lsrs	r3, r3, #11
 80020cc:	2207      	movs	r2, #7
 80020ce:	4013      	ands	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	40d9      	lsrs	r1, r3
 80020d6:	000b      	movs	r3, r1
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	40021000 	.word	0x40021000
 80020e4:	080038d8 	.word	0x080038d8

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020f0:	2017      	movs	r0, #23
 80020f2:	183b      	adds	r3, r7, r0
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2220      	movs	r2, #32
 80020fe:	4013      	ands	r3, r2
 8002100:	d100      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002102:	e0c7      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002104:	4b84      	ldr	r3, [pc, #528]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4013      	ands	r3, r2
 800210e:	d109      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b81      	ldr	r3, [pc, #516]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002114:	4b80      	ldr	r3, [pc, #512]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0549      	lsls	r1, r1, #21
 800211a:	430a      	orrs	r2, r1
 800211c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800211e:	183b      	adds	r3, r7, r0
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b7d      	ldr	r3, [pc, #500]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d11a      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002130:	4b7a      	ldr	r3, [pc, #488]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b79      	ldr	r3, [pc, #484]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	0049      	lsls	r1, r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7fe fd7d 	bl	8000c3c <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe fd78 	bl	8000c3c <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	@ 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0d9      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b70      	ldr	r3, [pc, #448]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4013      	ands	r3, r2
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002166:	4b6c      	ldr	r3, [pc, #432]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	23c0      	movs	r3, #192	@ 0xc0
 800216c:	039b      	lsls	r3, r3, #14
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	23c0      	movs	r3, #192	@ 0xc0
 8002178:	039b      	lsls	r3, r3, #14
 800217a:	4013      	ands	r3, r2
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	429a      	cmp	r2, r3
 8002180:	d013      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	401a      	ands	r2, r3
 800218c:	23c0      	movs	r3, #192	@ 0xc0
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	429a      	cmp	r2, r3
 8002192:	d10a      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002194:	4b60      	ldr	r3, [pc, #384]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	401a      	ands	r2, r3
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	029b      	lsls	r3, r3, #10
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0b1      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ae:	23c0      	movs	r3, #192	@ 0xc0
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03b      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	23c0      	movs	r3, #192	@ 0xc0
 80021c2:	029b      	lsls	r3, r3, #10
 80021c4:	4013      	ands	r3, r2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d033      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2220      	movs	r2, #32
 80021d2:	4013      	ands	r3, r2
 80021d4:	d02e      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021d6:	4b50      	ldr	r3, [pc, #320]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021da:	4a51      	ldr	r2, [pc, #324]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021e6:	2180      	movs	r1, #128	@ 0x80
 80021e8:	0309      	lsls	r1, r1, #12
 80021ea:	430a      	orrs	r2, r1
 80021ec:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f2:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f4:	494b      	ldr	r1, [pc, #300]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80021fa:	4b47      	ldr	r3, [pc, #284]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d014      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fd17 	bl	8000c3c <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002212:	e009      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe fd12 	bl	8000c3c <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a42      	ldr	r2, [pc, #264]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e072      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002228:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800222a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d0ef      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	4013      	ands	r3, r2
 800223c:	d01f      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	23c0      	movs	r3, #192	@ 0xc0
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	401a      	ands	r2, r3
 8002248:	23c0      	movs	r3, #192	@ 0xc0
 800224a:	029b      	lsls	r3, r3, #10
 800224c:	429a      	cmp	r2, r3
 800224e:	d10c      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a35      	ldr	r2, [pc, #212]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	23c0      	movs	r3, #192	@ 0xc0
 8002260:	039b      	lsls	r3, r3, #14
 8002262:	401a      	ands	r2, r3
 8002264:	4b2c      	ldr	r3, [pc, #176]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	4b2b      	ldr	r3, [pc, #172]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800226c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	029b      	lsls	r3, r3, #10
 8002276:	401a      	ands	r2, r3
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800227a:	430a      	orrs	r2, r1
 800227c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227e:	2317      	movs	r3, #23
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800228a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800228e:	4928      	ldr	r1, [pc, #160]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002290:	400a      	ands	r2, r1
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d009      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	220c      	movs	r2, #12
 80022a4:	4393      	bics	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2204      	movs	r2, #4
 80022b8:	4013      	ands	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	4a16      	ldr	r2, [pc, #88]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	4013      	ands	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	4a0f      	ldr	r2, [pc, #60]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002308:	430a      	orrs	r2, r1
 800230a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b006      	add	sp, #24
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	fffcffff 	.word	0xfffcffff
 8002324:	fff7ffff 	.word	0xfff7ffff
 8002328:	00001388 	.word	0x00001388
 800232c:	ffcfffff 	.word	0xffcfffff
 8002330:	efffffff 	.word	0xefffffff
 8002334:	fffff3ff 	.word	0xfffff3ff
 8002338:	ffffcfff 	.word	0xffffcfff
 800233c:	fff3ffff 	.word	0xfff3ffff

08002340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e044      	b.n	80023dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2278      	movs	r2, #120	@ 0x78
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f7fe fa9d 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2224      	movs	r2, #36	@ 0x24
 800236e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 fb32 	bl	80029ec <UART_SetConfig>
 8002388:	0003      	movs	r3, r0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e024      	b.n	80023dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fd6f 	bl	8002e80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	490d      	ldr	r1, [pc, #52]	@ (80023e4 <HAL_UART_Init+0xa4>)
 80023ae:	400a      	ands	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	212a      	movs	r1, #42	@ 0x2a
 80023be:	438a      	bics	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 fe07 	bl	8002fe8 <UART_CheckIdleState>
 80023da:	0003      	movs	r3, r0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	ffffb7ff 	.word	0xffffb7ff

080023e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b0ab      	sub	sp, #172	@ 0xac
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	22a4      	movs	r2, #164	@ 0xa4
 80023f8:	18b9      	adds	r1, r7, r2
 80023fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	20a0      	movs	r0, #160	@ 0xa0
 8002404:	1839      	adds	r1, r7, r0
 8002406:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	219c      	movs	r1, #156	@ 0x9c
 8002410:	1879      	adds	r1, r7, r1
 8002412:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002414:	0011      	movs	r1, r2
 8002416:	18bb      	adds	r3, r7, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a99      	ldr	r2, [pc, #612]	@ (8002680 <HAL_UART_IRQHandler+0x298>)
 800241c:	4013      	ands	r3, r2
 800241e:	2298      	movs	r2, #152	@ 0x98
 8002420:	18bc      	adds	r4, r7, r2
 8002422:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002424:	18bb      	adds	r3, r7, r2
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d114      	bne.n	8002456 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800242c:	187b      	adds	r3, r7, r1
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2220      	movs	r2, #32
 8002432:	4013      	ands	r3, r2
 8002434:	d00f      	beq.n	8002456 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002436:	183b      	adds	r3, r7, r0
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2220      	movs	r2, #32
 800243c:	4013      	ands	r3, r2
 800243e:	d00a      	beq.n	8002456 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002444:	2b00      	cmp	r3, #0
 8002446:	d100      	bne.n	800244a <HAL_UART_IRQHandler+0x62>
 8002448:	e2a0      	b.n	800298c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	0010      	movs	r0, r2
 8002452:	4798      	blx	r3
      }
      return;
 8002454:	e29a      	b.n	800298c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002456:	2398      	movs	r3, #152	@ 0x98
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d100      	bne.n	8002462 <HAL_UART_IRQHandler+0x7a>
 8002460:	e114      	b.n	800268c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002462:	239c      	movs	r3, #156	@ 0x9c
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d106      	bne.n	800247c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800246e:	23a0      	movs	r3, #160	@ 0xa0
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a83      	ldr	r2, [pc, #524]	@ (8002684 <HAL_UART_IRQHandler+0x29c>)
 8002476:	4013      	ands	r3, r2
 8002478:	d100      	bne.n	800247c <HAL_UART_IRQHandler+0x94>
 800247a:	e107      	b.n	800268c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800247c:	23a4      	movs	r3, #164	@ 0xa4
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4013      	ands	r3, r2
 8002486:	d012      	beq.n	80024ae <HAL_UART_IRQHandler+0xc6>
 8002488:	23a0      	movs	r3, #160	@ 0xa0
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4013      	ands	r3, r2
 8002494:	d00b      	beq.n	80024ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2284      	movs	r2, #132	@ 0x84
 80024a2:	589b      	ldr	r3, [r3, r2]
 80024a4:	2201      	movs	r2, #1
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2184      	movs	r1, #132	@ 0x84
 80024ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ae:	23a4      	movs	r3, #164	@ 0xa4
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2202      	movs	r2, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d011      	beq.n	80024de <HAL_UART_IRQHandler+0xf6>
 80024ba:	239c      	movs	r3, #156	@ 0x9c
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00b      	beq.n	80024de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2202      	movs	r2, #2
 80024cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2284      	movs	r2, #132	@ 0x84
 80024d2:	589b      	ldr	r3, [r3, r2]
 80024d4:	2204      	movs	r2, #4
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2184      	movs	r1, #132	@ 0x84
 80024dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024de:	23a4      	movs	r3, #164	@ 0xa4
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2204      	movs	r2, #4
 80024e6:	4013      	ands	r3, r2
 80024e8:	d011      	beq.n	800250e <HAL_UART_IRQHandler+0x126>
 80024ea:	239c      	movs	r3, #156	@ 0x9c
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d00b      	beq.n	800250e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2204      	movs	r2, #4
 80024fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2284      	movs	r2, #132	@ 0x84
 8002502:	589b      	ldr	r3, [r3, r2]
 8002504:	2202      	movs	r2, #2
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2184      	movs	r1, #132	@ 0x84
 800250c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800250e:	23a4      	movs	r3, #164	@ 0xa4
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2208      	movs	r2, #8
 8002516:	4013      	ands	r3, r2
 8002518:	d017      	beq.n	800254a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800251a:	23a0      	movs	r3, #160	@ 0xa0
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2220      	movs	r2, #32
 8002522:	4013      	ands	r3, r2
 8002524:	d105      	bne.n	8002532 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002526:	239c      	movs	r3, #156	@ 0x9c
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002530:	d00b      	beq.n	800254a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2208      	movs	r2, #8
 8002538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2284      	movs	r2, #132	@ 0x84
 800253e:	589b      	ldr	r3, [r3, r2]
 8002540:	2208      	movs	r2, #8
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2184      	movs	r1, #132	@ 0x84
 8002548:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800254a:	23a4      	movs	r3, #164	@ 0xa4
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_UART_IRQHandler+0x198>
 8002558:	23a0      	movs	r3, #160	@ 0xa0
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	04db      	lsls	r3, r3, #19
 8002562:	4013      	ands	r3, r2
 8002564:	d00c      	beq.n	8002580 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2284      	movs	r2, #132	@ 0x84
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	2220      	movs	r2, #32
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2184      	movs	r1, #132	@ 0x84
 800257e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2284      	movs	r2, #132	@ 0x84
 8002584:	589b      	ldr	r3, [r3, r2]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <HAL_UART_IRQHandler+0x1a4>
 800258a:	e201      	b.n	8002990 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800258c:	23a4      	movs	r3, #164	@ 0xa4
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	4013      	ands	r3, r2
 8002596:	d00e      	beq.n	80025b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002598:	23a0      	movs	r3, #160	@ 0xa0
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2220      	movs	r2, #32
 80025a0:	4013      	ands	r3, r2
 80025a2:	d008      	beq.n	80025b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	0010      	movs	r0, r2
 80025b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2284      	movs	r2, #132	@ 0x84
 80025ba:	589b      	ldr	r3, [r3, r2]
 80025bc:	2194      	movs	r1, #148	@ 0x94
 80025be:	187a      	adds	r2, r7, r1
 80025c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2240      	movs	r2, #64	@ 0x40
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b40      	cmp	r3, #64	@ 0x40
 80025ce:	d004      	beq.n	80025da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2228      	movs	r2, #40	@ 0x28
 80025d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025d8:	d047      	beq.n	800266a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 fed9 	bl	8003394 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2240      	movs	r2, #64	@ 0x40
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b40      	cmp	r3, #64	@ 0x40
 80025ee:	d137      	bne.n	8002660 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f0:	f3ef 8310 	mrs	r3, PRIMASK
 80025f4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80025f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f8:	2090      	movs	r0, #144	@ 0x90
 80025fa:	183a      	adds	r2, r7, r0
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	2301      	movs	r3, #1
 8002600:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002604:	f383 8810 	msr	PRIMASK, r3
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2140      	movs	r1, #64	@ 0x40
 8002616:	438a      	bics	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	183b      	adds	r3, r7, r0
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002622:	f383 8810 	msr	PRIMASK, r3
}
 8002626:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002634:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <HAL_UART_IRQHandler+0x2a0>)
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe fd03 	bl	8001048 <HAL_DMA_Abort_IT>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d01a      	beq.n	800267c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	0018      	movs	r0, r3
 8002652:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002654:	e012      	b.n	800267c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f000 f9bf 	bl	80029dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265e:	e00d      	b.n	800267c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0018      	movs	r0, r3
 8002664:	f000 f9ba 	bl	80029dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	e008      	b.n	800267c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 f9b5 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2284      	movs	r2, #132	@ 0x84
 8002676:	2100      	movs	r1, #0
 8002678:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800267a:	e189      	b.n	8002990 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	46c0      	nop			@ (mov r8, r8)
    return;
 800267e:	e187      	b.n	8002990 <HAL_UART_IRQHandler+0x5a8>
 8002680:	0000080f 	.word	0x0000080f
 8002684:	04000120 	.word	0x04000120
 8002688:	08003653 	.word	0x08003653

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002690:	2b01      	cmp	r3, #1
 8002692:	d000      	beq.n	8002696 <HAL_UART_IRQHandler+0x2ae>
 8002694:	e13b      	b.n	800290e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002696:	23a4      	movs	r3, #164	@ 0xa4
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	4013      	ands	r3, r2
 80026a0:	d100      	bne.n	80026a4 <HAL_UART_IRQHandler+0x2bc>
 80026a2:	e134      	b.n	800290e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026a4:	23a0      	movs	r3, #160	@ 0xa0
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2210      	movs	r2, #16
 80026ac:	4013      	ands	r3, r2
 80026ae:	d100      	bne.n	80026b2 <HAL_UART_IRQHandler+0x2ca>
 80026b0:	e12d      	b.n	800290e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2210      	movs	r2, #16
 80026b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2240      	movs	r2, #64	@ 0x40
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b40      	cmp	r3, #64	@ 0x40
 80026c6:	d000      	beq.n	80026ca <HAL_UART_IRQHandler+0x2e2>
 80026c8:	e0a1      	b.n	800280e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	217e      	movs	r1, #126	@ 0x7e
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d100      	bne.n	80026e2 <HAL_UART_IRQHandler+0x2fa>
 80026e0:	e158      	b.n	8002994 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2258      	movs	r2, #88	@ 0x58
 80026e6:	5a9b      	ldrh	r3, [r3, r2]
 80026e8:	187a      	adds	r2, r7, r1
 80026ea:	8812      	ldrh	r2, [r2, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d300      	bcc.n	80026f2 <HAL_UART_IRQHandler+0x30a>
 80026f0:	e150      	b.n	8002994 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	215a      	movs	r1, #90	@ 0x5a
 80026f8:	8812      	ldrh	r2, [r2, #0]
 80026fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2220      	movs	r2, #32
 8002706:	4013      	ands	r3, r2
 8002708:	d16f      	bne.n	80027ea <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270a:	f3ef 8310 	mrs	r3, PRIMASK
 800270e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002712:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002714:	2301      	movs	r3, #1
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271a:	f383 8810 	msr	PRIMASK, r3
}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	499e      	ldr	r1, [pc, #632]	@ (80029a4 <HAL_UART_IRQHandler+0x5bc>)
 800272c:	400a      	ands	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002732:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	f383 8810 	msr	PRIMASK, r3
}
 800273a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273c:	f3ef 8310 	mrs	r3, PRIMASK
 8002740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002744:	677b      	str	r3, [r7, #116]	@ 0x74
 8002746:	2301      	movs	r3, #1
 8002748:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800274c:	f383 8810 	msr	PRIMASK, r3
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	438a      	bics	r2, r1
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276e:	f3ef 8310 	mrs	r3, PRIMASK
 8002772:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	673b      	str	r3, [r7, #112]	@ 0x70
 8002778:	2301      	movs	r3, #1
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800277e:	f383 8810 	msr	PRIMASK, r3
}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2140      	movs	r1, #64	@ 0x40
 8002790:	438a      	bics	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002796:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800279a:	f383 8810 	msr	PRIMASK, r3
}
 800279e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2280      	movs	r2, #128	@ 0x80
 80027a4:	2120      	movs	r1, #32
 80027a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ae:	f3ef 8310 	mrs	r3, PRIMASK
 80027b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80027b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027b8:	2301      	movs	r3, #1
 80027ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027be:	f383 8810 	msr	PRIMASK, r3
}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2110      	movs	r1, #16
 80027d0:	438a      	bics	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe fbef 	bl	8000fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2258      	movs	r2, #88	@ 0x58
 80027f4:	5a9a      	ldrh	r2, [r3, r2]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	215a      	movs	r1, #90	@ 0x5a
 80027fa:	5a5b      	ldrh	r3, [r3, r1]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	b29a      	uxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f7fd fec4 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800280c:	e0c2      	b.n	8002994 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2258      	movs	r2, #88	@ 0x58
 8002812:	5a99      	ldrh	r1, [r3, r2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	225a      	movs	r2, #90	@ 0x5a
 8002818:	5a9b      	ldrh	r3, [r3, r2]
 800281a:	b29a      	uxth	r2, r3
 800281c:	208e      	movs	r0, #142	@ 0x8e
 800281e:	183b      	adds	r3, r7, r0
 8002820:	1a8a      	subs	r2, r1, r2
 8002822:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	225a      	movs	r2, #90	@ 0x5a
 8002828:	5a9b      	ldrh	r3, [r3, r2]
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d100      	bne.n	8002832 <HAL_UART_IRQHandler+0x44a>
 8002830:	e0b2      	b.n	8002998 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002832:	183b      	adds	r3, r7, r0
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <HAL_UART_IRQHandler+0x454>
 800283a:	e0ad      	b.n	8002998 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283c:	f3ef 8310 	mrs	r3, PRIMASK
 8002840:	60fb      	str	r3, [r7, #12]
  return(result);
 8002842:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002844:	2488      	movs	r4, #136	@ 0x88
 8002846:	193a      	adds	r2, r7, r4
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f383 8810 	msr	PRIMASK, r3
}
 8002854:	46c0      	nop			@ (mov r8, r8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4951      	ldr	r1, [pc, #324]	@ (80029a8 <HAL_UART_IRQHandler+0x5c0>)
 8002862:	400a      	ands	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	193b      	adds	r3, r7, r4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f383 8810 	msr	PRIMASK, r3
}
 8002872:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002874:	f3ef 8310 	mrs	r3, PRIMASK
 8002878:	61bb      	str	r3, [r7, #24]
  return(result);
 800287a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287c:	2484      	movs	r4, #132	@ 0x84
 800287e:	193a      	adds	r2, r7, r4
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			@ (mov r8, r8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	438a      	bics	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	2120      	movs	r1, #32
 80028b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	2480      	movs	r4, #128	@ 0x80
 80028ca:	193a      	adds	r2, r7, r4
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	2301      	movs	r3, #1
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d4:	f383 8810 	msr	PRIMASK, r3
}
 80028d8:	46c0      	nop			@ (mov r8, r8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2110      	movs	r1, #16
 80028e6:	438a      	bics	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f2:	f383 8810 	msr	PRIMASK, r3
}
 80028f6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0011      	movs	r1, r2
 8002906:	0018      	movs	r0, r3
 8002908:	f7fd fe44 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800290c:	e044      	b.n	8002998 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800290e:	23a4      	movs	r3, #164	@ 0xa4
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	035b      	lsls	r3, r3, #13
 8002918:	4013      	ands	r3, r2
 800291a:	d010      	beq.n	800293e <HAL_UART_IRQHandler+0x556>
 800291c:	239c      	movs	r3, #156	@ 0x9c
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	03db      	lsls	r3, r3, #15
 8002926:	4013      	ands	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	0352      	lsls	r2, r2, #13
 8002932:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fecd 	bl	80036d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800293c:	e02f      	b.n	800299e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800293e:	23a4      	movs	r3, #164	@ 0xa4
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2280      	movs	r2, #128	@ 0x80
 8002946:	4013      	ands	r3, r2
 8002948:	d00f      	beq.n	800296a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800294a:	23a0      	movs	r3, #160	@ 0xa0
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01e      	beq.n	800299c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	0010      	movs	r0, r2
 8002966:	4798      	blx	r3
    }
    return;
 8002968:	e018      	b.n	800299c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800296a:	23a4      	movs	r3, #164	@ 0xa4
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2240      	movs	r2, #64	@ 0x40
 8002972:	4013      	ands	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_UART_IRQHandler+0x5b6>
 8002976:	23a0      	movs	r3, #160	@ 0xa0
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2240      	movs	r2, #64	@ 0x40
 800297e:	4013      	ands	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fe7b 	bl	8003680 <UART_EndTransmit_IT>
    return;
 800298a:	e008      	b.n	800299e <HAL_UART_IRQHandler+0x5b6>
      return;
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	e006      	b.n	800299e <HAL_UART_IRQHandler+0x5b6>
    return;
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	e004      	b.n	800299e <HAL_UART_IRQHandler+0x5b6>
      return;
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	e002      	b.n	800299e <HAL_UART_IRQHandler+0x5b6>
      return;
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	e000      	b.n	800299e <HAL_UART_IRQHandler+0x5b6>
    return;
 800299c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800299e:	46bd      	mov	sp, r7
 80029a0:	b02b      	add	sp, #172	@ 0xac
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	fffffeff 	.word	0xfffffeff
 80029a8:	fffffedf 	.word	0xfffffedf

080029ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80029c4:	46c0      	nop			@ (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b08e      	sub	sp, #56	@ 0x38
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f4:	231a      	movs	r3, #26
 80029f6:	2218      	movs	r2, #24
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	19db      	adds	r3, r3, r7
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4ab4      	ldr	r2, [pc, #720]	@ (8002cf0 <UART_SetConfig+0x304>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4aaf      	ldr	r2, [pc, #700]	@ (8002cf4 <UART_SetConfig+0x308>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4aa9      	ldr	r2, [pc, #676]	@ (8002cf8 <UART_SetConfig+0x30c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4aa5      	ldr	r2, [pc, #660]	@ (8002cfc <UART_SetConfig+0x310>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4aa1      	ldr	r2, [pc, #644]	@ (8002d00 <UART_SetConfig+0x314>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d131      	bne.n	8002ae4 <UART_SetConfig+0xf8>
 8002a80:	4ba0      	ldr	r3, [pc, #640]	@ (8002d04 <UART_SetConfig+0x318>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a84:	220c      	movs	r2, #12
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d01d      	beq.n	8002ac8 <UART_SetConfig+0xdc>
 8002a8c:	d823      	bhi.n	8002ad6 <UART_SetConfig+0xea>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d00c      	beq.n	8002aac <UART_SetConfig+0xc0>
 8002a92:	d820      	bhi.n	8002ad6 <UART_SetConfig+0xea>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <UART_SetConfig+0xb2>
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00e      	beq.n	8002aba <UART_SetConfig+0xce>
 8002a9c:	e01b      	b.n	8002ad6 <UART_SetConfig+0xea>
 8002a9e:	231b      	movs	r3, #27
 8002aa0:	2218      	movs	r2, #24
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e065      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002aac:	231b      	movs	r3, #27
 8002aae:	2218      	movs	r2, #24
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e05e      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002aba:	231b      	movs	r3, #27
 8002abc:	2218      	movs	r2, #24
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	19db      	adds	r3, r3, r7
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e057      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e050      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002ad6:	231b      	movs	r3, #27
 8002ad8:	2218      	movs	r2, #24
 8002ada:	189b      	adds	r3, r3, r2
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	2210      	movs	r2, #16
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e049      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a83      	ldr	r2, [pc, #524]	@ (8002cf8 <UART_SetConfig+0x30c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d13e      	bne.n	8002b6c <UART_SetConfig+0x180>
 8002aee:	4b85      	ldr	r3, [pc, #532]	@ (8002d04 <UART_SetConfig+0x318>)
 8002af0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002af2:	23c0      	movs	r3, #192	@ 0xc0
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	4013      	ands	r3, r2
 8002af8:	22c0      	movs	r2, #192	@ 0xc0
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d027      	beq.n	8002b50 <UART_SetConfig+0x164>
 8002b00:	22c0      	movs	r2, #192	@ 0xc0
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d82a      	bhi.n	8002b5e <UART_SetConfig+0x172>
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d011      	beq.n	8002b34 <UART_SetConfig+0x148>
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d822      	bhi.n	8002b5e <UART_SetConfig+0x172>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <UART_SetConfig+0x13a>
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	00d2      	lsls	r2, r2, #3
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <UART_SetConfig+0x156>
 8002b24:	e01b      	b.n	8002b5e <UART_SetConfig+0x172>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2218      	movs	r2, #24
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	19db      	adds	r3, r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e021      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002b34:	231b      	movs	r3, #27
 8002b36:	2218      	movs	r2, #24
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	19db      	adds	r3, r3, r7
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e01a      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002b42:	231b      	movs	r3, #27
 8002b44:	2218      	movs	r2, #24
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	19db      	adds	r3, r3, r7
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e013      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002b50:	231b      	movs	r3, #27
 8002b52:	2218      	movs	r2, #24
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	2208      	movs	r2, #8
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e00c      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002b5e:	231b      	movs	r3, #27
 8002b60:	2218      	movs	r2, #24
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	2210      	movs	r2, #16
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e005      	b.n	8002b78 <UART_SetConfig+0x18c>
 8002b6c:	231b      	movs	r3, #27
 8002b6e:	2218      	movs	r2, #24
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	2210      	movs	r2, #16
 8002b76:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf8 <UART_SetConfig+0x30c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d000      	beq.n	8002b84 <UART_SetConfig+0x198>
 8002b82:	e084      	b.n	8002c8e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b84:	231b      	movs	r3, #27
 8002b86:	2218      	movs	r2, #24
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	19db      	adds	r3, r3, r7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d01d      	beq.n	8002bce <UART_SetConfig+0x1e2>
 8002b92:	dc20      	bgt.n	8002bd6 <UART_SetConfig+0x1ea>
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d015      	beq.n	8002bc4 <UART_SetConfig+0x1d8>
 8002b98:	dc1d      	bgt.n	8002bd6 <UART_SetConfig+0x1ea>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <UART_SetConfig+0x1b8>
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d005      	beq.n	8002bae <UART_SetConfig+0x1c2>
 8002ba2:	e018      	b.n	8002bd6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba4:	f7ff fa74 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bac:	e01c      	b.n	8002be8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bae:	4b55      	ldr	r3, [pc, #340]	@ (8002d04 <UART_SetConfig+0x318>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d002      	beq.n	8002bbe <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <UART_SetConfig+0x31c>)
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bbc:	e014      	b.n	8002be8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002bbe:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <UART_SetConfig+0x320>)
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bc2:	e011      	b.n	8002be8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc4:	f7ff f9b4 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bcc:	e00c      	b.n	8002be8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bd4:	e008      	b.n	8002be8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002bda:	231a      	movs	r3, #26
 8002bdc:	2218      	movs	r2, #24
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	19db      	adds	r3, r3, r7
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
        break;
 8002be6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d100      	bne.n	8002bf0 <UART_SetConfig+0x204>
 8002bee:	e12f      	b.n	8002e50 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d305      	bcc.n	8002c0c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d906      	bls.n	8002c1a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002c0c:	231a      	movs	r3, #26
 8002c0e:	2218      	movs	r2, #24
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e11a      	b.n	8002e50 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	6939      	ldr	r1, [r7, #16]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	000b      	movs	r3, r1
 8002c28:	0e1b      	lsrs	r3, r3, #24
 8002c2a:	0010      	movs	r0, r2
 8002c2c:	0205      	lsls	r5, r0, #8
 8002c2e:	431d      	orrs	r5, r3
 8002c30:	000b      	movs	r3, r1
 8002c32:	021c      	lsls	r4, r3, #8
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	1900      	adds	r0, r0, r4
 8002c46:	4169      	adcs	r1, r5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f7fd fae3 	bl	8000220 <__aeabi_uldivmod>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	000b      	movs	r3, r1
 8002c5e:	0013      	movs	r3, r2
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c64:	23c0      	movs	r3, #192	@ 0xc0
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d309      	bcc.n	8002c80 <UART_SetConfig+0x294>
 8002c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	035b      	lsls	r3, r3, #13
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d204      	bcs.n	8002c80 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	e0e7      	b.n	8002e50 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002c80:	231a      	movs	r3, #26
 8002c82:	2218      	movs	r2, #24
 8002c84:	189b      	adds	r3, r3, r2
 8002c86:	19db      	adds	r3, r3, r7
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e0e0      	b.n	8002e50 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d000      	beq.n	8002c9c <UART_SetConfig+0x2b0>
 8002c9a:	e082      	b.n	8002da2 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002c9c:	231b      	movs	r3, #27
 8002c9e:	2218      	movs	r2, #24
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	19db      	adds	r3, r3, r7
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d834      	bhi.n	8002d14 <UART_SetConfig+0x328>
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <UART_SetConfig+0x324>)
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f7ff f9ec 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cbc:	e033      	b.n	8002d26 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cbe:	f7ff f9fd 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cc6:	e02e      	b.n	8002d26 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <UART_SetConfig+0x318>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d002      	beq.n	8002cd8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <UART_SetConfig+0x31c>)
 8002cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cd6:	e026      	b.n	8002d26 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <UART_SetConfig+0x320>)
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cdc:	e023      	b.n	8002d26 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cde:	f7ff f927 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ce6:	e01e      	b.n	8002d26 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cee:	e01a      	b.n	8002d26 <UART_SetConfig+0x33a>
 8002cf0:	efff69f3 	.word	0xefff69f3
 8002cf4:	ffffcfff 	.word	0xffffcfff
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	fffff4ff 	.word	0xfffff4ff
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40021000 	.word	0x40021000
 8002d08:	003d0900 	.word	0x003d0900
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	080038ec 	.word	0x080038ec
      default:
        pclk = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002d18:	231a      	movs	r3, #26
 8002d1a:	2218      	movs	r2, #24
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	19db      	adds	r3, r3, r7
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
        break;
 8002d24:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d100      	bne.n	8002d2e <UART_SetConfig+0x342>
 8002d2c:	e090      	b.n	8002e50 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	005a      	lsls	r2, r3, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	18d2      	adds	r2, r2, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0019      	movs	r1, r3
 8002d40:	0010      	movs	r0, r2
 8002d42:	f7fd f9e1 	bl	8000108 <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d921      	bls.n	8002d94 <UART_SetConfig+0x3a8>
 8002d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	025b      	lsls	r3, r3, #9
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d21c      	bcs.n	8002d94 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	200e      	movs	r0, #14
 8002d60:	2418      	movs	r4, #24
 8002d62:	1903      	adds	r3, r0, r4
 8002d64:	19db      	adds	r3, r3, r7
 8002d66:	210f      	movs	r1, #15
 8002d68:	438a      	bics	r2, r1
 8002d6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2207      	movs	r2, #7
 8002d74:	4013      	ands	r3, r2
 8002d76:	b299      	uxth	r1, r3
 8002d78:	1903      	adds	r3, r0, r4
 8002d7a:	19db      	adds	r3, r3, r7
 8002d7c:	1902      	adds	r2, r0, r4
 8002d7e:	19d2      	adds	r2, r2, r7
 8002d80:	8812      	ldrh	r2, [r2, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1902      	adds	r2, r0, r4
 8002d8c:	19d2      	adds	r2, r2, r7
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e05d      	b.n	8002e50 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002d94:	231a      	movs	r3, #26
 8002d96:	2218      	movs	r2, #24
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	19db      	adds	r3, r3, r7
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e056      	b.n	8002e50 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002da2:	231b      	movs	r3, #27
 8002da4:	2218      	movs	r2, #24
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	19db      	adds	r3, r3, r7
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d822      	bhi.n	8002df6 <UART_SetConfig+0x40a>
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e70 <UART_SetConfig+0x484>)
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dba:	f7ff f969 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002dc2:	e021      	b.n	8002e08 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff f97a 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002dcc:	e01c      	b.n	8002e08 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dce:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <UART_SetConfig+0x488>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d002      	beq.n	8002dde <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dd8:	4b27      	ldr	r3, [pc, #156]	@ (8002e78 <UART_SetConfig+0x48c>)
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ddc:	e014      	b.n	8002e08 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002dde:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <UART_SetConfig+0x490>)
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002de2:	e011      	b.n	8002e08 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de4:	f7ff f8a4 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002de8:	0003      	movs	r3, r0
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002dec:	e00c      	b.n	8002e08 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002df4:	e008      	b.n	8002e08 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002dfa:	231a      	movs	r3, #26
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
        break;
 8002e06:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d020      	beq.n	8002e50 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	085a      	lsrs	r2, r3, #1
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	18d2      	adds	r2, r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	0010      	movs	r0, r2
 8002e20:	f7fd f972 	bl	8000108 <__udivsi3>
 8002e24:	0003      	movs	r3, r0
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	d90a      	bls.n	8002e44 <UART_SetConfig+0x458>
 8002e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d205      	bcs.n	8002e44 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e005      	b.n	8002e50 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002e44:	231a      	movs	r3, #26
 8002e46:	2218      	movs	r2, #24
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2200      	movs	r2, #0
 8002e54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e5c:	231a      	movs	r3, #26
 8002e5e:	2218      	movs	r2, #24
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	781b      	ldrb	r3, [r3, #0]
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b00e      	add	sp, #56	@ 0x38
 8002e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	08003910 	.word	0x08003910
 8002e74:	40021000 	.word	0x40021000
 8002e78:	003d0900 	.word	0x003d0900
 8002e7c:	00f42400 	.word	0x00f42400

08002e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <UART_AdvFeatureConfig+0x144>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a43      	ldr	r2, [pc, #268]	@ (8002fc8 <UART_AdvFeatureConfig+0x148>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a3b      	ldr	r2, [pc, #236]	@ (8002fcc <UART_AdvFeatureConfig+0x14c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a34      	ldr	r2, [pc, #208]	@ (8002fd0 <UART_AdvFeatureConfig+0x150>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd4 <UART_AdvFeatureConfig+0x154>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	2220      	movs	r2, #32
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4a25      	ldr	r2, [pc, #148]	@ (8002fd8 <UART_AdvFeatureConfig+0x158>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	2240      	movs	r2, #64	@ 0x40
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <UART_AdvFeatureConfig+0x15c>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	035b      	lsls	r3, r3, #13
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d10b      	bne.n	8002f9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a15      	ldr	r2, [pc, #84]	@ (8002fe0 <UART_AdvFeatureConfig+0x160>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a0e      	ldr	r2, [pc, #56]	@ (8002fe4 <UART_AdvFeatureConfig+0x164>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }
}
 8002fbc:	46c0      	nop			@ (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	fffdffff 	.word	0xfffdffff
 8002fc8:	fffeffff 	.word	0xfffeffff
 8002fcc:	fffbffff 	.word	0xfffbffff
 8002fd0:	ffff7fff 	.word	0xffff7fff
 8002fd4:	ffffefff 	.word	0xffffefff
 8002fd8:	ffffdfff 	.word	0xffffdfff
 8002fdc:	ffefffff 	.word	0xffefffff
 8002fe0:	ff9fffff 	.word	0xff9fffff
 8002fe4:	fff7ffff 	.word	0xfff7ffff

08002fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b092      	sub	sp, #72	@ 0x48
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2284      	movs	r2, #132	@ 0x84
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ff8:	f7fd fe20 	bl	8000c3c <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2208      	movs	r2, #8
 8003008:	4013      	ands	r3, r2
 800300a:	2b08      	cmp	r3, #8
 800300c:	d12c      	bne.n	8003068 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003010:	2280      	movs	r2, #128	@ 0x80
 8003012:	0391      	lsls	r1, r2, #14
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4a46      	ldr	r2, [pc, #280]	@ (8003130 <UART_CheckIdleState+0x148>)
 8003018:	9200      	str	r2, [sp, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	f000 f88c 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d021      	beq.n	8003068 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003024:	f3ef 8310 	mrs	r3, PRIMASK
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800302c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800302e:	2301      	movs	r3, #1
 8003030:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			@ (mov r8, r8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	438a      	bics	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2278      	movs	r2, #120	@ 0x78
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e05f      	b.n	8003128 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2204      	movs	r2, #4
 8003070:	4013      	ands	r3, r2
 8003072:	2b04      	cmp	r3, #4
 8003074:	d146      	bne.n	8003104 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003078:	2280      	movs	r2, #128	@ 0x80
 800307a:	03d1      	lsls	r1, r2, #15
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4a2c      	ldr	r2, [pc, #176]	@ (8003130 <UART_CheckIdleState+0x148>)
 8003080:	9200      	str	r2, [sp, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	f000 f858 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d03b      	beq.n	8003104 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	60fb      	str	r3, [r7, #12]
  return(result);
 8003092:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003094:	637b      	str	r3, [r7, #52]	@ 0x34
 8003096:	2301      	movs	r3, #1
 8003098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4921      	ldr	r1, [pc, #132]	@ (8003134 <UART_CheckIdleState+0x14c>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80030c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	@ 0x80
 80030f4:	2120      	movs	r1, #32
 80030f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2278      	movs	r2, #120	@ 0x78
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e011      	b.n	8003128 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	@ 0x80
 800310e:	2120      	movs	r1, #32
 8003110:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2278      	movs	r2, #120	@ 0x78
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b010      	add	sp, #64	@ 0x40
 800312e:	bd80      	pop	{r7, pc}
 8003130:	01ffffff 	.word	0x01ffffff
 8003134:	fffffedf 	.word	0xfffffedf

08003138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	e04b      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3301      	adds	r3, #1
 800314e:	d048      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7fd fd74 	bl	8000c3c <HAL_GetTick>
 8003154:	0002      	movs	r2, r0
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d302      	bcc.n	8003166 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e04b      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2204      	movs	r2, #4
 8003172:	4013      	ands	r3, r2
 8003174:	d035      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2208      	movs	r2, #8
 800317e:	4013      	ands	r3, r2
 8003180:	2b08      	cmp	r3, #8
 8003182:	d111      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	0018      	movs	r0, r3
 8003190:	f000 f900 	bl	8003394 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2284      	movs	r2, #132	@ 0x84
 8003198:	2108      	movs	r1, #8
 800319a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2278      	movs	r2, #120	@ 0x78
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e02c      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	401a      	ands	r2, r3
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d112      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 f8e3 	bl	8003394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2284      	movs	r2, #132	@ 0x84
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2278      	movs	r2, #120	@ 0x78
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e00f      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	425a      	negs	r2, r3
 80031f2:	4153      	adcs	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	001a      	movs	r2, r3
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d0a4      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b090      	sub	sp, #64	@ 0x40
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	1dbb      	adds	r3, r7, #6
 8003218:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1dba      	adds	r2, r7, #6
 8003224:	2158      	movs	r1, #88	@ 0x58
 8003226:	8812      	ldrh	r2, [r2, #0]
 8003228:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2284      	movs	r2, #132	@ 0x84
 800322e:	2100      	movs	r1, #0
 8003230:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	2122      	movs	r1, #34	@ 0x22
 8003238:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	4a3e      	ldr	r2, [pc, #248]	@ (8003340 <UART_Start_Receive_DMA+0x134>)
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324e:	4a3d      	ldr	r2, [pc, #244]	@ (8003344 <UART_Start_Receive_DMA+0x138>)
 8003250:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	4a3c      	ldr	r2, [pc, #240]	@ (8003348 <UART_Start_Receive_DMA+0x13c>)
 8003258:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3324      	adds	r3, #36	@ 0x24
 800326c:	0019      	movs	r1, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003272:	001a      	movs	r2, r3
 8003274:	1dbb      	adds	r3, r7, #6
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f7fd fe40 	bl	8000efc <HAL_DMA_Start_IT>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d009      	beq.n	8003294 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2284      	movs	r2, #132	@ 0x84
 8003284:	2110      	movs	r1, #16
 8003286:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	2120      	movs	r1, #32
 800328e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e050      	b.n	8003336 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d019      	beq.n	80032d0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032a6:	2301      	movs	r3, #1
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	0049      	lsls	r1, r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	f383 8810 	msr	PRIMASK, r3
}
 80032ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d0:	f3ef 8310 	mrs	r3, PRIMASK
 80032d4:	613b      	str	r3, [r7, #16]
  return(result);
 80032d6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032da:	2301      	movs	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f383 8810 	msr	PRIMASK, r3
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003302:	f3ef 8310 	mrs	r3, PRIMASK
 8003306:	61fb      	str	r3, [r7, #28]
  return(result);
 8003308:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
 800330c:	2301      	movs	r3, #1
 800330e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	f383 8810 	msr	PRIMASK, r3
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2140      	movs	r1, #64	@ 0x40
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b010      	add	sp, #64	@ 0x40
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	0800345d 	.word	0x0800345d
 8003344:	0800358d 	.word	0x0800358d
 8003348:	080035cf 	.word	0x080035cf

0800334c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	60bb      	str	r3, [r7, #8]
  return(result);
 800335a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	2301      	movs	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	21c0      	movs	r1, #192	@ 0xc0
 8003376:	438a      	bics	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b006      	add	sp, #24
 8003392:	bd80      	pop	{r7, pc}

08003394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	@ 0x38
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339c:	f3ef 8310 	mrs	r3, PRIMASK
 80033a0:	617b      	str	r3, [r7, #20]
  return(result);
 80033a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a6:	2301      	movs	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4926      	ldr	r1, [pc, #152]	@ (8003458 <UART_EndRxTransfer+0xc4>)
 80033be:	400a      	ands	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f383 8810 	msr	PRIMASK, r3
}
 80033cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ce:	f3ef 8310 	mrs	r3, PRIMASK
 80033d2:	623b      	str	r3, [r7, #32]
  return(result);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80033d8:	2301      	movs	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	f383 8810 	msr	PRIMASK, r3
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003404:	2b01      	cmp	r3, #1
 8003406:	d118      	bne.n	800343a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003408:	f3ef 8310 	mrs	r3, PRIMASK
 800340c:	60bb      	str	r3, [r7, #8]
  return(result);
 800340e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003412:	2301      	movs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f383 8810 	msr	PRIMASK, r3
}
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2110      	movs	r1, #16
 800342a:	438a      	bics	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f383 8810 	msr	PRIMASK, r3
}
 8003438:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2280      	movs	r2, #128	@ 0x80
 800343e:	2120      	movs	r1, #32
 8003440:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b00e      	add	sp, #56	@ 0x38
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	fffffedf 	.word	0xfffffedf

0800345c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b094      	sub	sp, #80	@ 0x50
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2220      	movs	r2, #32
 8003472:	4013      	ands	r3, r2
 8003474:	d16f      	bne.n	8003556 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003478:	225a      	movs	r2, #90	@ 0x5a
 800347a:	2100      	movs	r1, #0
 800347c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347e:	f3ef 8310 	mrs	r3, PRIMASK
 8003482:	61bb      	str	r3, [r7, #24]
  return(result);
 8003484:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003488:	2301      	movs	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	493a      	ldr	r1, [pc, #232]	@ (8003588 <UART_DMAReceiveCplt+0x12c>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ba:	2301      	movs	r3, #1
 80034bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			@ (mov r8, r8)
 80034c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	438a      	bics	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ec:	2301      	movs	r3, #1
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2140      	movs	r1, #64	@ 0x40
 8003504:	438a      	bics	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	2120      	movs	r1, #32
 800351a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800351e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003520:	2b01      	cmp	r3, #1
 8003522:	d118      	bne.n	8003556 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003524:	f3ef 8310 	mrs	r3, PRIMASK
 8003528:	60fb      	str	r3, [r7, #12]
  return(result);
 800352a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800352e:	2301      	movs	r3, #1
 8003530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2110      	movs	r1, #16
 8003546:	438a      	bics	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003558:	2200      	movs	r2, #0
 800355a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	2b01      	cmp	r3, #1
 8003562:	d108      	bne.n	8003576 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003566:	2258      	movs	r2, #88	@ 0x58
 8003568:	5a9a      	ldrh	r2, [r3, r2]
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f7fd f810 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003574:	e003      	b.n	800357e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fa1f 	bl	80029bc <HAL_UART_RxCpltCallback>
}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b014      	add	sp, #80	@ 0x50
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	fffffeff 	.word	0xfffffeff

0800358c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10a      	bne.n	80035be <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2258      	movs	r2, #88	@ 0x58
 80035ac:	5a9b      	ldrh	r3, [r3, r2]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fc ffec 	bl	8000594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035bc:	e003      	b.n	80035c6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff fa03 	bl	80029cc <HAL_UART_RxHalfCpltCallback>
}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2280      	movs	r2, #128	@ 0x80
 80035e6:	589b      	ldr	r3, [r3, r2]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2280      	movs	r2, #128	@ 0x80
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b80      	cmp	r3, #128	@ 0x80
 80035f6:	d10a      	bne.n	800360e <UART_DMAError+0x40>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b21      	cmp	r3, #33	@ 0x21
 80035fc:	d107      	bne.n	800360e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2252      	movs	r2, #82	@ 0x52
 8003602:	2100      	movs	r1, #0
 8003604:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff fe9f 	bl	800334c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2240      	movs	r2, #64	@ 0x40
 8003616:	4013      	ands	r3, r2
 8003618:	2b40      	cmp	r3, #64	@ 0x40
 800361a:	d10a      	bne.n	8003632 <UART_DMAError+0x64>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b22      	cmp	r3, #34	@ 0x22
 8003620:	d107      	bne.n	8003632 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	225a      	movs	r2, #90	@ 0x5a
 8003626:	2100      	movs	r1, #0
 8003628:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	0018      	movs	r0, r3
 800362e:	f7ff feb1 	bl	8003394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2284      	movs	r2, #132	@ 0x84
 8003636:	589b      	ldr	r3, [r3, r2]
 8003638:	2210      	movs	r2, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2184      	movs	r1, #132	@ 0x84
 8003640:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	0018      	movs	r0, r3
 8003646:	f7ff f9c9 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b006      	add	sp, #24
 8003650:	bd80      	pop	{r7, pc}

08003652 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	225a      	movs	r2, #90	@ 0x5a
 8003664:	2100      	movs	r1, #0
 8003666:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2252      	movs	r2, #82	@ 0x52
 800366c:	2100      	movs	r1, #0
 800366e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff f9b2 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003688:	f3ef 8310 	mrs	r3, PRIMASK
 800368c:	60bb      	str	r3, [r7, #8]
  return(result);
 800368e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	2301      	movs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			@ (mov r8, r8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2140      	movs	r1, #64	@ 0x40
 80036aa:	438a      	bics	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f383 8810 	msr	PRIMASK, r3
}
 80036b8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff f96f 	bl	80029ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b006      	add	sp, #24
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e6:	b5b0      	push	{r4, r5, r7, lr}
 80036e8:	b08a      	sub	sp, #40	@ 0x28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2280      	movs	r2, #128	@ 0x80
 80036f8:	589b      	ldr	r3, [r3, r2]
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d156      	bne.n	80037ac <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e04e      	b.n	80037ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	015b      	lsls	r3, r3, #5
 8003718:	429a      	cmp	r2, r3
 800371a:	d109      	bne.n	8003730 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2201      	movs	r2, #1
 8003728:	4013      	ands	r3, r2
 800372a:	d001      	beq.n	8003730 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e03e      	b.n	80037ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800373c:	2527      	movs	r5, #39	@ 0x27
 800373e:	197c      	adds	r4, r7, r5
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff fd5f 	bl	800320c <UART_Start_Receive_DMA>
 800374e:	0003      	movs	r3, r0
 8003750:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003752:	197b      	adds	r3, r7, r5
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d124      	bne.n	80037a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	2b01      	cmp	r3, #1
 8003760:	d11c      	bne.n	800379c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2210      	movs	r2, #16
 8003768:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800376a:	f3ef 8310 	mrs	r3, PRIMASK
 800376e:	617b      	str	r3, [r7, #20]
  return(result);
 8003770:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	2301      	movs	r3, #1
 8003776:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f383 8810 	msr	PRIMASK, r3
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2110      	movs	r1, #16
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	e003      	b.n	80037a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800379c:	2327      	movs	r3, #39	@ 0x27
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80037a4:	2327      	movs	r3, #39	@ 0x27
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	e000      	b.n	80037ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b00a      	add	sp, #40	@ 0x28
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}

080037b6 <memset>:
 80037b6:	0003      	movs	r3, r0
 80037b8:	1882      	adds	r2, r0, r2
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d100      	bne.n	80037c0 <memset+0xa>
 80037be:	4770      	bx	lr
 80037c0:	7019      	strb	r1, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	e7f9      	b.n	80037ba <memset+0x4>
	...

080037c8 <__libc_init_array>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	2600      	movs	r6, #0
 80037cc:	4c0c      	ldr	r4, [pc, #48]	@ (8003800 <__libc_init_array+0x38>)
 80037ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003804 <__libc_init_array+0x3c>)
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	42a6      	cmp	r6, r4
 80037d6:	d109      	bne.n	80037ec <__libc_init_array+0x24>
 80037d8:	2600      	movs	r6, #0
 80037da:	f000 f819 	bl	8003810 <_init>
 80037de:	4c0a      	ldr	r4, [pc, #40]	@ (8003808 <__libc_init_array+0x40>)
 80037e0:	4d0a      	ldr	r5, [pc, #40]	@ (800380c <__libc_init_array+0x44>)
 80037e2:	1b64      	subs	r4, r4, r5
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	42a6      	cmp	r6, r4
 80037e8:	d105      	bne.n	80037f6 <__libc_init_array+0x2e>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	00b3      	lsls	r3, r6, #2
 80037ee:	58eb      	ldr	r3, [r5, r3]
 80037f0:	4798      	blx	r3
 80037f2:	3601      	adds	r6, #1
 80037f4:	e7ee      	b.n	80037d4 <__libc_init_array+0xc>
 80037f6:	00b3      	lsls	r3, r6, #2
 80037f8:	58eb      	ldr	r3, [r5, r3]
 80037fa:	4798      	blx	r3
 80037fc:	3601      	adds	r6, #1
 80037fe:	e7f2      	b.n	80037e6 <__libc_init_array+0x1e>
 8003800:	0800393c 	.word	0x0800393c
 8003804:	0800393c 	.word	0x0800393c
 8003808:	08003940 	.word	0x08003940
 800380c:	0800393c 	.word	0x0800393c

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
