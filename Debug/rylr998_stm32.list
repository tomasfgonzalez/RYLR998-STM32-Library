
rylr998_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800481c  0800481c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004824  08004824  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800482c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000005c  08004888  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08004888  00006388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6c8  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc0  00000000  00000000  0001074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00012710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062b  00000000  00000000  00012f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b52  00000000  00000000  0001355b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c966  00000000  00000000  000250ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066c7f  00000000  00000000  00031a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  000986d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004698 	.word	0x08004698

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004698 	.word	0x08004698

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <MX_DMA_Init+0x38>)
 80004d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_DMA_Init+0x38>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <MX_DMA_Init+0x38>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	200a      	movs	r0, #10
 80004f0:	f000 fe0e 	bl	8001110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004f4:	200a      	movs	r0, #10
 80004f6:	f000 fe20 	bl	800113a <HAL_NVIC_EnableIRQ>

}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	40021000 	.word	0x40021000

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	@ 0x24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	240c      	movs	r4, #12
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f003 fcf1 	bl	8003f00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_GPIO_Init+0x98>)
 8000520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_GPIO_Init+0x98>)
 8000524:	2104      	movs	r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	62da      	str	r2, [r3, #44]	@ 0x2c
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_GPIO_Init+0x98>)
 800052c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052e:	2204      	movs	r2, #4
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_GPIO_Init+0x98>)
 8000538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <MX_GPIO_Init+0x98>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000542:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <MX_GPIO_Init+0x98>)
 8000544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_GPIO_Init+0x98>)
 8000550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_GPIO_Init+0x98>)
 8000554:	2102      	movs	r1, #2
 8000556:	430a      	orrs	r2, r1
 8000558:	62da      	str	r2, [r3, #44]	@ 0x2c
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_GPIO_Init+0x98>)
 800055c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800055e:	2202      	movs	r2, #2
 8000560:	4013      	ands	r3, r2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_GPIO_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	2108      	movs	r1, #8
 800056c:	0018      	movs	r0, r3
 800056e:	f001 f9b1 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2208      	movs	r2, #8
 8000578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800058c:	187b      	adds	r3, r7, r1
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <MX_GPIO_Init+0x9c>)
 8000590:	0019      	movs	r1, r3
 8000592:	0010      	movs	r0, r2
 8000594:	f001 f830 	bl	80015f8 <HAL_GPIO_Init>

}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b009      	add	sp, #36	@ 0x24
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	50000400 	.word	0x50000400

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fc6f 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f845 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f7ff ffa7 	bl	8000508 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ba:	f7ff ff87 	bl	80004cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005be:	f000 fb05 	bl	8000bcc <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fb31 	bl	8000c28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_to_send[]= "Hola";
 80005c6:	003b      	movs	r3, r7
 80005c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000634 <main+0x8c>)
 80005ca:	6811      	ldr	r1, [r2, #0]
 80005cc:	6019      	str	r1, [r3, #0]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	711a      	strb	r2, [r3, #4]

  // HAL_UART_Transmit_DMA(&hlpuart1,tx_buff,strlen((char*)tx_buff));
  HAL_UART_Receive_DMA(&hlpuart1, rx_buff, 32);
 80005d2:	4919      	ldr	r1, [pc, #100]	@ (8000638 <main+0x90>)
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <main+0x94>)
 80005d6:	2220      	movs	r2, #32
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 f949 	bl	8002870 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */
   rylr998_sendData(&hlpuart1,0,(uint8_t*)&data_to_send,strlen((char*)data_to_send)); //TODO verify that the buffer is fully send
 80005de:	003b      	movs	r3, r7
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff fd91 	bl	8000108 <strlen>
 80005e6:	0003      	movs	r3, r0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	003a      	movs	r2, r7
 80005ec:	4813      	ldr	r0, [pc, #76]	@ (800063c <main+0x94>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	f000 f8a2 	bl	8000738 <rylr998_sendData>
   HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	@ 0x64
 80005f6:	f000 fcbb 	bl	8000f70 <HAL_Delay>

   rylr998_networkId(&hlpuart1,18);
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <main+0x94>)
 80005fc:	2112      	movs	r1, #18
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f922 	bl	8000848 <rylr998_networkId>
   HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	@ 0x64
 8000606:	f000 fcb3 	bl	8000f70 <HAL_Delay>

   rylr998_setAddress(&hlpuart1,0);
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <main+0x94>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f000 f974 	bl	80008fc <rylr998_setAddress>
   HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f000 fcab 	bl	8000f70 <HAL_Delay>

   rylr998_setParameter(&hlpuart1,9,7,1,12);
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <main+0x94>)
 800061c:	230c      	movs	r3, #12
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	2207      	movs	r2, #7
 8000624:	2109      	movs	r1, #9
 8000626:	f000 f9af 	bl	8000988 <rylr998_setParameter>
   HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	@ 0x64
 800062c:	f000 fca0 	bl	8000f70 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	e7fd      	b.n	8000630 <main+0x88>
 8000634:	080046b0 	.word	0x080046b0
 8000638:	20000078 	.word	0x20000078
 800063c:	2000009c 	.word	0x2000009c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b099      	sub	sp, #100	@ 0x64
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	242c      	movs	r4, #44	@ 0x2c
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	2334      	movs	r3, #52	@ 0x34
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f003 fc55 	bl	8003f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000656:	2318      	movs	r3, #24
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	2314      	movs	r3, #20
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f003 fc4d 	bl	8003f00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000666:	003b      	movs	r3, r7
 8000668:	0018      	movs	r0, r3
 800066a:	2318      	movs	r3, #24
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f003 fc46 	bl	8003f00 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <SystemClock_Config+0xe4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <SystemClock_Config+0xe8>)
 800067a:	401a      	ands	r2, r3
 800067c:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <SystemClock_Config+0xe4>)
 800067e:	2180      	movs	r1, #128	@ 0x80
 8000680:	0109      	lsls	r1, r1, #4
 8000682:	430a      	orrs	r2, r1
 8000684:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000686:	0021      	movs	r1, r4
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2202      	movs	r2, #2
 800068c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2201      	movs	r2, #1
 8000692:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2210      	movs	r2, #16
 8000698:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2202      	movs	r2, #2
 800069e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	02d2      	lsls	r2, r2, #11
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	03d2      	lsls	r2, r2, #15
 80006b4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f929 	bl	8001910 <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006c2:	f000 f833 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	2118      	movs	r1, #24
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	220f      	movs	r2, #15
 80006cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2101      	movs	r1, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fc8c 	bl	8002008 <HAL_RCC_ClockConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006f4:	f000 f81a 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2206      	movs	r2, #6
 80006fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800070a:	003b      	movs	r3, r7
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fe9f 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000716:	f000 f809 	bl	800072c <Error_Handler>
  }
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b019      	add	sp, #100	@ 0x64
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	40007000 	.word	0x40007000
 8000728:	ffffe7ff 	.word	0xffffe7ff

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <rylr998_sendData>:
 * @param  address: The destination address for the data.
 * @param  data: Pointer to the data to be sent.
 * @param  data_length: Length of the data to be sent.
 * @retval HAL_StatusTypeDef: HAL_OK if UART transmission is successful, HAL_ERROR if failed.
 */
HAL_StatusTypeDef rylr998_sendData(UART_HandleTypeDef *puartHandle, uint16_t address, uint8_t *data, uint8_t data_length) {
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af02      	add	r7, sp, #8
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	0008      	movs	r0, r1
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	0019      	movs	r1, r3
 8000746:	240a      	movs	r4, #10
 8000748:	193b      	adds	r3, r7, r4
 800074a:	1c02      	adds	r2, r0, #0
 800074c:	801a      	strh	r2, [r3, #0]
 800074e:	2009      	movs	r0, #9
 8000750:	183b      	adds	r3, r7, r0
 8000752:	1c0a      	adds	r2, r1, #0
 8000754:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000756:	231f      	movs	r3, #31
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
    uint16_t packetSize = snprintf(NULL, 0, "AT+SEND=%u,%u,", address, data_length) + data_length + 2;  // +2 for \r\n
 800075e:	193b      	adds	r3, r7, r4
 8000760:	8819      	ldrh	r1, [r3, #0]
 8000762:	0004      	movs	r4, r0
 8000764:	183b      	adds	r3, r7, r0
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4a36      	ldr	r2, [pc, #216]	@ (8000844 <rylr998_sendData+0x10c>)
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	000b      	movs	r3, r1
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f003 fb91 	bl	8003e98 <sniprintf>
 8000776:	0003      	movs	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	193b      	adds	r3, r7, r4
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b29b      	uxth	r3, r3
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	b29a      	uxth	r2, r3
 8000784:	211c      	movs	r1, #28
 8000786:	187b      	adds	r3, r7, r1
 8000788:	3202      	adds	r2, #2
 800078a:	801a      	strh	r2, [r3, #0]

    // Allocate buffer dynamically
    uint8_t *uartTxBuffer = (uint8_t *)malloc(packetSize);
 800078c:	187b      	adds	r3, r7, r1
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	0018      	movs	r0, r3
 8000792:	f003 fabb 	bl	8003d0c <malloc>
 8000796:	0003      	movs	r3, r0
 8000798:	61bb      	str	r3, [r7, #24]
    if (uartTxBuffer == NULL) {
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <rylr998_sendData+0x6c>
        return HAL_ERROR;  // Allocation failed
 80007a0:	2301      	movs	r3, #1
 80007a2:	e04a      	b.n	800083a <rylr998_sendData+0x102>
    }

    // Construct the AT command
    uint16_t offset = snprintf((char*)uartTxBuffer, packetSize, "AT+SEND=%u,%u,", address, data_length);
 80007a4:	231c      	movs	r3, #28
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	8819      	ldrh	r1, [r3, #0]
 80007aa:	230a      	movs	r3, #10
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	881c      	ldrh	r4, [r3, #0]
 80007b0:	2509      	movs	r5, #9
 80007b2:	197b      	adds	r3, r7, r5
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <rylr998_sendData+0x10c>)
 80007b8:	69b8      	ldr	r0, [r7, #24]
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	0023      	movs	r3, r4
 80007be:	f003 fb6b 	bl	8003e98 <sniprintf>
 80007c2:	0002      	movs	r2, r0
 80007c4:	2416      	movs	r4, #22
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	801a      	strh	r2, [r3, #0]

    // Append data
    memcpy(uartTxBuffer + offset, data, data_length);
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	18d0      	adds	r0, r2, r3
 80007d2:	197b      	adds	r3, r7, r5
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	0019      	movs	r1, r3
 80007da:	f003 fbd7 	bl	8003f8c <memcpy>
    offset += data_length;
 80007de:	197b      	adds	r3, r7, r5
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b299      	uxth	r1, r3
 80007e4:	0020      	movs	r0, r4
 80007e6:	183b      	adds	r3, r7, r0
 80007e8:	183a      	adds	r2, r7, r0
 80007ea:	8812      	ldrh	r2, [r2, #0]
 80007ec:	188a      	adds	r2, r1, r2
 80007ee:	801a      	strh	r2, [r3, #0]

    // Append command terminator
    uartTxBuffer[offset++] = '\r';
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	183a      	adds	r2, r7, r0
 80007f6:	1c59      	adds	r1, r3, #1
 80007f8:	8011      	strh	r1, [r2, #0]
 80007fa:	001a      	movs	r2, r3
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	220d      	movs	r2, #13
 8000802:	701a      	strb	r2, [r3, #0]
    uartTxBuffer[offset++] = '\n';
 8000804:	183b      	adds	r3, r7, r0
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	183a      	adds	r2, r7, r0
 800080a:	1c59      	adds	r1, r3, #1
 800080c:	8011      	strh	r1, [r2, #0]
 800080e:	001a      	movs	r2, r3
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	189b      	adds	r3, r3, r2
 8000814:	220a      	movs	r2, #10
 8000816:	701a      	strb	r2, [r3, #0]

    // Transmit command over UART
    ret = HAL_UART_Transmit_DMA(puartHandle, uartTxBuffer, offset);
 8000818:	251f      	movs	r5, #31
 800081a:	197c      	adds	r4, r7, r5
 800081c:	183b      	adds	r3, r7, r0
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	69b9      	ldr	r1, [r7, #24]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	0018      	movs	r0, r3
 8000826:	f001 ff93 	bl	8002750 <HAL_UART_Transmit_DMA>
 800082a:	0003      	movs	r3, r0
 800082c:	7023      	strb	r3, [r4, #0]

    // Free allocated memory
    free(uartTxBuffer);
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	0018      	movs	r0, r3
 8000832:	f003 fa75 	bl	8003d20 <free>

    return ret;
 8000836:	197b      	adds	r3, r7, r5
 8000838:	781b      	ldrb	r3, [r3, #0]
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b008      	add	sp, #32
 8000840:	bdb0      	pop	{r4, r5, r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	080046b8 	.word	0x080046b8

08000848 <rylr998_networkId>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  networkId: The network ID to be set (valid range: 3-15, 18).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if validation fails or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_networkId(UART_HandleTypeDef *puartHandle, uint8_t networkId) {
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	000a      	movs	r2, r1
 8000852:	1cfb      	adds	r3, r7, #3
 8000854:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_ERROR;
 8000856:	230f      	movs	r3, #15
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]

    // Validate network ID (Allowed: 3-15, 18)
     if (networkId < 3 || networkId == 16 || networkId == 17 || networkId > 18) {
 800085e:	1cfb      	adds	r3, r7, #3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d90b      	bls.n	800087e <rylr998_networkId+0x36>
 8000866:	1cfb      	adds	r3, r7, #3
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b10      	cmp	r3, #16
 800086c:	d007      	beq.n	800087e <rylr998_networkId+0x36>
 800086e:	1cfb      	adds	r3, r7, #3
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b11      	cmp	r3, #17
 8000874:	d003      	beq.n	800087e <rylr998_networkId+0x36>
 8000876:	1cfb      	adds	r3, r7, #3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d903      	bls.n	8000886 <rylr998_networkId+0x3e>
         return ret;  // Invalid network ID, return error
 800087e:	230f      	movs	r3, #15
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	e034      	b.n	80008f0 <rylr998_networkId+0xa8>
     }

    // Calculate required buffer size dynamically
    uint16_t packetSize = snprintf(NULL, 0, "AT+NETWORKID=%u\r\n", networkId) + 1;
 8000886:	1cfb      	adds	r3, r7, #3
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <rylr998_networkId+0xb0>)
 800088c:	2100      	movs	r1, #0
 800088e:	2000      	movs	r0, #0
 8000890:	f003 fb02 	bl	8003e98 <sniprintf>
 8000894:	0003      	movs	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	210c      	movs	r1, #12
 800089a:	187b      	adds	r3, r7, r1
 800089c:	3201      	adds	r2, #1
 800089e:	801a      	strh	r2, [r3, #0]

    // Allocate buffer
    uint8_t *uartTxBuffer = (uint8_t *)malloc(packetSize);
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f003 fa31 	bl	8003d0c <malloc>
 80008aa:	0003      	movs	r3, r0
 80008ac:	60bb      	str	r3, [r7, #8]
    if (uartTxBuffer == NULL) {
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <rylr998_networkId+0x70>
        return HAL_ERROR;  // Memory allocation failed
 80008b4:	2301      	movs	r3, #1
 80008b6:	e01b      	b.n	80008f0 <rylr998_networkId+0xa8>
    }

    // Construct the AT command
    snprintf((char*)uartTxBuffer, packetSize, "AT+NETWORKID=%u\r\n", networkId);
 80008b8:	240c      	movs	r4, #12
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	8819      	ldrh	r1, [r3, #0]
 80008be:	1cfb      	adds	r3, r7, #3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <rylr998_networkId+0xb0>)
 80008c4:	68b8      	ldr	r0, [r7, #8]
 80008c6:	f003 fae7 	bl	8003e98 <sniprintf>

    // Transmit the command over UART
    ret = HAL_UART_Transmit_DMA(puartHandle, uartTxBuffer, packetSize - 1);  // -1 to exclude null terminator
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	250f      	movs	r5, #15
 80008d4:	197c      	adds	r4, r7, r5
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 ff38 	bl	8002750 <HAL_UART_Transmit_DMA>
 80008e0:	0003      	movs	r3, r0
 80008e2:	7023      	strb	r3, [r4, #0]

    // Free allocated memory
    free(uartTxBuffer);
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f003 fa1a 	bl	8003d20 <free>

    return ret;
 80008ec:	197b      	adds	r3, r7, r5
 80008ee:	781b      	ldrb	r3, [r3, #0]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b004      	add	sp, #16
 80008f6:	bdb0      	pop	{r4, r5, r7, pc}
 80008f8:	080046c8 	.word	0x080046c8

080008fc <rylr998_setAddress>:
 * @param  puartHandle: Pointer to the UART handle used for communication.
 * @param  address: The address to be set on the RYLR998 module.
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setAddress(UART_HandleTypeDef *puartHandle, uint16_t address){
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	000a      	movs	r2, r1
 8000906:	1cbb      	adds	r3, r7, #2
 8000908:	801a      	strh	r2, [r3, #0]
	    HAL_StatusTypeDef ret = HAL_ERROR;
 800090a:	230f      	movs	r3, #15
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]

	    // Calculate required buffer size dynamically
	    uint16_t packetSize = snprintf(NULL, 0, "AT+ADDRESS=%u\r\n", address) + 1;
 8000912:	1cbb      	adds	r3, r7, #2
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <rylr998_setAddress+0x88>)
 8000918:	2100      	movs	r1, #0
 800091a:	2000      	movs	r0, #0
 800091c:	f003 fabc 	bl	8003e98 <sniprintf>
 8000920:	0003      	movs	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	210c      	movs	r1, #12
 8000926:	187b      	adds	r3, r7, r1
 8000928:	3201      	adds	r2, #1
 800092a:	801a      	strh	r2, [r3, #0]

	    // Allocate buffer
	    uint8_t *uartTxBuffer = (uint8_t *)malloc(packetSize);
 800092c:	187b      	adds	r3, r7, r1
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	f003 f9eb 	bl	8003d0c <malloc>
 8000936:	0003      	movs	r3, r0
 8000938:	60bb      	str	r3, [r7, #8]
	    if (uartTxBuffer == NULL) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <rylr998_setAddress+0x48>
	        return HAL_ERROR;  // Memory allocation failed
 8000940:	2301      	movs	r3, #1
 8000942:	e01b      	b.n	800097c <rylr998_setAddress+0x80>
	    }

	    // Construct the AT command
	    snprintf((char*)uartTxBuffer, packetSize, "AT+ADDRESS=%u\r\n", address);
 8000944:	240c      	movs	r4, #12
 8000946:	193b      	adds	r3, r7, r4
 8000948:	8819      	ldrh	r1, [r3, #0]
 800094a:	1cbb      	adds	r3, r7, #2
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <rylr998_setAddress+0x88>)
 8000950:	68b8      	ldr	r0, [r7, #8]
 8000952:	f003 faa1 	bl	8003e98 <sniprintf>

	    // Transmit the command over UART
	    ret = HAL_UART_Transmit_DMA(puartHandle, uartTxBuffer, packetSize - 1);  // -1 to exclude null terminator
 8000956:	193b      	adds	r3, r7, r4
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	3b01      	subs	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	250f      	movs	r5, #15
 8000960:	197c      	adds	r4, r7, r5
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fef2 	bl	8002750 <HAL_UART_Transmit_DMA>
 800096c:	0003      	movs	r3, r0
 800096e:	7023      	strb	r3, [r4, #0]

	    // Free allocated memory
	    free(uartTxBuffer);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	0018      	movs	r0, r3
 8000974:	f003 f9d4 	bl	8003d20 <free>

	    return ret;
 8000978:	197b      	adds	r3, r7, r5
 800097a:	781b      	ldrb	r3, [r3, #0]
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b004      	add	sp, #16
 8000982:	bdb0      	pop	{r4, r5, r7, pc}
 8000984:	080046dc 	.word	0x080046dc

08000988 <rylr998_setParameter>:
 * @param  CR: Coding Rate (valid range: 1-4).
 * @param  ProgramedPreamble: Programmed preamble length (valid range: 4-25).
 * @retval HAL_StatusTypeDef: HAL_OK if the command is successfully transmitted, HAL_ERROR if validation fails or memory allocation fails.
 *
 */
HAL_StatusTypeDef rylr998_setParameter(UART_HandleTypeDef *puartHandle,uint8_t SF,uint8_t BW,uint8_t CR,uint8_t ProgramedPreamble){
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af04      	add	r7, sp, #16
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	000c      	movs	r4, r1
 8000992:	0010      	movs	r0, r2
 8000994:	0019      	movs	r1, r3
 8000996:	1cfb      	adds	r3, r7, #3
 8000998:	1c22      	adds	r2, r4, #0
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	1cbb      	adds	r3, r7, #2
 800099e:	1c02      	adds	r2, r0, #0
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	1c7b      	adds	r3, r7, #1
 80009a4:	1c0a      	adds	r2, r1, #0
 80009a6:	701a      	strb	r2, [r3, #0]
	 HAL_StatusTypeDef ret = HAL_ERROR;
 80009a8:	230f      	movs	r3, #15
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
	 	 	if(SF<5 ||SF>11){
 80009b0:	1cfb      	adds	r3, r7, #3
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d903      	bls.n	80009c0 <rylr998_setParameter+0x38>
 80009b8:	1cfb      	adds	r3, r7, #3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b0b      	cmp	r3, #11
 80009be:	d903      	bls.n	80009c8 <rylr998_setParameter+0x40>
	 	 		return ret;
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	e073      	b.n	8000ab0 <rylr998_setParameter+0x128>
	 	 	}
	 	 	if(BW<7||BW>9){
 80009c8:	1cbb      	adds	r3, r7, #2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b06      	cmp	r3, #6
 80009ce:	d903      	bls.n	80009d8 <rylr998_setParameter+0x50>
 80009d0:	1cbb      	adds	r3, r7, #2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b09      	cmp	r3, #9
 80009d6:	d903      	bls.n	80009e0 <rylr998_setParameter+0x58>
	 	 		return ret;
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	e067      	b.n	8000ab0 <rylr998_setParameter+0x128>
	 	 	}
	 	 	if(CR<1||CR>4){
 80009e0:	1c7b      	adds	r3, r7, #1
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <rylr998_setParameter+0x68>
 80009e8:	1c7b      	adds	r3, r7, #1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d903      	bls.n	80009f8 <rylr998_setParameter+0x70>
	 	 		return ret;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	e05b      	b.n	8000ab0 <rylr998_setParameter+0x128>
	 	 	}
	 	 	if(ProgramedPreamble<4 || ProgramedPreamble>25){
 80009f8:	2228      	movs	r2, #40	@ 0x28
 80009fa:	18bb      	adds	r3, r7, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d903      	bls.n	8000a0a <rylr998_setParameter+0x82>
 8000a02:	18bb      	adds	r3, r7, r2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b19      	cmp	r3, #25
 8000a08:	d903      	bls.n	8000a12 <rylr998_setParameter+0x8a>
	 	 		return ret;
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	e04e      	b.n	8000ab0 <rylr998_setParameter+0x128>
	 	 	}
		    // Calculate required buffer size dynamically
		    uint16_t packetSize = snprintf(NULL, 0, "AT+PARAMETER=%u,%u,%u,%u\r\n", SF,BW,CR,ProgramedPreamble) + 1;
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	781c      	ldrb	r4, [r3, #0]
 8000a16:	1cbb      	adds	r3, r7, #2
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	1c7b      	adds	r3, r7, #1
 8000a1c:	7819      	ldrb	r1, [r3, #0]
 8000a1e:	2328      	movs	r3, #40	@ 0x28
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4824      	ldr	r0, [pc, #144]	@ (8000ab8 <rylr998_setParameter+0x130>)
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	9101      	str	r1, [sp, #4]
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	0023      	movs	r3, r4
 8000a2e:	0002      	movs	r2, r0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f003 fa30 	bl	8003e98 <sniprintf>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	210c      	movs	r1, #12
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	3201      	adds	r2, #1
 8000a42:	801a      	strh	r2, [r3, #0]

		    // Allocate buffer
		    uint8_t *uartTxBuffer = (uint8_t *)malloc(packetSize);
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f003 f95f 	bl	8003d0c <malloc>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	60bb      	str	r3, [r7, #8]
		    if (uartTxBuffer == NULL) {
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <rylr998_setParameter+0xd4>
		        return HAL_ERROR;  // Memory allocation failed
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e029      	b.n	8000ab0 <rylr998_setParameter+0x128>
		    }

		    // Construct the AT command
		    snprintf((char*)uartTxBuffer, packetSize, "AT+PARAMETER=%u,%u,%u,%u\r\n", SF,BW,CR,ProgramedPreamble);
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	881c      	ldrh	r4, [r3, #0]
 8000a62:	1cfb      	adds	r3, r7, #3
 8000a64:	781e      	ldrb	r6, [r3, #0]
 8000a66:	1cbb      	adds	r3, r7, #2
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	1c7b      	adds	r3, r7, #1
 8000a6c:	7819      	ldrb	r1, [r3, #0]
 8000a6e:	2028      	movs	r0, #40	@ 0x28
 8000a70:	183b      	adds	r3, r7, r0
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4d10      	ldr	r5, [pc, #64]	@ (8000ab8 <rylr998_setParameter+0x130>)
 8000a76:	68b8      	ldr	r0, [r7, #8]
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	9101      	str	r1, [sp, #4]
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	0033      	movs	r3, r6
 8000a80:	002a      	movs	r2, r5
 8000a82:	0021      	movs	r1, r4
 8000a84:	f003 fa08 	bl	8003e98 <sniprintf>

		    // Transmit the command over UART
		    ret = HAL_UART_Transmit_DMA(puartHandle, uartTxBuffer, packetSize - 1);  // -1 to exclude null terminator
 8000a88:	230c      	movs	r3, #12
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	250f      	movs	r5, #15
 8000a94:	197c      	adds	r4, r7, r5
 8000a96:	68b9      	ldr	r1, [r7, #8]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fe58 	bl	8002750 <HAL_UART_Transmit_DMA>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]

		    // Free allocated memory
		    free(uartTxBuffer);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f003 f93a 	bl	8003d20 <free>

		    return ret;
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	781b      	ldrb	r3, [r3, #0]

}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b005      	add	sp, #20
 8000ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab8:	080046ec 	.word	0x080046ec

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <HAL_MspInit+0x24>)
 8000ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x24>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <HAL_MspInit+0x24>)
 8000ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <HAL_MspInit+0x24>)
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	0549      	lsls	r1, r1, #21
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 fa14 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fc8d 	bl	800143e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fc89 	bl	800143e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	200001f4 	.word	0x200001f4
 8000b38:	200001ac 	.word	0x200001ac

08000b3c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <LPUART1_IRQHandler+0x14>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 fef2 	bl	800292c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	2000009c 	.word	0x2000009c

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	@ (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f003 f9d6 	bl	8003f34 <__errno>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	425b      	negs	r3, r3
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	18d2      	adds	r2, r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <_sbrk+0x64>)
 8000ba4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b006      	add	sp, #24
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20002000 	.word	0x20002000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	20000388 	.word	0x20000388

08000bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000bd2:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <MX_LPUART1_UART_Init+0x58>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000bd8:	22e1      	movs	r2, #225	@ 0xe1
 8000bda:	0252      	lsls	r2, r2, #9
 8000bdc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <MX_LPUART1_UART_Init+0x54>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 fd4c 	bl	80026a8 <HAL_UART_Init>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f7ff fd8a 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	40004800 	.word	0x40004800

08000c28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_USART2_UART_Init+0x5c>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c34:	22e1      	movs	r2, #225	@ 0xe1
 8000c36:	0252      	lsls	r2, r2, #9
 8000c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <MX_USART2_UART_Init+0x58>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 fd1b 	bl	80026a8 <HAL_UART_Init>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c76:	f7ff fd59 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000124 	.word	0x20000124
 8000c84:	40004400 	.word	0x40004400

08000c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	@ 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	2414      	movs	r4, #20
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	2314      	movs	r3, #20
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f003 f930 	bl	8003f00 <memset>
  if(uartHandle->Instance==LPUART1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8000e20 <HAL_UART_MspInit+0x198>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d000      	beq.n	8000cac <HAL_UART_MspInit+0x24>
 8000caa:	e084      	b.n	8000db6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cac:	4b5d      	ldr	r3, [pc, #372]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000cb2:	2180      	movs	r1, #128	@ 0x80
 8000cb4:	02c9      	lsls	r1, r1, #11
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b5a      	ldr	r3, [pc, #360]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cbe:	4b59      	ldr	r3, [pc, #356]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cc6:	4b57      	ldr	r3, [pc, #348]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2202      	movs	r2, #2
 8000cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2206      	movs	r2, #6
 8000cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	187a      	adds	r2, r7, r1
 8000cf4:	23a0      	movs	r3, #160	@ 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fc7c 	bl	80015f8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000d00:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d02:	4a4a      	ldr	r2, [pc, #296]	@ (8000e2c <HAL_UART_MspInit+0x1a4>)
 8000d04:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000d06:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d08:	2205      	movs	r2, #5
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1e:	4b42      	ldr	r3, [pc, #264]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d24:	4b40      	ldr	r3, [pc, #256]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d36:	4b3c      	ldr	r3, [pc, #240]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fa1b 	bl	8001174 <HAL_DMA_Init>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d42:	f7ff fcf3 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a37      	ldr	r2, [pc, #220]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d4a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <HAL_UART_MspInit+0x1a0>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d54:	4a37      	ldr	r2, [pc, #220]	@ (8000e34 <HAL_UART_MspInit+0x1ac>)
 8000d56:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000d58:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5e:	4b34      	ldr	r3, [pc, #208]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d60:	2210      	movs	r2, #16
 8000d62:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d64:	4b32      	ldr	r3, [pc, #200]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d6c:	2280      	movs	r2, #128	@ 0x80
 8000d6e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f9f2 	bl	8001174 <HAL_DMA_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000d94:	f7ff fcca 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a25      	ldr	r2, [pc, #148]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000d9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d9e:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_UART_MspInit+0x1a8>)
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	201d      	movs	r0, #29
 8000daa:	f000 f9b1 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dae:	201d      	movs	r0, #29
 8000db0:	f000 f9c3 	bl	800113a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db4:	e02f      	b.n	8000e16 <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1f      	ldr	r2, [pc, #124]	@ (8000e38 <HAL_UART_MspInit+0x1b0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d12a      	bne.n	8000e16 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000dc6:	2180      	movs	r1, #128	@ 0x80
 8000dc8:	0289      	lsls	r1, r1, #10
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_UART_MspInit+0x19c>)
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|VCP_RX_Pin;
 8000de6:	2114      	movs	r1, #20
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2282      	movs	r2, #130	@ 0x82
 8000dec:	0212      	lsls	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2202      	movs	r2, #2
 8000df4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2204      	movs	r2, #4
 8000e06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	187a      	adds	r2, r7, r1
 8000e0a:	23a0      	movs	r3, #160	@ 0xa0
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fbf1 	bl	80015f8 <HAL_GPIO_Init>
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b00b      	add	sp, #44	@ 0x2c
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	40004800 	.word	0x40004800
 8000e24:	40021000 	.word	0x40021000
 8000e28:	200001ac 	.word	0x200001ac
 8000e2c:	40020030 	.word	0x40020030
 8000e30:	200001f4 	.word	0x200001f4
 8000e34:	4002001c 	.word	0x4002001c
 8000e38:	40004400 	.word	0x40004400

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e3c:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e3e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e40:	f7ff febe 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f003 f869 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fb9b 	bl	80005a8 <main>

08000e72 <LoopForever>:

LoopForever:
    b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
   ldr   r0, =_estack
 8000e74:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e80:	0800482c 	.word	0x0800482c
  ldr r2, =_sbss
 8000e84:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e88:	20000388 	.word	0x20000388

08000e8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_COMP_IRQHandler>
	...

08000e90 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_Init+0x3c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <HAL_Init+0x3c>)
 8000ea2:	2140      	movs	r1, #64	@ 0x40
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f811 	bl	8000ed0 <HAL_InitTick>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e001      	b.n	8000ebe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eba:	f7ff fdff 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000eda:	681c      	ldr	r4, [r3, #0]
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <HAL_InitTick+0x60>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	23fa      	movs	r3, #250	@ 0xfa
 8000ee4:	0098      	lsls	r0, r3, #2
 8000ee6:	f7ff f921 	bl	800012c <__udivsi3>
 8000eea:	0003      	movs	r3, r0
 8000eec:	0019      	movs	r1, r3
 8000eee:	0020      	movs	r0, r4
 8000ef0:	f7ff f91c 	bl	800012c <__udivsi3>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f92f 	bl	800115a <HAL_SYSTICK_Config>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e00f      	b.n	8000f24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d80b      	bhi.n	8000f22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425b      	negs	r3, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 f8fc 	bl	8001110 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_InitTick+0x64>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	001a      	movs	r2, r3
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	18d2      	adds	r2, r2, r3
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	20000008 	.word	0x20000008
 8000f58:	2000023c 	.word	0x2000023c

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b02      	ldr	r3, [pc, #8]	@ (8000f6c <HAL_GetTick+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	2000023c 	.word	0x2000023c

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff fff0 	bl	8000f5c <HAL_GetTick>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3301      	adds	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	189b      	adds	r3, r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	f7ff ffe0 	bl	8000f5c <HAL_GetTick>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fca:	d809      	bhi.n	8000fe0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	231f      	movs	r3, #31
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <__NVIC_EnableIRQ+0x30>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4091      	lsls	r1, r2
 8000fdc:	000a      	movs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
  }
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001000:	d828      	bhi.n	8001054 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001002:	4a2f      	ldr	r2, [pc, #188]	@ (80010c0 <__NVIC_SetPriority+0xd4>)
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	33c0      	adds	r3, #192	@ 0xc0
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	589b      	ldr	r3, [r3, r2]
 8001012:	1dfa      	adds	r2, r7, #7
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	0011      	movs	r1, r2
 8001018:	2203      	movs	r2, #3
 800101a:	400a      	ands	r2, r1
 800101c:	00d2      	lsls	r2, r2, #3
 800101e:	21ff      	movs	r1, #255	@ 0xff
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	43d2      	mvns	r2, r2
 8001026:	401a      	ands	r2, r3
 8001028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	22ff      	movs	r2, #255	@ 0xff
 8001030:	401a      	ands	r2, r3
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	2303      	movs	r3, #3
 800103a:	4003      	ands	r3, r0
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <__NVIC_SetPriority+0xd4>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	430a      	orrs	r2, r1
 800104c:	33c0      	adds	r3, #192	@ 0xc0
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001052:	e031      	b.n	80010b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001054:	4a1b      	ldr	r2, [pc, #108]	@ (80010c4 <__NVIC_SetPriority+0xd8>)
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	0019      	movs	r1, r3
 800105c:	230f      	movs	r3, #15
 800105e:	400b      	ands	r3, r1
 8001060:	3b08      	subs	r3, #8
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3306      	adds	r3, #6
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	3304      	adds	r3, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1dfa      	adds	r2, r7, #7
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	0011      	movs	r1, r2
 8001074:	2203      	movs	r2, #3
 8001076:	400a      	ands	r2, r1
 8001078:	00d2      	lsls	r2, r2, #3
 800107a:	21ff      	movs	r1, #255	@ 0xff
 800107c:	4091      	lsls	r1, r2
 800107e:	000a      	movs	r2, r1
 8001080:	43d2      	mvns	r2, r2
 8001082:	401a      	ands	r2, r3
 8001084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	019b      	lsls	r3, r3, #6
 800108a:	22ff      	movs	r2, #255	@ 0xff
 800108c:	401a      	ands	r2, r3
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	0018      	movs	r0, r3
 8001094:	2303      	movs	r3, #3
 8001096:	4003      	ands	r3, r0
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109c:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <__NVIC_SetPriority+0xd8>)
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	001c      	movs	r4, r3
 80010a4:	230f      	movs	r3, #15
 80010a6:	4023      	ands	r3, r4
 80010a8:	3b08      	subs	r3, #8
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	430a      	orrs	r2, r1
 80010ae:	3306      	adds	r3, #6
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	18c3      	adds	r3, r0, r3
 80010b4:	3304      	adds	r3, #4
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b003      	add	sp, #12
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	045b      	lsls	r3, r3, #17
 80010d8:	429a      	cmp	r2, r3
 80010da:	d301      	bcc.n	80010e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010dc:	2301      	movs	r3, #1
 80010de:	e010      	b.n	8001102 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <SysTick_Config+0x44>)
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	3a01      	subs	r2, #1
 80010e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e8:	2301      	movs	r3, #1
 80010ea:	425b      	negs	r3, r3
 80010ec:	2103      	movs	r1, #3
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff ff7c 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x44>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x44>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	210f      	movs	r1, #15
 800111c:	187b      	adds	r3, r7, r1
 800111e:	1c02      	adds	r2, r0, #0
 8001120:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	187b      	adds	r3, r7, r1
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	0002      	movs	r2, r0
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b25b      	sxtb	r3, r3
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ff33 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ffaf 	bl	80010c8 <SysTick_Config>
 800116a:	0003      	movs	r3, r0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e061      	b.n	800124a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a32      	ldr	r2, [pc, #200]	@ (8001254 <HAL_DMA_Init+0xe0>)
 800118c:	4694      	mov	ip, r2
 800118e:	4463      	add	r3, ip
 8001190:	2114      	movs	r1, #20
 8001192:	0018      	movs	r0, r3
 8001194:	f7fe ffca 	bl	800012c <__udivsi3>
 8001198:	0003      	movs	r3, r0
 800119a:	009a      	lsls	r2, r3, #2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001258 <HAL_DMA_Init+0xe4>)
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2225      	movs	r2, #37	@ 0x25
 80011aa:	2102      	movs	r1, #2
 80011ac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4a28      	ldr	r2, [pc, #160]	@ (800125c <HAL_DMA_Init+0xe8>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d018      	beq.n	8001232 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_DMA_Init+0xec>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001208:	211c      	movs	r1, #28
 800120a:	400b      	ands	r3, r1
 800120c:	210f      	movs	r1, #15
 800120e:	4099      	lsls	r1, r3
 8001210:	000b      	movs	r3, r1
 8001212:	43d9      	mvns	r1, r3
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_DMA_Init+0xec>)
 8001216:	400a      	ands	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_DMA_Init+0xec>)
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	201c      	movs	r0, #28
 8001228:	4003      	ands	r3, r0
 800122a:	409a      	lsls	r2, r3
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_DMA_Init+0xec>)
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2225      	movs	r2, #37	@ 0x25
 800123c:	2101      	movs	r1, #1
 800123e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2224      	movs	r2, #36	@ 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	bffdfff8 	.word	0xbffdfff8
 8001258:	40020000 	.word	0x40020000
 800125c:	ffff800f 	.word	0xffff800f
 8001260:	400200a8 	.word	0x400200a8

08001264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2317      	movs	r3, #23
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2224      	movs	r2, #36	@ 0x24
 800127e:	5c9b      	ldrb	r3, [r3, r2]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_DMA_Start_IT+0x24>
 8001284:	2302      	movs	r3, #2
 8001286:	e04f      	b.n	8001328 <HAL_DMA_Start_IT+0xc4>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2224      	movs	r2, #36	@ 0x24
 800128c:	2101      	movs	r1, #1
 800128e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2225      	movs	r2, #37	@ 0x25
 8001294:	5c9b      	ldrb	r3, [r3, r2]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d13a      	bne.n	8001312 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2225      	movs	r2, #37	@ 0x25
 80012a0:	2102      	movs	r1, #2
 80012a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	438a      	bics	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f96a 	bl	800159a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	210e      	movs	r1, #14
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e00f      	b.n	8001300 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2104      	movs	r1, #4
 80012ec:	438a      	bics	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	210a      	movs	r1, #10
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e007      	b.n	8001322 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2224      	movs	r2, #36	@ 0x24
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800131a:	2317      	movs	r3, #23
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001322:	2317      	movs	r3, #23
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	781b      	ldrb	r3, [r3, #0]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b006      	add	sp, #24
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2225      	movs	r2, #37	@ 0x25
 8001344:	5c9b      	ldrb	r3, [r3, r2]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d008      	beq.n	800135e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2204      	movs	r2, #4
 8001350:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2224      	movs	r2, #36	@ 0x24
 8001356:	2100      	movs	r1, #0
 8001358:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e024      	b.n	80013a8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	210e      	movs	r1, #14
 800136a:	438a      	bics	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	438a      	bics	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	221c      	movs	r2, #28
 8001384:	401a      	ands	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	2101      	movs	r1, #1
 800138c:	4091      	lsls	r1, r2
 800138e:	000a      	movs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2225      	movs	r2, #37	@ 0x25
 8001396:	2101      	movs	r1, #1
 8001398:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2224      	movs	r2, #36	@ 0x24
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]

    return status;
 80013a2:	230f      	movs	r3, #15
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	210f      	movs	r1, #15
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2225      	movs	r2, #37	@ 0x25
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d006      	beq.n	80013da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e02a      	b.n	8001430 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	210e      	movs	r1, #14
 80013e6:	438a      	bics	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	221c      	movs	r2, #28
 8001400:	401a      	ands	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	2101      	movs	r1, #1
 8001408:	4091      	lsls	r1, r2
 800140a:	000a      	movs	r2, r1
 800140c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2225      	movs	r2, #37	@ 0x25
 8001412:	2101      	movs	r1, #1
 8001414:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2224      	movs	r2, #36	@ 0x24
 800141a:	2100      	movs	r1, #0
 800141c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	0010      	movs	r0, r2
 800142e:	4798      	blx	r3
    }
  }
  return status;
 8001430:	230f      	movs	r3, #15
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	221c      	movs	r2, #28
 800145c:	4013      	ands	r3, r2
 800145e:	2204      	movs	r2, #4
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4013      	ands	r3, r2
 8001468:	d026      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x7a>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2204      	movs	r2, #4
 800146e:	4013      	ands	r3, r2
 8001470:	d022      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2220      	movs	r2, #32
 800147a:	4013      	ands	r3, r2
 800147c:	d107      	bne.n	800148e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2104      	movs	r1, #4
 800148a:	438a      	bics	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	221c      	movs	r2, #28
 8001494:	401a      	ands	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	2104      	movs	r1, #4
 800149c:	4091      	lsls	r1, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d100      	bne.n	80014ac <HAL_DMA_IRQHandler+0x6e>
 80014aa:	e071      	b.n	8001590 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	0010      	movs	r0, r2
 80014b4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80014b6:	e06b      	b.n	8001590 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014bc:	221c      	movs	r2, #28
 80014be:	4013      	ands	r3, r2
 80014c0:	2202      	movs	r2, #2
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	d02d      	beq.n	8001528 <HAL_DMA_IRQHandler+0xea>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d029      	beq.n	8001528 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2220      	movs	r2, #32
 80014dc:	4013      	ands	r3, r2
 80014de:	d10b      	bne.n	80014f8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	210a      	movs	r1, #10
 80014ec:	438a      	bics	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2225      	movs	r2, #37	@ 0x25
 80014f4:	2101      	movs	r1, #1
 80014f6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	221c      	movs	r2, #28
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	2102      	movs	r1, #2
 8001506:	4091      	lsls	r1, r2
 8001508:	000a      	movs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	@ 0x24
 8001510:	2100      	movs	r1, #0
 8001512:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d039      	beq.n	8001590 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	0010      	movs	r0, r2
 8001524:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001526:	e033      	b.n	8001590 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	221c      	movs	r2, #28
 800152e:	4013      	ands	r3, r2
 8001530:	2208      	movs	r2, #8
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	d02a      	beq.n	8001592 <HAL_DMA_IRQHandler+0x154>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2208      	movs	r2, #8
 8001540:	4013      	ands	r3, r2
 8001542:	d026      	beq.n	8001592 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	210e      	movs	r1, #14
 8001550:	438a      	bics	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001558:	221c      	movs	r2, #28
 800155a:	401a      	ands	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	2101      	movs	r1, #1
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2225      	movs	r2, #37	@ 0x25
 8001572:	2101      	movs	r1, #1
 8001574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2224      	movs	r2, #36	@ 0x24
 800157a:	2100      	movs	r1, #0
 800157c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	0010      	movs	r0, r2
 800158e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001590:	46c0      	nop			@ (mov r8, r8)
 8001592:	46c0      	nop			@ (mov r8, r8)
}
 8001594:	46bd      	mov	sp, r7
 8001596:	b004      	add	sp, #16
 8001598:	bd80      	pop	{r7, pc}

0800159a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	221c      	movs	r2, #28
 80015ae:	401a      	ands	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	2101      	movs	r1, #1
 80015b6:	4091      	lsls	r1, r2
 80015b8:	000a      	movs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d108      	bne.n	80015de <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015dc:	e007      	b.n	80015ee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	60da      	str	r2, [r3, #12]
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800160e:	e149      	b.n	80018a4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4091      	lsls	r1, r2
 800161a:	000a      	movs	r2, r1
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d100      	bne.n	8001628 <HAL_GPIO_Init+0x30>
 8001626:	e13a      	b.n	800189e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	4013      	ands	r3, r2
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	409a      	lsls	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	2201      	movs	r2, #1
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2203      	movs	r2, #3
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	58d3      	ldr	r3, [r2, r3]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2207      	movs	r2, #7
 80016fc:	4013      	ands	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	43da      	mvns	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2107      	movs	r1, #7
 8001716:	400b      	ands	r3, r1
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	409a      	lsls	r2, r3
 8001740:	0013      	movs	r3, r2
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	401a      	ands	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	23c0      	movs	r3, #192	@ 0xc0
 800176c:	029b      	lsls	r3, r3, #10
 800176e:	4013      	ands	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_GPIO_Init+0x17c>
 8001772:	e094      	b.n	800189e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <HAL_GPIO_Init+0x2c4>)
 8001776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001778:	4b50      	ldr	r3, [pc, #320]	@ (80018bc <HAL_GPIO_Init+0x2c4>)
 800177a:	2101      	movs	r1, #1
 800177c:	430a      	orrs	r2, r1
 800177e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001780:	4a4f      	ldr	r2, [pc, #316]	@ (80018c0 <HAL_GPIO_Init+0x2c8>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	589b      	ldr	r3, [r3, r2]
 800178c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2203      	movs	r2, #3
 8001792:	4013      	ands	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	409a      	lsls	r2, r3
 800179a:	0013      	movs	r3, r2
 800179c:	43da      	mvns	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	23a0      	movs	r3, #160	@ 0xa0
 80017a8:	05db      	lsls	r3, r3, #23
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0x1de>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a44      	ldr	r2, [pc, #272]	@ (80018c4 <HAL_GPIO_Init+0x2cc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_GPIO_Init+0x1da>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a43      	ldr	r2, [pc, #268]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x1d6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <HAL_GPIO_Init+0x2d4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_GPIO_Init+0x1d2>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017d6:	2300      	movs	r3, #0
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	2103      	movs	r1, #3
 80017dc:	400a      	ands	r2, r1
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <HAL_GPIO_Init+0x2c8>)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	035b      	lsls	r3, r3, #13
 800180e:	4013      	ands	r3, r2
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43da      	mvns	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	039b      	lsls	r3, r3, #14
 8001838:	4013      	ands	r3, r2
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800184a:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43da      	mvns	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	025b      	lsls	r3, r3, #9
 800188c:	4013      	ands	r3, r2
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_GPIO_Init+0x2d8>)
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	1e13      	subs	r3, r2, #0
 80018ae:	d000      	beq.n	80018b2 <HAL_GPIO_Init+0x2ba>
 80018b0:	e6ae      	b.n	8001610 <HAL_GPIO_Init+0x18>
  }
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46c0      	nop			@ (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b006      	add	sp, #24
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	50000400 	.word	0x50000400
 80018c8:	50000800 	.word	0x50000800
 80018cc:	50001c00 	.word	0x50001c00
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	0008      	movs	r0, r1
 80018de:	0011      	movs	r1, r2
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	1c7b      	adds	r3, r7, #1
 80018e8:	1c0a      	adds	r2, r1, #0
 80018ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ec:	1c7b      	adds	r3, r7, #1
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f4:	1cbb      	adds	r3, r7, #2
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018fe:	1cbb      	adds	r3, r7, #2
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 fb6c 	bl	8001ffc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001924:	4bc8      	ldr	r3, [pc, #800]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
 800192c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192e:	4bc6      	ldr	r3, [pc, #792]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4013      	ands	r3, r2
 8001942:	d100      	bne.n	8001946 <HAL_RCC_OscConfig+0x36>
 8001944:	e07d      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d007      	beq.n	800195c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d112      	bne.n	8001978 <HAL_RCC_OscConfig+0x68>
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	429a      	cmp	r2, r3
 800195a:	d10d      	bne.n	8001978 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	4bba      	ldr	r3, [pc, #744]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x5a>
 8001968:	e06a      	b.n	8001a40 <HAL_RCC_OscConfig+0x130>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d166      	bne.n	8001a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f000 fb42 	bl	8001ffc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x84>
 8001984:	4bb0      	ldr	r3, [pc, #704]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4baf      	ldr	r3, [pc, #700]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0249      	lsls	r1, r1, #9
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e027      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	23a0      	movs	r3, #160	@ 0xa0
 800199a:	02db      	lsls	r3, r3, #11
 800199c:	429a      	cmp	r2, r3
 800199e:	d10e      	bne.n	80019be <HAL_RCC_OscConfig+0xae>
 80019a0:	4ba9      	ldr	r3, [pc, #676]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	02c9      	lsls	r1, r1, #11
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	4ba6      	ldr	r3, [pc, #664]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	0249      	lsls	r1, r1, #9
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e012      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 80019be:	4ba2      	ldr	r3, [pc, #648]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019c4:	49a1      	ldr	r1, [pc, #644]	@ (8001c4c <HAL_RCC_OscConfig+0x33c>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	4013      	ands	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019de:	499c      	ldr	r1, [pc, #624]	@ (8001c50 <HAL_RCC_OscConfig+0x340>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d014      	beq.n	8001a16 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fab6 	bl	8000f5c <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f6:	f7ff fab1 	bl	8000f5c <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	@ 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2f9      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a08:	4b8f      	ldr	r3, [pc, #572]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0xe6>
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff faa1 	bl	8000f5c <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fa9c 	bl	8000f5c <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e2e4      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a32:	4b85      	ldr	r3, [pc, #532]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	029b      	lsls	r3, r3, #10
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x110>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCC_OscConfig+0x13e>
 8001a4c:	e099      	b.n	8001b82 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	2220      	movs	r2, #32
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b79      	ldr	r3, [pc, #484]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a62:	2120      	movs	r1, #32
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d13e      	bne.n	8001afa <HAL_RCC_OscConfig+0x1ea>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13b      	bne.n	8001afa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a82:	4b71      	ldr	r3, [pc, #452]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d004      	beq.n	8001a96 <HAL_RCC_OscConfig+0x186>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e2b2      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c54 <HAL_RCC_OscConfig+0x344>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	021a      	lsls	r2, r3, #8
 8001aa6:	4b68      	ldr	r3, [pc, #416]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aac:	4b66      	ldr	r3, [pc, #408]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2209      	movs	r2, #9
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	4b64      	ldr	r3, [pc, #400]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 fbeb 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8001ac2:	0001      	movs	r1, r0
 8001ac4:	4b60      	ldr	r3, [pc, #384]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	220f      	movs	r2, #15
 8001acc:	4013      	ands	r3, r2
 8001ace:	4a62      	ldr	r2, [pc, #392]	@ (8001c58 <HAL_RCC_OscConfig+0x348>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	000a      	movs	r2, r1
 8001ad4:	40da      	lsrs	r2, r3
 8001ad6:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <HAL_RCC_OscConfig+0x34c>)
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ada:	4b61      	ldr	r3, [pc, #388]	@ (8001c60 <HAL_RCC_OscConfig+0x350>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2513      	movs	r5, #19
 8001ae0:	197c      	adds	r4, r7, r5
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff f9f4 	bl	8000ed0 <HAL_InitTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001aec:	197b      	adds	r3, r7, r5
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d046      	beq.n	8001b82 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001af4:	197b      	adds	r3, r7, r5
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	e280      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d027      	beq.n	8001b50 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b00:	4b51      	ldr	r3, [pc, #324]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2209      	movs	r2, #9
 8001b06:	4393      	bics	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa23 	bl	8000f5c <HAL_GetTick>
 8001b16:	0003      	movs	r3, r0
 8001b18:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa1e 	bl	8000f5c <HAL_GetTick>
 8001b20:	0002      	movs	r2, r0
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e266      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2e:	4b46      	ldr	r3, [pc, #280]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2204      	movs	r2, #4
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f1      	beq.n	8001b1c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b43      	ldr	r3, [pc, #268]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	@ (8001c54 <HAL_RCC_OscConfig+0x344>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	e018      	b.n	8001b82 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	4b3d      	ldr	r3, [pc, #244]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	438a      	bics	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f9fe 	bl	8000f5c <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff f9f9 	bl	8000f5c <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e241      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b78:	4b33      	ldr	r3, [pc, #204]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f1      	bne.n	8001b66 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2210      	movs	r2, #16
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCC_OscConfig+0x27e>
 8001b8c:	e0a1      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d140      	bne.n	8001c16 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b94:	4b2c      	ldr	r3, [pc, #176]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x29c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e227      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bac:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <HAL_RCC_OscConfig+0x354>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1a      	ldr	r2, [r3, #32]
 8001bba:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	0a19      	lsrs	r1, r3, #8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	061a      	lsls	r2, r3, #24
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	0b5b      	lsrs	r3, r3, #13
 8001bda:	3301      	adds	r3, #1
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	0212      	lsls	r2, r2, #8
 8001be0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	210f      	movs	r1, #15
 8001bea:	400b      	ands	r3, r1
 8001bec:	491a      	ldr	r1, [pc, #104]	@ (8001c58 <HAL_RCC_OscConfig+0x348>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_RCC_OscConfig+0x34c>)
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <HAL_RCC_OscConfig+0x350>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2513      	movs	r5, #19
 8001bfc:	197c      	adds	r4, r7, r5
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff f966 	bl	8000ed0 <HAL_InitTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c08:	197b      	adds	r3, r7, r5
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d060      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001c10:	197b      	adds	r3, r7, r5
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	e1f2      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d03f      	beq.n	8001c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	0049      	lsls	r1, r1, #1
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f996 	bl	8000f5c <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c34:	e018      	b.n	8001c68 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c36:	f7ff f991 	bl	8000f5c <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d911      	bls.n	8001c68 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1d9      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	fffeffff 	.word	0xfffeffff
 8001c50:	fffbffff 	.word	0xfffbffff
 8001c54:	ffffe0ff 	.word	0xffffe0ff
 8001c58:	0800477c 	.word	0x0800477c
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004
 8001c64:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c68:	4bc9      	ldr	r3, [pc, #804]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0e0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c74:	4bc6      	ldr	r3, [pc, #792]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4ac6      	ldr	r2, [pc, #792]	@ (8001f94 <HAL_RCC_OscConfig+0x684>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1a      	ldr	r2, [r3, #32]
 8001c82:	4bc3      	ldr	r3, [pc, #780]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c88:	4bc1      	ldr	r3, [pc, #772]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	0a19      	lsrs	r1, r3, #8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	061a      	lsls	r2, r3, #24
 8001c96:	4bbe      	ldr	r3, [pc, #760]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	e019      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c9e:	4bbc      	ldr	r3, [pc, #752]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4bbb      	ldr	r3, [pc, #748]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001ca4:	49bc      	ldr	r1, [pc, #752]	@ (8001f98 <HAL_RCC_OscConfig+0x688>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f957 	bl	8000f5c <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb4:	f7ff f952 	bl	8000f5c <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e19a      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cc6:	4bb2      	ldr	r3, [pc, #712]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d036      	beq.n	8001d4a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d019      	beq.n	8001d18 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce4:	4baa      	ldr	r3, [pc, #680]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ce8:	4ba9      	ldr	r3, [pc, #676]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f934 	bl	8000f5c <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f92f 	bl	8000f5c <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e177      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d0c:	4ba0      	ldr	r3, [pc, #640]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0f1      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ea>
 8001d16:	e018      	b.n	8001d4a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d18:	4b9d      	ldr	r3, [pc, #628]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f91a 	bl	8000f5c <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f915 	bl	8000f5c <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e15d      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d40:	4b93      	ldr	r3, [pc, #588]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1f1      	bne.n	8001d2e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x446>
 8001d54:	e0ae      	b.n	8001eb4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2023      	movs	r0, #35	@ 0x23
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	4013      	ands	r3, r2
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d6e:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0549      	lsls	r1, r1, #21
 8001d74:	430a      	orrs	r2, r1
 8001d76:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b87      	ldr	r3, [pc, #540]	@ (8001f9c <HAL_RCC_OscConfig+0x68c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d11a      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b84      	ldr	r3, [pc, #528]	@ (8001f9c <HAL_RCC_OscConfig+0x68c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <HAL_RCC_OscConfig+0x68c>)
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	0049      	lsls	r1, r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d98:	f7ff f8e0 	bl	8000f5c <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f8db 	bl	8000f5c <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	@ 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e123      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b79      	ldr	r3, [pc, #484]	@ (8001f9c <HAL_RCC_OscConfig+0x68c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4cc>
 8001dcc:	4b70      	ldr	r3, [pc, #448]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	0049      	lsls	r1, r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dda:	e031      	b.n	8001e40 <HAL_RCC_OscConfig+0x530>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4ee>
 8001de4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001de8:	4b69      	ldr	r3, [pc, #420]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001dea:	496b      	ldr	r1, [pc, #428]	@ (8001f98 <HAL_RCC_OscConfig+0x688>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	651a      	str	r2, [r3, #80]	@ 0x50
 8001df0:	4b67      	ldr	r3, [pc, #412]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001df2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001df4:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001df6:	496a      	ldr	r1, [pc, #424]	@ (8001fa0 <HAL_RCC_OscConfig+0x690>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dfc:	e020      	b.n	8001e40 <HAL_RCC_OscConfig+0x530>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	23a0      	movs	r3, #160	@ 0xa0
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d10e      	bne.n	8001e28 <HAL_RCC_OscConfig+0x518>
 8001e0a:	4b61      	ldr	r3, [pc, #388]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e0e:	4b60      	ldr	r3, [pc, #384]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	00c9      	lsls	r1, r1, #3
 8001e14:	430a      	orrs	r2, r1
 8001e16:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e18:	4b5d      	ldr	r3, [pc, #372]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e1e:	2180      	movs	r1, #128	@ 0x80
 8001e20:	0049      	lsls	r1, r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x530>
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e2c:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e2e:	495a      	ldr	r1, [pc, #360]	@ (8001f98 <HAL_RCC_OscConfig+0x688>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e34:	4b56      	ldr	r3, [pc, #344]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e38:	4b55      	ldr	r3, [pc, #340]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e3a:	4959      	ldr	r1, [pc, #356]	@ (8001fa0 <HAL_RCC_OscConfig+0x690>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d015      	beq.n	8001e74 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f888 	bl	8000f5c <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e50:	e009      	b.n	8001e66 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff f883 	bl	8000f5c <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a51      	ldr	r2, [pc, #324]	@ (8001fa4 <HAL_RCC_OscConfig+0x694>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0ca      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d0ef      	beq.n	8001e52 <HAL_RCC_OscConfig+0x542>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7ff f872 	bl	8000f5c <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f86d 	bl	8000f5c <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a46      	ldr	r2, [pc, #280]	@ (8001fa4 <HAL_RCC_OscConfig+0x694>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0b4      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e92:	4b3f      	ldr	r3, [pc, #252]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001e94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d1ef      	bne.n	8001e7e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e9e:	2323      	movs	r3, #35	@ 0x23
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eac:	4b38      	ldr	r3, [pc, #224]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001eae:	493e      	ldr	r1, [pc, #248]	@ (8001fa8 <HAL_RCC_OscConfig+0x698>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5ae>
 8001ebc:	e09d      	b.n	8001ffa <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x5b6>
 8001ec4:	e076      	b.n	8001fb4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d145      	bne.n	8001f5a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001ed4:	4935      	ldr	r1, [pc, #212]	@ (8001fac <HAL_RCC_OscConfig+0x69c>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff f83f 	bl	8000f5c <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f83a 	bl	8000f5c <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e082      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ef6:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	049b      	lsls	r3, r3, #18
 8001efe:	4013      	ands	r3, r2
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb0 <HAL_RCC_OscConfig+0x6a0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0449      	lsls	r1, r1, #17
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f814 	bl	8000f5c <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff f80f 	bl	8000f5c <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e057      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f4c:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	049b      	lsls	r3, r3, #18
 8001f54:	4013      	ands	r3, r2
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x62a>
 8001f58:	e04f      	b.n	8001ffa <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f60:	4912      	ldr	r1, [pc, #72]	@ (8001fac <HAL_RCC_OscConfig+0x69c>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fff9 	bl	8000f5c <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fff4 	bl	8000f5c <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e03c      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f82:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <HAL_RCC_OscConfig+0x680>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	049b      	lsls	r3, r3, #18
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x660>
 8001f8e:	e034      	b.n	8001ffa <HAL_RCC_OscConfig+0x6ea>
 8001f90:	40021000 	.word	0x40021000
 8001f94:	ffff1fff 	.word	0xffff1fff
 8001f98:	fffffeff 	.word	0xfffffeff
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	fffffbff 	.word	0xfffffbff
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	efffffff 	.word	0xefffffff
 8001fac:	feffffff 	.word	0xfeffffff
 8001fb0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_RCC_OscConfig+0x6f4>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	025b      	lsls	r3, r3, #9
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	23f0      	movs	r3, #240	@ 0xf0
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	23c0      	movs	r3, #192	@ 0xc0
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b00a      	add	sp, #40	@ 0x28
 8002002:	bdb0      	pop	{r4, r5, r7, pc}
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e128      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b96      	ldr	r3, [pc, #600]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d91e      	bls.n	8002068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b93      	ldr	r3, [pc, #588]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	4b90      	ldr	r3, [pc, #576]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800203c:	f7fe ff8e 	bl	8000f5c <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002044:	e009      	b.n	800205a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe ff89 	bl	8000f5c <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a8a      	ldr	r2, [pc, #552]	@ (800227c <HAL_RCC_ClockConfig+0x274>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e109      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b87      	ldr	r3, [pc, #540]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002072:	4b83      	ldr	r3, [pc, #524]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	22f0      	movs	r2, #240	@ 0xf0
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b7f      	ldr	r3, [pc, #508]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d100      	bne.n	8002092 <HAL_RCC_ClockConfig+0x8a>
 8002090:	e089      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800209a:	4b79      	ldr	r3, [pc, #484]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	4013      	ands	r3, r2
 80020a4:	d120      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0e1      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020b2:	4b73      	ldr	r3, [pc, #460]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	049b      	lsls	r3, r3, #18
 80020ba:	4013      	ands	r3, r2
 80020bc:	d114      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0d5      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
 80020d2:	d109      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0ca      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020d8:	4b69      	ldr	r3, [pc, #420]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0c2      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e8:	4b65      	ldr	r3, [pc, #404]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4393      	bics	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4b62      	ldr	r3, [pc, #392]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe ff2e 	bl	8000f5c <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d111      	bne.n	8002130 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	e009      	b.n	8002122 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210e:	f7fe ff25 	bl	8000f5c <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a58      	ldr	r2, [pc, #352]	@ (800227c <HAL_RCC_ClockConfig+0x274>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0a5      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002122:	4b57      	ldr	r3, [pc, #348]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	220c      	movs	r2, #12
 8002128:	4013      	ands	r3, r2
 800212a:	2b08      	cmp	r3, #8
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_ClockConfig+0x106>
 800212e:	e03a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d111      	bne.n	800215c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	e009      	b.n	800214e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe ff0f 	bl	8000f5c <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	4a4d      	ldr	r2, [pc, #308]	@ (800227c <HAL_RCC_ClockConfig+0x274>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e08f      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214e:	4b4c      	ldr	r3, [pc, #304]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	220c      	movs	r2, #12
 8002154:	4013      	ands	r3, r2
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_ClockConfig+0x132>
 800215a:	e024      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d11b      	bne.n	800219c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002164:	e009      	b.n	800217a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe fef9 	bl	8000f5c <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a42      	ldr	r2, [pc, #264]	@ (800227c <HAL_RCC_ClockConfig+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e079      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b41      	ldr	r3, [pc, #260]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	220c      	movs	r2, #12
 8002180:	4013      	ands	r3, r2
 8002182:	2b04      	cmp	r3, #4
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_ClockConfig+0x15e>
 8002186:	e00e      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fee8 	bl	8000f5c <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	4a3a      	ldr	r2, [pc, #232]	@ (800227c <HAL_RCC_ClockConfig+0x274>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e068      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800219c:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	220c      	movs	r2, #12
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d21e      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b4:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	4b2e      	ldr	r3, [pc, #184]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fec9 	bl	8000f5c <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fec4 	bl	8000f5c <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a28      	ldr	r2, [pc, #160]	@ (800227c <HAL_RCC_ClockConfig+0x274>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e044      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e4:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_RCC_ClockConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2204      	movs	r2, #4
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_RCC_ClockConfig+0x27c>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2208      	movs	r2, #8
 8002216:	4013      	ands	r3, r2
 8002218:	d00a      	beq.n	8002230 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a1a      	ldr	r2, [pc, #104]	@ (8002288 <HAL_RCC_ClockConfig+0x280>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00da      	lsls	r2, r3, #3
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002230:	f000 f832 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002234:	0001      	movs	r1, r0
 8002236:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_RCC_ClockConfig+0x278>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a12      	ldr	r2, [pc, #72]	@ (800228c <HAL_RCC_ClockConfig+0x284>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	000a      	movs	r2, r1
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_RCC_ClockConfig+0x288>)
 800224a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_ClockConfig+0x28c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	250b      	movs	r5, #11
 8002252:	197c      	adds	r4, r7, r5
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe fe3b 	bl	8000ed0 <HAL_InitTick>
 800225a:	0003      	movs	r3, r0
 800225c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800225e:	197b      	adds	r3, r7, r5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002266:	197b      	adds	r3, r7, r5
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	e000      	b.n	800226e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bdb0      	pop	{r4, r5, r7, pc}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	40022000 	.word	0x40022000
 800227c:	00001388 	.word	0x00001388
 8002280:	40021000 	.word	0x40021000
 8002284:	fffff8ff 	.word	0xfffff8ff
 8002288:	ffffc7ff 	.word	0xffffc7ff
 800228c:	0800477c 	.word	0x0800477c
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b08e      	sub	sp, #56	@ 0x38
 800229c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800229e:	4b4c      	ldr	r3, [pc, #304]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a6:	230c      	movs	r3, #12
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d014      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ae:	d900      	bls.n	80022b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80022b0:	e07b      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x112>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x24>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e076      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022bc:	4b44      	ldr	r3, [pc, #272]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2210      	movs	r2, #16
 80022c2:	4013      	ands	r3, r2
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022c6:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022c8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022ca:	e07c      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022cc:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80022d0:	e079      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b42      	ldr	r3, [pc, #264]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x144>)
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80022d6:	e076      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	0c9a      	lsrs	r2, r3, #18
 80022dc:	230f      	movs	r3, #15
 80022de:	401a      	ands	r2, r3
 80022e0:	4b3f      	ldr	r3, [pc, #252]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	0d9a      	lsrs	r2, r3, #22
 80022ea:	2303      	movs	r3, #3
 80022ec:	4013      	ands	r3, r2
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f2:	4b37      	ldr	r3, [pc, #220]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	4013      	ands	r3, r2
 80022fc:	d01a      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	4a35      	ldr	r2, [pc, #212]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x144>)
 8002308:	2300      	movs	r3, #0
 800230a:	69b8      	ldr	r0, [r7, #24]
 800230c:	69f9      	ldr	r1, [r7, #28]
 800230e:	f7fd ffb9 	bl	8000284 <__aeabi_lmul>
 8002312:	0002      	movs	r2, r0
 8002314:	000b      	movs	r3, r1
 8002316:	0010      	movs	r0, r2
 8002318:	0019      	movs	r1, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f7fd ff8d 	bl	8000244 <__aeabi_uldivmod>
 800232a:	0002      	movs	r2, r0
 800232c:	000b      	movs	r3, r1
 800232e:	0013      	movs	r3, r2
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
 8002332:	e037      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002334:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	4013      	ands	r3, r2
 800233c:	d01a      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4a23      	ldr	r2, [pc, #140]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002348:	2300      	movs	r3, #0
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	68f9      	ldr	r1, [r7, #12]
 800234e:	f7fd ff99 	bl	8000284 <__aeabi_lmul>
 8002352:	0002      	movs	r2, r0
 8002354:	000b      	movs	r3, r1
 8002356:	0010      	movs	r0, r2
 8002358:	0019      	movs	r1, r3
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f7fd ff6d 	bl	8000244 <__aeabi_uldivmod>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	0013      	movs	r3, r2
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
 8002372:	e017      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002376:	0018      	movs	r0, r3
 8002378:	2300      	movs	r3, #0
 800237a:	0019      	movs	r1, r3
 800237c:	4a16      	ldr	r2, [pc, #88]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800237e:	2300      	movs	r3, #0
 8002380:	f7fd ff80 	bl	8000284 <__aeabi_lmul>
 8002384:	0002      	movs	r2, r0
 8002386:	000b      	movs	r3, r1
 8002388:	0010      	movs	r0, r2
 800238a:	0019      	movs	r1, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	001c      	movs	r4, r3
 8002390:	2300      	movs	r3, #0
 8002392:	001d      	movs	r5, r3
 8002394:	0022      	movs	r2, r4
 8002396:	002b      	movs	r3, r5
 8002398:	f7fd ff54 	bl	8000244 <__aeabi_uldivmod>
 800239c:	0002      	movs	r2, r0
 800239e:	000b      	movs	r3, r1
 80023a0:	0013      	movs	r3, r2
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80023a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80023a8:	e00d      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	2207      	movs	r2, #7
 80023b2:	4013      	ands	r3, r2
 80023b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	3301      	adds	r3, #1
 80023ba:	2280      	movs	r2, #128	@ 0x80
 80023bc:	0212      	lsls	r2, r2, #8
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80023c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b00e      	add	sp, #56	@ 0x38
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	003d0900 	.word	0x003d0900
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	08004794 	.word	0x08004794

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b02      	ldr	r3, [pc, #8]	@ (80023f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	20000000 	.word	0x20000000

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff2 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002400:	0001      	movs	r1, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	2207      	movs	r2, #7
 800240a:	4013      	ands	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	40d9      	lsrs	r1, r3
 8002412:	000b      	movs	r3, r1
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	0800478c 	.word	0x0800478c

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	0001      	movs	r1, r0
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	2207      	movs	r2, #7
 8002436:	4013      	ands	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_RCC_GetPCLK2Freq+0x28>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	40d9      	lsrs	r1, r3
 800243e:	000b      	movs	r3, r1
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	40021000 	.word	0x40021000
 800244c:	0800478c 	.word	0x0800478c

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002458:	2017      	movs	r0, #23
 800245a:	183b      	adds	r3, r7, r0
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2220      	movs	r2, #32
 8002466:	4013      	ands	r3, r2
 8002468:	d100      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800246a:	e0c7      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246c:	4b84      	ldr	r3, [pc, #528]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800246e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	055b      	lsls	r3, r3, #21
 8002474:	4013      	ands	r3, r2
 8002476:	d109      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	4b81      	ldr	r3, [pc, #516]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800247a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800247c:	4b80      	ldr	r3, [pc, #512]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800247e:	2180      	movs	r1, #128	@ 0x80
 8002480:	0549      	lsls	r1, r1, #21
 8002482:	430a      	orrs	r2, r1
 8002484:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002486:	183b      	adds	r3, r7, r0
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b7d      	ldr	r3, [pc, #500]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d11a      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002498:	4b7a      	ldr	r3, [pc, #488]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b79      	ldr	r3, [pc, #484]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	0049      	lsls	r1, r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fd59 	bl	8000f5c <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b0:	f7fe fd54 	bl	8000f5c <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0d9      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b70      	ldr	r3, [pc, #448]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	23c0      	movs	r3, #192	@ 0xc0
 80024d4:	039b      	lsls	r3, r3, #14
 80024d6:	4013      	ands	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	23c0      	movs	r3, #192	@ 0xc0
 80024e0:	039b      	lsls	r3, r3, #14
 80024e2:	4013      	ands	r3, r2
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d013      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	23c0      	movs	r3, #192	@ 0xc0
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	401a      	ands	r2, r3
 80024f4:	23c0      	movs	r3, #192	@ 0xc0
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10a      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024fc:	4b60      	ldr	r3, [pc, #384]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	401a      	ands	r2, r3
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	429a      	cmp	r2, r3
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0b1      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002512:	4b5b      	ldr	r3, [pc, #364]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002516:	23c0      	movs	r3, #192	@ 0xc0
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d03b      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	23c0      	movs	r3, #192	@ 0xc0
 800252a:	029b      	lsls	r3, r3, #10
 800252c:	4013      	ands	r3, r2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d033      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2220      	movs	r2, #32
 800253a:	4013      	ands	r3, r2
 800253c:	d02e      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800253e:	4b50      	ldr	r3, [pc, #320]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002542:	4a51      	ldr	r2, [pc, #324]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002548:	4b4d      	ldr	r3, [pc, #308]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800254a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800254c:	4b4c      	ldr	r3, [pc, #304]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	0309      	lsls	r1, r1, #12
 8002552:	430a      	orrs	r2, r1
 8002554:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002556:	4b4a      	ldr	r3, [pc, #296]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800255a:	4b49      	ldr	r3, [pc, #292]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800255c:	494b      	ldr	r1, [pc, #300]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800255e:	400a      	ands	r2, r1
 8002560:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d014      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fcf3 	bl	8000f5c <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257a:	e009      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fcee 	bl	8000f5c <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a42      	ldr	r2, [pc, #264]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e072      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002592:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4013      	ands	r3, r2
 800259a:	d0ef      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2220      	movs	r2, #32
 80025a2:	4013      	ands	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	23c0      	movs	r3, #192	@ 0xc0
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	401a      	ands	r2, r3
 80025b0:	23c0      	movs	r3, #192	@ 0xc0
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80025b8:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a35      	ldr	r2, [pc, #212]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	23c0      	movs	r3, #192	@ 0xc0
 80025c8:	039b      	lsls	r3, r3, #14
 80025ca:	401a      	ands	r2, r3
 80025cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	23c0      	movs	r3, #192	@ 0xc0
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	401a      	ands	r2, r3
 80025e0:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e6:	2317      	movs	r3, #23
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025f4:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025f6:	4928      	ldr	r1, [pc, #160]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	220c      	movs	r2, #12
 800260c:	4393      	bics	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002616:	430a      	orrs	r2, r1
 8002618:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002628:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002634:	430a      	orrs	r2, r1
 8002636:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2208      	movs	r2, #8
 800263e:	4013      	ands	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002652:	430a      	orrs	r2, r1
 8002654:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	4013      	ands	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002670:	430a      	orrs	r2, r1
 8002672:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b006      	add	sp, #24
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	fffcffff 	.word	0xfffcffff
 800268c:	fff7ffff 	.word	0xfff7ffff
 8002690:	00001388 	.word	0x00001388
 8002694:	ffcfffff 	.word	0xffcfffff
 8002698:	efffffff 	.word	0xefffffff
 800269c:	fffff3ff 	.word	0xfffff3ff
 80026a0:	ffffcfff 	.word	0xffffcfff
 80026a4:	fff3ffff 	.word	0xfff3ffff

080026a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e044      	b.n	8002744 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2278      	movs	r2, #120	@ 0x78
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fe fadb 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2224      	movs	r2, #36	@ 0x24
 80026d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 fc34 	bl	8002f58 <UART_SetConfig>
 80026f0:	0003      	movs	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e024      	b.n	8002744 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fe71 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	490d      	ldr	r1, [pc, #52]	@ (800274c <HAL_UART_Init+0xa4>)
 8002716:	400a      	ands	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	212a      	movs	r1, #42	@ 0x2a
 8002726:	438a      	bics	r2, r1
 8002728:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 ff09 	bl	8003554 <UART_CheckIdleState>
 8002742:	0003      	movs	r3, r0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}
 800274c:	ffffb7ff 	.word	0xffffb7ff

08002750 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	1dbb      	adds	r3, r7, #6
 800275c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002762:	2b20      	cmp	r3, #32
 8002764:	d000      	beq.n	8002768 <HAL_UART_Transmit_DMA+0x18>
 8002766:	e077      	b.n	8002858 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_UART_Transmit_DMA+0x26>
 800276e:	1dbb      	adds	r3, r7, #6
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06f      	b.n	800285a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	429a      	cmp	r2, r3
 8002784:	d109      	bne.n	800279a <HAL_UART_Transmit_DMA+0x4a>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d001      	beq.n	800279a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e05f      	b.n	800285a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1dba      	adds	r2, r7, #6
 80027a4:	2150      	movs	r1, #80	@ 0x50
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1dba      	adds	r2, r7, #6
 80027ae:	2152      	movs	r1, #82	@ 0x52
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2284      	movs	r2, #132	@ 0x84
 80027b8:	2100      	movs	r1, #0
 80027ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2221      	movs	r2, #33	@ 0x21
 80027c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d027      	beq.n	800281a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a25      	ldr	r2, [pc, #148]	@ (8002864 <HAL_UART_Transmit_DMA+0x114>)
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a24      	ldr	r2, [pc, #144]	@ (8002868 <HAL_UART_Transmit_DMA+0x118>)
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a23      	ldr	r2, [pc, #140]	@ (800286c <HAL_UART_Transmit_DMA+0x11c>)
 80027e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	2200      	movs	r2, #0
 80027e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f2:	0019      	movs	r1, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3328      	adds	r3, #40	@ 0x28
 80027fa:	001a      	movs	r2, r3
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	f7fe fd30 	bl	8001264 <HAL_DMA_Start_IT>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d008      	beq.n	800281a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2284      	movs	r2, #132	@ 0x84
 800280c:	2110      	movs	r1, #16
 800280e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e01f      	b.n	800285a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002822:	f3ef 8310 	mrs	r3, PRIMASK
 8002826:	613b      	str	r3, [r7, #16]
  return(result);
 8002828:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	2301      	movs	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f383 8810 	msr	PRIMASK, r3
}
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2180      	movs	r1, #128	@ 0x80
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b008      	add	sp, #32
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	080039c9 	.word	0x080039c9
 8002868:	08003a61 	.word	0x08003a61
 800286c:	08003bf3 	.word	0x08003bf3

08002870 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	1dbb      	adds	r3, r7, #6
 800287c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	589b      	ldr	r3, [r3, r2]
 8002884:	2b20      	cmp	r3, #32
 8002886:	d14a      	bne.n	800291e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_UART_Receive_DMA+0x26>
 800288e:	1dbb      	adds	r3, r7, #6
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e042      	b.n	8002920 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	015b      	lsls	r3, r3, #5
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d109      	bne.n	80028ba <HAL_UART_Receive_DMA+0x4a>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d001      	beq.n	80028ba <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e032      	b.n	8002920 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <HAL_UART_Receive_DMA+0xb8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d020      	beq.n	800290c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	4013      	ands	r3, r2
 80028d6:	d019      	beq.n	800290c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d8:	f3ef 8310 	mrs	r3, PRIMASK
 80028dc:	613b      	str	r3, [r7, #16]
  return(result);
 80028de:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	2301      	movs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f383 8810 	msr	PRIMASK, r3
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	04c9      	lsls	r1, r1, #19
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f383 8810 	msr	PRIMASK, r3
}
 800290a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 ff2f 	bl	8003778 <UART_Start_Receive_DMA>
 800291a:	0003      	movs	r3, r0
 800291c:	e000      	b.n	8002920 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b008      	add	sp, #32
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40004800 	.word	0x40004800

0800292c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b0ab      	sub	sp, #172	@ 0xac
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	22a4      	movs	r2, #164	@ 0xa4
 800293c:	18b9      	adds	r1, r7, r2
 800293e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	20a0      	movs	r0, #160	@ 0xa0
 8002948:	1839      	adds	r1, r7, r0
 800294a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	219c      	movs	r1, #156	@ 0x9c
 8002954:	1879      	adds	r1, r7, r1
 8002956:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002958:	0011      	movs	r1, r2
 800295a:	18bb      	adds	r3, r7, r2
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a99      	ldr	r2, [pc, #612]	@ (8002bc4 <HAL_UART_IRQHandler+0x298>)
 8002960:	4013      	ands	r3, r2
 8002962:	2298      	movs	r2, #152	@ 0x98
 8002964:	18bc      	adds	r4, r7, r2
 8002966:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002968:	18bb      	adds	r3, r7, r2
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d114      	bne.n	800299a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002970:	187b      	adds	r3, r7, r1
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2220      	movs	r2, #32
 8002976:	4013      	ands	r3, r2
 8002978:	d00f      	beq.n	800299a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800297a:	183b      	adds	r3, r7, r0
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2220      	movs	r2, #32
 8002980:	4013      	ands	r3, r2
 8002982:	d00a      	beq.n	800299a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002988:	2b00      	cmp	r3, #0
 800298a:	d100      	bne.n	800298e <HAL_UART_IRQHandler+0x62>
 800298c:	e2a0      	b.n	8002ed0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	0010      	movs	r0, r2
 8002996:	4798      	blx	r3
      }
      return;
 8002998:	e29a      	b.n	8002ed0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800299a:	2398      	movs	r3, #152	@ 0x98
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <HAL_UART_IRQHandler+0x7a>
 80029a4:	e114      	b.n	8002bd0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029a6:	239c      	movs	r3, #156	@ 0x9c
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	4013      	ands	r3, r2
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029b2:	23a0      	movs	r3, #160	@ 0xa0
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a83      	ldr	r2, [pc, #524]	@ (8002bc8 <HAL_UART_IRQHandler+0x29c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	d100      	bne.n	80029c0 <HAL_UART_IRQHandler+0x94>
 80029be:	e107      	b.n	8002bd0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029c0:	23a4      	movs	r3, #164	@ 0xa4
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d012      	beq.n	80029f2 <HAL_UART_IRQHandler+0xc6>
 80029cc:	23a0      	movs	r3, #160	@ 0xa0
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4013      	ands	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2284      	movs	r2, #132	@ 0x84
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	2201      	movs	r2, #1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2184      	movs	r1, #132	@ 0x84
 80029f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f2:	23a4      	movs	r3, #164	@ 0xa4
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d011      	beq.n	8002a22 <HAL_UART_IRQHandler+0xf6>
 80029fe:	239c      	movs	r3, #156	@ 0x9c
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2284      	movs	r2, #132	@ 0x84
 8002a16:	589b      	ldr	r3, [r3, r2]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2184      	movs	r1, #132	@ 0x84
 8002a20:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a22:	23a4      	movs	r3, #164	@ 0xa4
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d011      	beq.n	8002a52 <HAL_UART_IRQHandler+0x126>
 8002a2e:	239c      	movs	r3, #156	@ 0x9c
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2284      	movs	r2, #132	@ 0x84
 8002a46:	589b      	ldr	r3, [r3, r2]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2184      	movs	r1, #132	@ 0x84
 8002a50:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a52:	23a4      	movs	r3, #164	@ 0xa4
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d017      	beq.n	8002a8e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a5e:	23a0      	movs	r3, #160	@ 0xa0
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	4013      	ands	r3, r2
 8002a68:	d105      	bne.n	8002a76 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a6a:	239c      	movs	r3, #156	@ 0x9c
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2284      	movs	r2, #132	@ 0x84
 8002a82:	589b      	ldr	r3, [r3, r2]
 8002a84:	2208      	movs	r2, #8
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2184      	movs	r1, #132	@ 0x84
 8002a8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a8e:	23a4      	movs	r3, #164	@ 0xa4
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x198>
 8002a9c:	23a0      	movs	r3, #160	@ 0xa0
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	04db      	lsls	r3, r3, #19
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2284      	movs	r2, #132	@ 0x84
 8002ab8:	589b      	ldr	r3, [r3, r2]
 8002aba:	2220      	movs	r2, #32
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2184      	movs	r1, #132	@ 0x84
 8002ac2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2284      	movs	r2, #132	@ 0x84
 8002ac8:	589b      	ldr	r3, [r3, r2]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d100      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x1a4>
 8002ace:	e201      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ad0:	23a4      	movs	r3, #164	@ 0xa4
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002adc:	23a0      	movs	r3, #160	@ 0xa0
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d008      	beq.n	8002afa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	0010      	movs	r0, r2
 8002af8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2284      	movs	r2, #132	@ 0x84
 8002afe:	589b      	ldr	r3, [r3, r2]
 8002b00:	2194      	movs	r1, #148	@ 0x94
 8002b02:	187a      	adds	r2, r7, r1
 8002b04:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b40      	cmp	r3, #64	@ 0x40
 8002b12:	d004      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2228      	movs	r2, #40	@ 0x28
 8002b1a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b1c:	d047      	beq.n	8002bae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 feed 	bl	8003900 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2240      	movs	r2, #64	@ 0x40
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d137      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b34:	f3ef 8310 	mrs	r3, PRIMASK
 8002b38:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3c:	2090      	movs	r0, #144	@ 0x90
 8002b3e:	183a      	adds	r2, r7, r0
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	2301      	movs	r3, #1
 8002b44:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <HAL_UART_IRQHandler+0x2a0>)
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7fe fc15 	bl	80013b0 <HAL_DMA_Abort_IT>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d01a      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b94:	0018      	movs	r0, r3
 8002b96:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	e012      	b.n	8002bc0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f9c7 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	e00d      	b.n	8002bc0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f9c2 	bl	8002f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bac:	e008      	b.n	8002bc0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 f9bd 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2284      	movs	r2, #132	@ 0x84
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002bbe:	e189      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	46c0      	nop			@ (mov r8, r8)
    return;
 8002bc2:	e187      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5a8>
 8002bc4:	0000080f 	.word	0x0000080f
 8002bc8:	04000120 	.word	0x04000120
 8002bcc:	08003c77 	.word	0x08003c77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d000      	beq.n	8002bda <HAL_UART_IRQHandler+0x2ae>
 8002bd8:	e13b      	b.n	8002e52 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bda:	23a4      	movs	r3, #164	@ 0xa4
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2210      	movs	r2, #16
 8002be2:	4013      	ands	r3, r2
 8002be4:	d100      	bne.n	8002be8 <HAL_UART_IRQHandler+0x2bc>
 8002be6:	e134      	b.n	8002e52 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002be8:	23a0      	movs	r3, #160	@ 0xa0
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x2ca>
 8002bf4:	e12d      	b.n	8002e52 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2240      	movs	r2, #64	@ 0x40
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b40      	cmp	r3, #64	@ 0x40
 8002c0a:	d000      	beq.n	8002c0e <HAL_UART_IRQHandler+0x2e2>
 8002c0c:	e0a1      	b.n	8002d52 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	217e      	movs	r1, #126	@ 0x7e
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d100      	bne.n	8002c26 <HAL_UART_IRQHandler+0x2fa>
 8002c24:	e158      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2258      	movs	r2, #88	@ 0x58
 8002c2a:	5a9b      	ldrh	r3, [r3, r2]
 8002c2c:	187a      	adds	r2, r7, r1
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d300      	bcc.n	8002c36 <HAL_UART_IRQHandler+0x30a>
 8002c34:	e150      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	187a      	adds	r2, r7, r1
 8002c3a:	215a      	movs	r1, #90	@ 0x5a
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d16f      	bne.n	8002d2e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c58:	2301      	movs	r3, #1
 8002c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	499e      	ldr	r1, [pc, #632]	@ (8002ee8 <HAL_UART_IRQHandler+0x5bc>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c80:	f3ef 8310 	mrs	r3, PRIMASK
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c88:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c90:	f383 8810 	msr	PRIMASK, r3
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cc2:	f383 8810 	msr	PRIMASK, r3
}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2140      	movs	r1, #64	@ 0x40
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cda:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2280      	movs	r2, #128	@ 0x80
 8002ce8:	2120      	movs	r1, #32
 8002cea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2110      	movs	r1, #16
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fe fb01 	bl	8001330 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2258      	movs	r2, #88	@ 0x58
 8002d38:	5a9a      	ldrh	r2, [r3, r2]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	215a      	movs	r1, #90	@ 0x5a
 8002d3e:	5a5b      	ldrh	r3, [r3, r1]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8f8 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d50:	e0c2      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2258      	movs	r2, #88	@ 0x58
 8002d56:	5a99      	ldrh	r1, [r3, r2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	225a      	movs	r2, #90	@ 0x5a
 8002d5c:	5a9b      	ldrh	r3, [r3, r2]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	208e      	movs	r0, #142	@ 0x8e
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	1a8a      	subs	r2, r1, r2
 8002d66:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	225a      	movs	r2, #90	@ 0x5a
 8002d6c:	5a9b      	ldrh	r3, [r3, r2]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_UART_IRQHandler+0x44a>
 8002d74:	e0b2      	b.n	8002edc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d100      	bne.n	8002d80 <HAL_UART_IRQHandler+0x454>
 8002d7e:	e0ad      	b.n	8002edc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d86:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	2488      	movs	r4, #136	@ 0x88
 8002d8a:	193a      	adds	r2, r7, r4
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4951      	ldr	r1, [pc, #324]	@ (8002eec <HAL_UART_IRQHandler+0x5c0>)
 8002da6:	400a      	ands	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dbe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	2484      	movs	r4, #132	@ 0x84
 8002dc2:	193a      	adds	r2, r7, r4
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	438a      	bics	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f383 8810 	msr	PRIMASK, r3
}
 8002dee:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	2120      	movs	r1, #32
 8002df6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0c:	2480      	movs	r4, #128	@ 0x80
 8002e0e:	193a      	adds	r2, r7, r4
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2110      	movs	r1, #16
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f878 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e50:	e044      	b.n	8002edc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e52:	23a4      	movs	r3, #164	@ 0xa4
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	035b      	lsls	r3, r3, #13
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d010      	beq.n	8002e82 <HAL_UART_IRQHandler+0x556>
 8002e60:	239c      	movs	r3, #156	@ 0x9c
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	03db      	lsls	r3, r3, #15
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	0352      	lsls	r2, r2, #13
 8002e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 ff3d 	bl	8003cfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e80:	e02f      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e82:	23a4      	movs	r3, #164	@ 0xa4
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2280      	movs	r2, #128	@ 0x80
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d00f      	beq.n	8002eae <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e8e:	23a0      	movs	r3, #160	@ 0xa0
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	4013      	ands	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01e      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	4798      	blx	r3
    }
    return;
 8002eac:	e018      	b.n	8002ee0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eae:	23a4      	movs	r3, #164	@ 0xa4
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
 8002eba:	23a0      	movs	r3, #160	@ 0xa0
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2240      	movs	r2, #64	@ 0x40
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 feeb 	bl	8003ca4 <UART_EndTransmit_IT>
    return;
 8002ece:	e008      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	e006      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	e004      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	e002      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002ee0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b02b      	add	sp, #172	@ 0xac
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	fffffeff 	.word	0xfffffeff
 8002eec:	fffffedf 	.word	0xfffffedf

08002ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ef8:	46c0      	nop			@ (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	000a      	movs	r2, r1
 8002f4a:	1cbb      	adds	r3, r7, #2
 8002f4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b08e      	sub	sp, #56	@ 0x38
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f60:	231a      	movs	r3, #26
 8002f62:	2218      	movs	r2, #24
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4ab4      	ldr	r2, [pc, #720]	@ (800325c <UART_SetConfig+0x304>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4aaf      	ldr	r2, [pc, #700]	@ (8003260 <UART_SetConfig+0x308>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4aa9      	ldr	r2, [pc, #676]	@ (8003264 <UART_SetConfig+0x30c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4aa5      	ldr	r2, [pc, #660]	@ (8003268 <UART_SetConfig+0x310>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4aa1      	ldr	r2, [pc, #644]	@ (800326c <UART_SetConfig+0x314>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d131      	bne.n	8003050 <UART_SetConfig+0xf8>
 8002fec:	4ba0      	ldr	r3, [pc, #640]	@ (8003270 <UART_SetConfig+0x318>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	220c      	movs	r2, #12
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d01d      	beq.n	8003034 <UART_SetConfig+0xdc>
 8002ff8:	d823      	bhi.n	8003042 <UART_SetConfig+0xea>
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d00c      	beq.n	8003018 <UART_SetConfig+0xc0>
 8002ffe:	d820      	bhi.n	8003042 <UART_SetConfig+0xea>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <UART_SetConfig+0xb2>
 8003004:	2b04      	cmp	r3, #4
 8003006:	d00e      	beq.n	8003026 <UART_SetConfig+0xce>
 8003008:	e01b      	b.n	8003042 <UART_SetConfig+0xea>
 800300a:	231b      	movs	r3, #27
 800300c:	2218      	movs	r2, #24
 800300e:	189b      	adds	r3, r3, r2
 8003010:	19db      	adds	r3, r3, r7
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e065      	b.n	80030e4 <UART_SetConfig+0x18c>
 8003018:	231b      	movs	r3, #27
 800301a:	2218      	movs	r2, #24
 800301c:	189b      	adds	r3, r3, r2
 800301e:	19db      	adds	r3, r3, r7
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e05e      	b.n	80030e4 <UART_SetConfig+0x18c>
 8003026:	231b      	movs	r3, #27
 8003028:	2218      	movs	r2, #24
 800302a:	189b      	adds	r3, r3, r2
 800302c:	19db      	adds	r3, r3, r7
 800302e:	2204      	movs	r2, #4
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e057      	b.n	80030e4 <UART_SetConfig+0x18c>
 8003034:	231b      	movs	r3, #27
 8003036:	2218      	movs	r2, #24
 8003038:	189b      	adds	r3, r3, r2
 800303a:	19db      	adds	r3, r3, r7
 800303c:	2208      	movs	r2, #8
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e050      	b.n	80030e4 <UART_SetConfig+0x18c>
 8003042:	231b      	movs	r3, #27
 8003044:	2218      	movs	r2, #24
 8003046:	189b      	adds	r3, r3, r2
 8003048:	19db      	adds	r3, r3, r7
 800304a:	2210      	movs	r2, #16
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e049      	b.n	80030e4 <UART_SetConfig+0x18c>
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a83      	ldr	r2, [pc, #524]	@ (8003264 <UART_SetConfig+0x30c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d13e      	bne.n	80030d8 <UART_SetConfig+0x180>
 800305a:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <UART_SetConfig+0x318>)
 800305c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800305e:	23c0      	movs	r3, #192	@ 0xc0
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4013      	ands	r3, r2
 8003064:	22c0      	movs	r2, #192	@ 0xc0
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	4293      	cmp	r3, r2
 800306a:	d027      	beq.n	80030bc <UART_SetConfig+0x164>
 800306c:	22c0      	movs	r2, #192	@ 0xc0
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	4293      	cmp	r3, r2
 8003072:	d82a      	bhi.n	80030ca <UART_SetConfig+0x172>
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	4293      	cmp	r3, r2
 800307a:	d011      	beq.n	80030a0 <UART_SetConfig+0x148>
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	4293      	cmp	r3, r2
 8003082:	d822      	bhi.n	80030ca <UART_SetConfig+0x172>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <UART_SetConfig+0x13a>
 8003088:	2280      	movs	r2, #128	@ 0x80
 800308a:	00d2      	lsls	r2, r2, #3
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <UART_SetConfig+0x156>
 8003090:	e01b      	b.n	80030ca <UART_SetConfig+0x172>
 8003092:	231b      	movs	r3, #27
 8003094:	2218      	movs	r2, #24
 8003096:	189b      	adds	r3, r3, r2
 8003098:	19db      	adds	r3, r3, r7
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e021      	b.n	80030e4 <UART_SetConfig+0x18c>
 80030a0:	231b      	movs	r3, #27
 80030a2:	2218      	movs	r2, #24
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e01a      	b.n	80030e4 <UART_SetConfig+0x18c>
 80030ae:	231b      	movs	r3, #27
 80030b0:	2218      	movs	r2, #24
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2204      	movs	r2, #4
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e013      	b.n	80030e4 <UART_SetConfig+0x18c>
 80030bc:	231b      	movs	r3, #27
 80030be:	2218      	movs	r2, #24
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	19db      	adds	r3, r3, r7
 80030c4:	2208      	movs	r2, #8
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e00c      	b.n	80030e4 <UART_SetConfig+0x18c>
 80030ca:	231b      	movs	r3, #27
 80030cc:	2218      	movs	r2, #24
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	2210      	movs	r2, #16
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e005      	b.n	80030e4 <UART_SetConfig+0x18c>
 80030d8:	231b      	movs	r3, #27
 80030da:	2218      	movs	r2, #24
 80030dc:	189b      	adds	r3, r3, r2
 80030de:	19db      	adds	r3, r3, r7
 80030e0:	2210      	movs	r2, #16
 80030e2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003264 <UART_SetConfig+0x30c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d000      	beq.n	80030f0 <UART_SetConfig+0x198>
 80030ee:	e084      	b.n	80031fa <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030f0:	231b      	movs	r3, #27
 80030f2:	2218      	movs	r2, #24
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	19db      	adds	r3, r3, r7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d01d      	beq.n	800313a <UART_SetConfig+0x1e2>
 80030fe:	dc20      	bgt.n	8003142 <UART_SetConfig+0x1ea>
 8003100:	2b04      	cmp	r3, #4
 8003102:	d015      	beq.n	8003130 <UART_SetConfig+0x1d8>
 8003104:	dc1d      	bgt.n	8003142 <UART_SetConfig+0x1ea>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <UART_SetConfig+0x1b8>
 800310a:	2b02      	cmp	r3, #2
 800310c:	d005      	beq.n	800311a <UART_SetConfig+0x1c2>
 800310e:	e018      	b.n	8003142 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003110:	f7ff f972 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003114:	0003      	movs	r3, r0
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003118:	e01c      	b.n	8003154 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800311a:	4b55      	ldr	r3, [pc, #340]	@ (8003270 <UART_SetConfig+0x318>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2210      	movs	r2, #16
 8003120:	4013      	ands	r3, r2
 8003122:	d002      	beq.n	800312a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <UART_SetConfig+0x31c>)
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003128:	e014      	b.n	8003154 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800312a:	4b53      	ldr	r3, [pc, #332]	@ (8003278 <UART_SetConfig+0x320>)
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800312e:	e011      	b.n	8003154 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003130:	f7ff f8b2 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8003134:	0003      	movs	r3, r0
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003138:	e00c      	b.n	8003154 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003140:	e008      	b.n	8003154 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003146:	231a      	movs	r3, #26
 8003148:	2218      	movs	r2, #24
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
        break;
 8003152:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d100      	bne.n	800315c <UART_SetConfig+0x204>
 800315a:	e12f      	b.n	80033bc <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	0013      	movs	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	189b      	adds	r3, r3, r2
 8003166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d305      	bcc.n	8003178 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003174:	429a      	cmp	r2, r3
 8003176:	d906      	bls.n	8003186 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003178:	231a      	movs	r3, #26
 800317a:	2218      	movs	r2, #24
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e11a      	b.n	80033bc <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	6939      	ldr	r1, [r7, #16]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	000b      	movs	r3, r1
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	0010      	movs	r0, r2
 8003198:	0205      	lsls	r5, r0, #8
 800319a:	431d      	orrs	r5, r3
 800319c:	000b      	movs	r3, r1
 800319e:	021c      	lsls	r4, r3, #8
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68b8      	ldr	r0, [r7, #8]
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	1900      	adds	r0, r0, r4
 80031b2:	4169      	adcs	r1, r5
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f7fd f83f 	bl	8000244 <__aeabi_uldivmod>
 80031c6:	0002      	movs	r2, r0
 80031c8:	000b      	movs	r3, r1
 80031ca:	0013      	movs	r3, r2
 80031cc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031d0:	23c0      	movs	r3, #192	@ 0xc0
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d309      	bcc.n	80031ec <UART_SetConfig+0x294>
 80031d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	035b      	lsls	r3, r3, #13
 80031de:	429a      	cmp	r2, r3
 80031e0:	d204      	bcs.n	80031ec <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e0e7      	b.n	80033bc <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80031ec:	231a      	movs	r3, #26
 80031ee:	2218      	movs	r2, #24
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	19db      	adds	r3, r3, r7
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e0e0      	b.n	80033bc <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	429a      	cmp	r2, r3
 8003204:	d000      	beq.n	8003208 <UART_SetConfig+0x2b0>
 8003206:	e082      	b.n	800330e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003208:	231b      	movs	r3, #27
 800320a:	2218      	movs	r2, #24
 800320c:	189b      	adds	r3, r3, r2
 800320e:	19db      	adds	r3, r3, r7
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d834      	bhi.n	8003280 <UART_SetConfig+0x328>
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	4b18      	ldr	r3, [pc, #96]	@ (800327c <UART_SetConfig+0x324>)
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff f8ea 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003224:	0003      	movs	r3, r0
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003228:	e033      	b.n	8003292 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322a:	f7ff f8fb 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 800322e:	0003      	movs	r3, r0
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003232:	e02e      	b.n	8003292 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <UART_SetConfig+0x318>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2210      	movs	r2, #16
 800323a:	4013      	ands	r3, r2
 800323c:	d002      	beq.n	8003244 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <UART_SetConfig+0x31c>)
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003242:	e026      	b.n	8003292 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <UART_SetConfig+0x320>)
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003248:	e023      	b.n	8003292 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7ff f825 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 800324e:	0003      	movs	r3, r0
 8003250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003252:	e01e      	b.n	8003292 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800325a:	e01a      	b.n	8003292 <UART_SetConfig+0x33a>
 800325c:	efff69f3 	.word	0xefff69f3
 8003260:	ffffcfff 	.word	0xffffcfff
 8003264:	40004800 	.word	0x40004800
 8003268:	fffff4ff 	.word	0xfffff4ff
 800326c:	40004400 	.word	0x40004400
 8003270:	40021000 	.word	0x40021000
 8003274:	003d0900 	.word	0x003d0900
 8003278:	00f42400 	.word	0x00f42400
 800327c:	080047a0 	.word	0x080047a0
      default:
        pclk = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003284:	231a      	movs	r3, #26
 8003286:	2218      	movs	r2, #24
 8003288:	189b      	adds	r3, r3, r2
 800328a:	19db      	adds	r3, r3, r7
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
        break;
 8003290:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d100      	bne.n	800329a <UART_SetConfig+0x342>
 8003298:	e090      	b.n	80033bc <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	18d2      	adds	r2, r2, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f7fc ff3d 	bl	800012c <__udivsi3>
 80032b2:	0003      	movs	r3, r0
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d921      	bls.n	8003300 <UART_SetConfig+0x3a8>
 80032bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032be:	2380      	movs	r3, #128	@ 0x80
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d21c      	bcs.n	8003300 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	200e      	movs	r0, #14
 80032cc:	2418      	movs	r4, #24
 80032ce:	1903      	adds	r3, r0, r4
 80032d0:	19db      	adds	r3, r3, r7
 80032d2:	210f      	movs	r1, #15
 80032d4:	438a      	bics	r2, r1
 80032d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	b299      	uxth	r1, r3
 80032e4:	1903      	adds	r3, r0, r4
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	1902      	adds	r2, r0, r4
 80032ea:	19d2      	adds	r2, r2, r7
 80032ec:	8812      	ldrh	r2, [r2, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	1902      	adds	r2, r0, r4
 80032f8:	19d2      	adds	r2, r2, r7
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e05d      	b.n	80033bc <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003300:	231a      	movs	r3, #26
 8003302:	2218      	movs	r2, #24
 8003304:	189b      	adds	r3, r3, r2
 8003306:	19db      	adds	r3, r3, r7
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e056      	b.n	80033bc <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330e:	231b      	movs	r3, #27
 8003310:	2218      	movs	r2, #24
 8003312:	189b      	adds	r3, r3, r2
 8003314:	19db      	adds	r3, r3, r7
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d822      	bhi.n	8003362 <UART_SetConfig+0x40a>
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <UART_SetConfig+0x484>)
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7ff f867 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 800332a:	0003      	movs	r3, r0
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800332e:	e021      	b.n	8003374 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7ff f878 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003334:	0003      	movs	r3, r0
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003338:	e01c      	b.n	8003374 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800333a:	4b29      	ldr	r3, [pc, #164]	@ (80033e0 <UART_SetConfig+0x488>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2210      	movs	r2, #16
 8003340:	4013      	ands	r3, r2
 8003342:	d002      	beq.n	800334a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003344:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <UART_SetConfig+0x48c>)
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003348:	e014      	b.n	8003374 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800334a:	4b27      	ldr	r3, [pc, #156]	@ (80033e8 <UART_SetConfig+0x490>)
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800334e:	e011      	b.n	8003374 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003350:	f7fe ffa2 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8003354:	0003      	movs	r3, r0
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003358:	e00c      	b.n	8003374 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003360:	e008      	b.n	8003374 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003366:	231a      	movs	r3, #26
 8003368:	2218      	movs	r2, #24
 800336a:	189b      	adds	r3, r3, r2
 800336c:	19db      	adds	r3, r3, r7
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
        break;
 8003372:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	085a      	lsrs	r2, r3, #1
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	18d2      	adds	r2, r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f7fc fece 	bl	800012c <__udivsi3>
 8003390:	0003      	movs	r3, r0
 8003392:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d90a      	bls.n	80033b0 <UART_SetConfig+0x458>
 800339a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d205      	bcs.n	80033b0 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e005      	b.n	80033bc <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80033b0:	231a      	movs	r3, #26
 80033b2:	2218      	movs	r2, #24
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2200      	movs	r2, #0
 80033c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2200      	movs	r2, #0
 80033c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033c8:	231a      	movs	r3, #26
 80033ca:	2218      	movs	r2, #24
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	781b      	ldrb	r3, [r3, #0]
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b00e      	add	sp, #56	@ 0x38
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	080047c4 	.word	0x080047c4
 80033e0:	40021000 	.word	0x40021000
 80033e4:	003d0900 	.word	0x003d0900
 80033e8:	00f42400 	.word	0x00f42400

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00b      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a4a      	ldr	r2, [pc, #296]	@ (8003530 <UART_AdvFeatureConfig+0x144>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d00b      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a43      	ldr	r2, [pc, #268]	@ (8003534 <UART_AdvFeatureConfig+0x148>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	2204      	movs	r2, #4
 800343e:	4013      	ands	r3, r2
 8003440:	d00b      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <UART_AdvFeatureConfig+0x14c>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	2208      	movs	r2, #8
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a34      	ldr	r2, [pc, #208]	@ (800353c <UART_AdvFeatureConfig+0x150>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	2210      	movs	r2, #16
 8003482:	4013      	ands	r3, r2
 8003484:	d00b      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a2c      	ldr	r2, [pc, #176]	@ (8003540 <UART_AdvFeatureConfig+0x154>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	2220      	movs	r2, #32
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4a25      	ldr	r2, [pc, #148]	@ (8003544 <UART_AdvFeatureConfig+0x158>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	2240      	movs	r2, #64	@ 0x40
 80034c6:	4013      	ands	r3, r2
 80034c8:	d01d      	beq.n	8003506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003548 <UART_AdvFeatureConfig+0x15c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	035b      	lsls	r3, r3, #13
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d10b      	bne.n	8003506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <UART_AdvFeatureConfig+0x160>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	2280      	movs	r2, #128	@ 0x80
 800350c:	4013      	ands	r3, r2
 800350e:	d00b      	beq.n	8003528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a0e      	ldr	r2, [pc, #56]	@ (8003550 <UART_AdvFeatureConfig+0x164>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}
 8003530:	fffdffff 	.word	0xfffdffff
 8003534:	fffeffff 	.word	0xfffeffff
 8003538:	fffbffff 	.word	0xfffbffff
 800353c:	ffff7fff 	.word	0xffff7fff
 8003540:	ffffefff 	.word	0xffffefff
 8003544:	ffffdfff 	.word	0xffffdfff
 8003548:	ffefffff 	.word	0xffefffff
 800354c:	ff9fffff 	.word	0xff9fffff
 8003550:	fff7ffff 	.word	0xfff7ffff

08003554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b092      	sub	sp, #72	@ 0x48
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2284      	movs	r2, #132	@ 0x84
 8003560:	2100      	movs	r1, #0
 8003562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003564:	f7fd fcfa 	bl	8000f5c <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2208      	movs	r2, #8
 8003574:	4013      	ands	r3, r2
 8003576:	2b08      	cmp	r3, #8
 8003578:	d12c      	bne.n	80035d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	0391      	lsls	r1, r2, #14
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4a46      	ldr	r2, [pc, #280]	@ (800369c <UART_CheckIdleState+0x148>)
 8003584:	9200      	str	r2, [sp, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	f000 f88c 	bl	80036a4 <UART_WaitOnFlagUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d021      	beq.n	80035d4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003590:	f3ef 8310 	mrs	r3, PRIMASK
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800359a:	2301      	movs	r3, #1
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2180      	movs	r1, #128	@ 0x80
 80035b2:	438a      	bics	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2278      	movs	r2, #120	@ 0x78
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e05f      	b.n	8003694 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2204      	movs	r2, #4
 80035dc:	4013      	ands	r3, r2
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d146      	bne.n	8003670 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e4:	2280      	movs	r2, #128	@ 0x80
 80035e6:	03d1      	lsls	r1, r2, #15
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4a2c      	ldr	r2, [pc, #176]	@ (800369c <UART_CheckIdleState+0x148>)
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f000 f858 	bl	80036a4 <UART_WaitOnFlagUntilTimeout>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d03b      	beq.n	8003670 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8310 	mrs	r3, PRIMASK
 80035fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
 8003602:	2301      	movs	r3, #1
 8003604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f383 8810 	msr	PRIMASK, r3
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4921      	ldr	r1, [pc, #132]	@ (80036a0 <UART_CheckIdleState+0x14c>)
 800361a:	400a      	ands	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f383 8810 	msr	PRIMASK, r3
}
 8003628:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362a:	f3ef 8310 	mrs	r3, PRIMASK
 800362e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003630:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	633b      	str	r3, [r7, #48]	@ 0x30
 8003634:	2301      	movs	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f383 8810 	msr	PRIMASK, r3
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	438a      	bics	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2280      	movs	r2, #128	@ 0x80
 8003660:	2120      	movs	r1, #32
 8003662:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2278      	movs	r2, #120	@ 0x78
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e011      	b.n	8003694 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2280      	movs	r2, #128	@ 0x80
 800367a:	2120      	movs	r1, #32
 800367c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2278      	movs	r2, #120	@ 0x78
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b010      	add	sp, #64	@ 0x40
 800369a:	bd80      	pop	{r7, pc}
 800369c:	01ffffff 	.word	0x01ffffff
 80036a0:	fffffedf 	.word	0xfffffedf

080036a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b4:	e04b      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d048      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036bc:	f7fd fc4e 	bl	8000f5c <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04b      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2204      	movs	r2, #4
 80036de:	4013      	ands	r3, r2
 80036e0:	d035      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2208      	movs	r2, #8
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d111      	bne.n	8003714 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2208      	movs	r2, #8
 80036f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f900 	bl	8003900 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2284      	movs	r2, #132	@ 0x84
 8003704:	2108      	movs	r1, #8
 8003706:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2278      	movs	r2, #120	@ 0x78
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e02c      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	401a      	ands	r2, r3
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	429a      	cmp	r2, r3
 8003726:	d112      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2280      	movs	r2, #128	@ 0x80
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f8e3 	bl	8003900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2284      	movs	r2, #132	@ 0x84
 800373e:	2120      	movs	r1, #32
 8003740:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2278      	movs	r2, #120	@ 0x78
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	425a      	negs	r2, r3
 800375e:	4153      	adcs	r3, r2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	001a      	movs	r2, r3
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d0a4      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b090      	sub	sp, #64	@ 0x40
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	1dbb      	adds	r3, r7, #6
 8003784:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1dba      	adds	r2, r7, #6
 8003790:	2158      	movs	r1, #88	@ 0x58
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2284      	movs	r2, #132	@ 0x84
 800379a:	2100      	movs	r1, #0
 800379c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2280      	movs	r2, #128	@ 0x80
 80037a2:	2122      	movs	r1, #34	@ 0x22
 80037a4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b2:	4a3e      	ldr	r2, [pc, #248]	@ (80038ac <UART_Start_Receive_DMA+0x134>)
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ba:	4a3d      	ldr	r2, [pc, #244]	@ (80038b0 <UART_Start_Receive_DMA+0x138>)
 80037bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c2:	4a3c      	ldr	r2, [pc, #240]	@ (80038b4 <UART_Start_Receive_DMA+0x13c>)
 80037c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ca:	2200      	movs	r2, #0
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3324      	adds	r3, #36	@ 0x24
 80037d8:	0019      	movs	r1, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	001a      	movs	r2, r3
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	f7fd fd3e 	bl	8001264 <HAL_DMA_Start_IT>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d009      	beq.n	8003800 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2284      	movs	r2, #132	@ 0x84
 80037f0:	2110      	movs	r1, #16
 80037f2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2280      	movs	r2, #128	@ 0x80
 80037f8:	2120      	movs	r1, #32
 80037fa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e050      	b.n	80038a2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d019      	beq.n	800383c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003808:	f3ef 8310 	mrs	r3, PRIMASK
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003812:	2301      	movs	r3, #1
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2180      	movs	r1, #128	@ 0x80
 800382a:	0049      	lsls	r1, r1, #1
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	613b      	str	r3, [r7, #16]
  return(result);
 8003842:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003846:	2301      	movs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386e:	f3ef 8310 	mrs	r3, PRIMASK
 8003872:	61fb      	str	r3, [r7, #28]
  return(result);
 8003874:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	637b      	str	r3, [r7, #52]	@ 0x34
 8003878:	2301      	movs	r3, #1
 800387a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2140      	movs	r1, #64	@ 0x40
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b010      	add	sp, #64	@ 0x40
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	08003a81 	.word	0x08003a81
 80038b0:	08003bb1 	.word	0x08003bb1
 80038b4:	08003bf3 	.word	0x08003bf3

080038b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c0:	f3ef 8310 	mrs	r3, PRIMASK
 80038c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	2301      	movs	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f383 8810 	msr	PRIMASK, r3
}
 80038d4:	46c0      	nop			@ (mov r8, r8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	21c0      	movs	r1, #192	@ 0xc0
 80038e2:	438a      	bics	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b006      	add	sp, #24
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08e      	sub	sp, #56	@ 0x38
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	617b      	str	r3, [r7, #20]
  return(result);
 800390e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003910:	637b      	str	r3, [r7, #52]	@ 0x34
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4926      	ldr	r1, [pc, #152]	@ (80039c4 <UART_EndRxTransfer+0xc4>)
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	623b      	str	r3, [r7, #32]
  return(result);
 8003940:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
 8003944:	2301      	movs	r3, #1
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003970:	2b01      	cmp	r3, #1
 8003972:	d118      	bne.n	80039a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	60bb      	str	r3, [r7, #8]
  return(result);
 800397a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397e:	2301      	movs	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2110      	movs	r1, #16
 8003996:	438a      	bics	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	2120      	movs	r1, #32
 80039ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b00e      	add	sp, #56	@ 0x38
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	fffffedf 	.word	0xfffffedf

080039c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	@ 0x30
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2220      	movs	r2, #32
 80039de:	4013      	ands	r3, r2
 80039e0:	d135      	bne.n	8003a4e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80039e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e4:	2252      	movs	r2, #82	@ 0x52
 80039e6:	2100      	movs	r1, #0
 80039e8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80039f0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f4:	2301      	movs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2180      	movs	r1, #128	@ 0x80
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a22:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a26:	2301      	movs	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2140      	movs	r1, #64	@ 0x40
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	e004      	b.n	8003a58 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff fa4d 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b00c      	add	sp, #48	@ 0x30
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7ff fa45 	bl	8002f00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b094      	sub	sp, #80	@ 0x50
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2220      	movs	r2, #32
 8003a96:	4013      	ands	r3, r2
 8003a98:	d16f      	bne.n	8003b7a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9c:	225a      	movs	r2, #90	@ 0x5a
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aa8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aac:	2301      	movs	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	493a      	ldr	r1, [pc, #232]	@ (8003bac <UART_DMAReceiveCplt+0x12c>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ade:	2301      	movs	r3, #1
 8003ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
 8003aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2101      	movs	r1, #1
 8003af6:	438a      	bics	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b06:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b10:	2301      	movs	r3, #1
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2140      	movs	r1, #64	@ 0x40
 8003b28:	438a      	bics	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	f383 8810 	msr	PRIMASK, r3
}
 8003b36:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b3a:	2280      	movs	r2, #128	@ 0x80
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d118      	bne.n	8003b7a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b48:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b52:	2301      	movs	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2110      	movs	r1, #16
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d108      	bne.n	8003b9a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8a:	2258      	movs	r2, #88	@ 0x58
 8003b8c:	5a9a      	ldrh	r2, [r3, r2]
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b90:	0011      	movs	r1, r2
 8003b92:	0018      	movs	r0, r3
 8003b94:	f7ff f9d4 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b98:	e003      	b.n	8003ba2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff f9b7 	bl	8002f10 <HAL_UART_RxCpltCallback>
}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b014      	add	sp, #80	@ 0x50
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	fffffeff 	.word	0xfffffeff

08003bb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10a      	bne.n	8003be2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2258      	movs	r2, #88	@ 0x58
 8003bd0:	5a9b      	ldrh	r3, [r3, r2]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff f9b0 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003be0:	e003      	b.n	8003bea <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff f99b 	bl	8002f20 <HAL_UART_RxHalfCpltCallback>
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2280      	movs	r2, #128	@ 0x80
 8003c0a:	589b      	ldr	r3, [r3, r2]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2280      	movs	r2, #128	@ 0x80
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b80      	cmp	r3, #128	@ 0x80
 8003c1a:	d10a      	bne.n	8003c32 <UART_DMAError+0x40>
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b21      	cmp	r3, #33	@ 0x21
 8003c20:	d107      	bne.n	8003c32 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2252      	movs	r2, #82	@ 0x52
 8003c26:	2100      	movs	r1, #0
 8003c28:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff fe43 	bl	80038b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2240      	movs	r2, #64	@ 0x40
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b40      	cmp	r3, #64	@ 0x40
 8003c3e:	d10a      	bne.n	8003c56 <UART_DMAError+0x64>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b22      	cmp	r3, #34	@ 0x22
 8003c44:	d107      	bne.n	8003c56 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	225a      	movs	r2, #90	@ 0x5a
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7ff fe55 	bl	8003900 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2284      	movs	r2, #132	@ 0x84
 8003c5a:	589b      	ldr	r3, [r3, r2]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2184      	movs	r1, #132	@ 0x84
 8003c64:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff f961 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b006      	add	sp, #24
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	225a      	movs	r2, #90	@ 0x5a
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2252      	movs	r2, #82	@ 0x52
 8003c90:	2100      	movs	r1, #0
 8003c92:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7ff f94a 	bl	8002f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cac:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			@ (mov r8, r8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2140      	movs	r1, #64	@ 0x40
 8003cce:	438a      	bics	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff f8ff 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b006      	add	sp, #24
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <malloc>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <malloc+0x10>)
 8003d10:	0001      	movs	r1, r0
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	f000 f830 	bl	8003d78 <_malloc_r>
 8003d18:	bd10      	pop	{r4, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	2000000c 	.word	0x2000000c

08003d20 <free>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <free+0x10>)
 8003d24:	0001      	movs	r1, r0
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	f000 f93a 	bl	8003fa0 <_free_r>
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	2000000c 	.word	0x2000000c

08003d34 <sbrk_aligned>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4e0f      	ldr	r6, [pc, #60]	@ (8003d74 <sbrk_aligned+0x40>)
 8003d38:	000d      	movs	r5, r1
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	0004      	movs	r4, r0
 8003d3e:	2900      	cmp	r1, #0
 8003d40:	d102      	bne.n	8003d48 <sbrk_aligned+0x14>
 8003d42:	f000 f8e5 	bl	8003f10 <_sbrk_r>
 8003d46:	6030      	str	r0, [r6, #0]
 8003d48:	0029      	movs	r1, r5
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f000 f8e0 	bl	8003f10 <_sbrk_r>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d103      	bne.n	8003d5c <sbrk_aligned+0x28>
 8003d54:	2501      	movs	r5, #1
 8003d56:	426d      	negs	r5, r5
 8003d58:	0028      	movs	r0, r5
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	1cc5      	adds	r5, r0, #3
 8003d60:	439d      	bics	r5, r3
 8003d62:	42a8      	cmp	r0, r5
 8003d64:	d0f8      	beq.n	8003d58 <sbrk_aligned+0x24>
 8003d66:	1a29      	subs	r1, r5, r0
 8003d68:	0020      	movs	r0, r4
 8003d6a:	f000 f8d1 	bl	8003f10 <_sbrk_r>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d1f2      	bne.n	8003d58 <sbrk_aligned+0x24>
 8003d72:	e7ef      	b.n	8003d54 <sbrk_aligned+0x20>
 8003d74:	20000240 	.word	0x20000240

08003d78 <_malloc_r>:
 8003d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	1ccb      	adds	r3, r1, #3
 8003d7e:	4393      	bics	r3, r2
 8003d80:	3308      	adds	r3, #8
 8003d82:	0005      	movs	r5, r0
 8003d84:	001f      	movs	r7, r3
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d234      	bcs.n	8003df4 <_malloc_r+0x7c>
 8003d8a:	270c      	movs	r7, #12
 8003d8c:	42b9      	cmp	r1, r7
 8003d8e:	d833      	bhi.n	8003df8 <_malloc_r+0x80>
 8003d90:	0028      	movs	r0, r5
 8003d92:	f000 f871 	bl	8003e78 <__malloc_lock>
 8003d96:	4e37      	ldr	r6, [pc, #220]	@ (8003e74 <_malloc_r+0xfc>)
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	001c      	movs	r4, r3
 8003d9c:	2c00      	cmp	r4, #0
 8003d9e:	d12f      	bne.n	8003e00 <_malloc_r+0x88>
 8003da0:	0039      	movs	r1, r7
 8003da2:	0028      	movs	r0, r5
 8003da4:	f7ff ffc6 	bl	8003d34 <sbrk_aligned>
 8003da8:	0004      	movs	r4, r0
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	d15f      	bne.n	8003e6e <_malloc_r+0xf6>
 8003dae:	6834      	ldr	r4, [r6, #0]
 8003db0:	9400      	str	r4, [sp, #0]
 8003db2:	9b00      	ldr	r3, [sp, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d14a      	bne.n	8003e4e <_malloc_r+0xd6>
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d052      	beq.n	8003e62 <_malloc_r+0xea>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	0028      	movs	r0, r5
 8003dc0:	18e3      	adds	r3, r4, r3
 8003dc2:	9900      	ldr	r1, [sp, #0]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	f000 f8a3 	bl	8003f10 <_sbrk_r>
 8003dca:	9b01      	ldr	r3, [sp, #4]
 8003dcc:	4283      	cmp	r3, r0
 8003dce:	d148      	bne.n	8003e62 <_malloc_r+0xea>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	1aff      	subs	r7, r7, r3
 8003dd6:	0039      	movs	r1, r7
 8003dd8:	f7ff ffac 	bl	8003d34 <sbrk_aligned>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d040      	beq.n	8003e62 <_malloc_r+0xea>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	6833      	ldr	r3, [r6, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	2a00      	cmp	r2, #0
 8003dec:	d133      	bne.n	8003e56 <_malloc_r+0xde>
 8003dee:	9b00      	ldr	r3, [sp, #0]
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	e019      	b.n	8003e28 <_malloc_r+0xb0>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dac9      	bge.n	8003d8c <_malloc_r+0x14>
 8003df8:	230c      	movs	r3, #12
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e00:	6821      	ldr	r1, [r4, #0]
 8003e02:	1bc9      	subs	r1, r1, r7
 8003e04:	d420      	bmi.n	8003e48 <_malloc_r+0xd0>
 8003e06:	290b      	cmp	r1, #11
 8003e08:	d90a      	bls.n	8003e20 <_malloc_r+0xa8>
 8003e0a:	19e2      	adds	r2, r4, r7
 8003e0c:	6027      	str	r7, [r4, #0]
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	d104      	bne.n	8003e1c <_malloc_r+0xa4>
 8003e12:	6032      	str	r2, [r6, #0]
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	6011      	str	r1, [r2, #0]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	e005      	b.n	8003e28 <_malloc_r+0xb0>
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	e7f9      	b.n	8003e14 <_malloc_r+0x9c>
 8003e20:	6862      	ldr	r2, [r4, #4]
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	d10e      	bne.n	8003e44 <_malloc_r+0xcc>
 8003e26:	6032      	str	r2, [r6, #0]
 8003e28:	0028      	movs	r0, r5
 8003e2a:	f000 f82d 	bl	8003e88 <__malloc_unlock>
 8003e2e:	0020      	movs	r0, r4
 8003e30:	2207      	movs	r2, #7
 8003e32:	300b      	adds	r0, #11
 8003e34:	1d23      	adds	r3, r4, #4
 8003e36:	4390      	bics	r0, r2
 8003e38:	1ac2      	subs	r2, r0, r3
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	d0df      	beq.n	8003dfe <_malloc_r+0x86>
 8003e3e:	1a1b      	subs	r3, r3, r0
 8003e40:	50a3      	str	r3, [r4, r2]
 8003e42:	e7dc      	b.n	8003dfe <_malloc_r+0x86>
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	e7ef      	b.n	8003e28 <_malloc_r+0xb0>
 8003e48:	0023      	movs	r3, r4
 8003e4a:	6864      	ldr	r4, [r4, #4]
 8003e4c:	e7a6      	b.n	8003d9c <_malloc_r+0x24>
 8003e4e:	9c00      	ldr	r4, [sp, #0]
 8003e50:	6863      	ldr	r3, [r4, #4]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	e7ad      	b.n	8003db2 <_malloc_r+0x3a>
 8003e56:	001a      	movs	r2, r3
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	d1fb      	bne.n	8003e56 <_malloc_r+0xde>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e7da      	b.n	8003e18 <_malloc_r+0xa0>
 8003e62:	230c      	movs	r3, #12
 8003e64:	0028      	movs	r0, r5
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f000 f80e 	bl	8003e88 <__malloc_unlock>
 8003e6c:	e7c6      	b.n	8003dfc <_malloc_r+0x84>
 8003e6e:	6007      	str	r7, [r0, #0]
 8003e70:	e7da      	b.n	8003e28 <_malloc_r+0xb0>
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	20000244 	.word	0x20000244

08003e78 <__malloc_lock>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	4802      	ldr	r0, [pc, #8]	@ (8003e84 <__malloc_lock+0xc>)
 8003e7c:	f000 f884 	bl	8003f88 <__retarget_lock_acquire_recursive>
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	20000384 	.word	0x20000384

08003e88 <__malloc_unlock>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4802      	ldr	r0, [pc, #8]	@ (8003e94 <__malloc_unlock+0xc>)
 8003e8c:	f000 f87d 	bl	8003f8a <__retarget_lock_release_recursive>
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	20000384 	.word	0x20000384

08003e98 <sniprintf>:
 8003e98:	b40c      	push	{r2, r3}
 8003e9a:	b530      	push	{r4, r5, lr}
 8003e9c:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <sniprintf+0x64>)
 8003e9e:	000c      	movs	r4, r1
 8003ea0:	681d      	ldr	r5, [r3, #0]
 8003ea2:	b09d      	sub	sp, #116	@ 0x74
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	da08      	bge.n	8003eba <sniprintf+0x22>
 8003ea8:	238b      	movs	r3, #139	@ 0x8b
 8003eaa:	2001      	movs	r0, #1
 8003eac:	602b      	str	r3, [r5, #0]
 8003eae:	4240      	negs	r0, r0
 8003eb0:	b01d      	add	sp, #116	@ 0x74
 8003eb2:	bc30      	pop	{r4, r5}
 8003eb4:	bc08      	pop	{r3}
 8003eb6:	b002      	add	sp, #8
 8003eb8:	4718      	bx	r3
 8003eba:	2382      	movs	r3, #130	@ 0x82
 8003ebc:	466a      	mov	r2, sp
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	8293      	strh	r3, [r2, #20]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	9002      	str	r0, [sp, #8]
 8003ec6:	9006      	str	r0, [sp, #24]
 8003ec8:	4299      	cmp	r1, r3
 8003eca:	d000      	beq.n	8003ece <sniprintf+0x36>
 8003ecc:	1e4b      	subs	r3, r1, #1
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	9307      	str	r3, [sp, #28]
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	466a      	mov	r2, sp
 8003ed6:	425b      	negs	r3, r3
 8003ed8:	82d3      	strh	r3, [r2, #22]
 8003eda:	0028      	movs	r0, r5
 8003edc:	ab21      	add	r3, sp, #132	@ 0x84
 8003ede:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ee0:	a902      	add	r1, sp, #8
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	f000 f906 	bl	80040f4 <_svfiprintf_r>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	da01      	bge.n	8003ef0 <sniprintf+0x58>
 8003eec:	238b      	movs	r3, #139	@ 0x8b
 8003eee:	602b      	str	r3, [r5, #0]
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d0dd      	beq.n	8003eb0 <sniprintf+0x18>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	9b02      	ldr	r3, [sp, #8]
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e7d9      	b.n	8003eb0 <sniprintf+0x18>
 8003efc:	2000000c 	.word	0x2000000c

08003f00 <memset>:
 8003f00:	0003      	movs	r3, r0
 8003f02:	1882      	adds	r2, r0, r2
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d100      	bne.n	8003f0a <memset+0xa>
 8003f08:	4770      	bx	lr
 8003f0a:	7019      	strb	r1, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	e7f9      	b.n	8003f04 <memset+0x4>

08003f10 <_sbrk_r>:
 8003f10:	2300      	movs	r3, #0
 8003f12:	b570      	push	{r4, r5, r6, lr}
 8003f14:	4d06      	ldr	r5, [pc, #24]	@ (8003f30 <_sbrk_r+0x20>)
 8003f16:	0004      	movs	r4, r0
 8003f18:	0008      	movs	r0, r1
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	f7fc fe1a 	bl	8000b54 <_sbrk>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d103      	bne.n	8003f2c <_sbrk_r+0x1c>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d000      	beq.n	8003f2c <_sbrk_r+0x1c>
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	bd70      	pop	{r4, r5, r6, pc}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	20000380 	.word	0x20000380

08003f34 <__errno>:
 8003f34:	4b01      	ldr	r3, [pc, #4]	@ (8003f3c <__errno+0x8>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	2000000c 	.word	0x2000000c

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	2600      	movs	r6, #0
 8003f44:	4c0c      	ldr	r4, [pc, #48]	@ (8003f78 <__libc_init_array+0x38>)
 8003f46:	4d0d      	ldr	r5, [pc, #52]	@ (8003f7c <__libc_init_array+0x3c>)
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	2600      	movs	r6, #0
 8003f52:	f000 fba1 	bl	8004698 <_init>
 8003f56:	4c0a      	ldr	r4, [pc, #40]	@ (8003f80 <__libc_init_array+0x40>)
 8003f58:	4d0a      	ldr	r5, [pc, #40]	@ (8003f84 <__libc_init_array+0x44>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	00b3      	lsls	r3, r6, #2
 8003f66:	58eb      	ldr	r3, [r5, r3]
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	00b3      	lsls	r3, r6, #2
 8003f70:	58eb      	ldr	r3, [r5, r3]
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	08004824 	.word	0x08004824
 8003f7c:	08004824 	.word	0x08004824
 8003f80:	08004828 	.word	0x08004828
 8003f84:	08004824 	.word	0x08004824

08003f88 <__retarget_lock_acquire_recursive>:
 8003f88:	4770      	bx	lr

08003f8a <__retarget_lock_release_recursive>:
 8003f8a:	4770      	bx	lr

08003f8c <memcpy>:
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d100      	bne.n	8003f96 <memcpy+0xa>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	5ccc      	ldrb	r4, [r1, r3]
 8003f98:	54c4      	strb	r4, [r0, r3]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	e7f8      	b.n	8003f90 <memcpy+0x4>
	...

08003fa0 <_free_r>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	0005      	movs	r5, r0
 8003fa4:	1e0c      	subs	r4, r1, #0
 8003fa6:	d010      	beq.n	8003fca <_free_r+0x2a>
 8003fa8:	3c04      	subs	r4, #4
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da00      	bge.n	8003fb2 <_free_r+0x12>
 8003fb0:	18e4      	adds	r4, r4, r3
 8003fb2:	0028      	movs	r0, r5
 8003fb4:	f7ff ff60 	bl	8003e78 <__malloc_lock>
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <_free_r+0x90>)
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <_free_r+0x2c>
 8003fc0:	6063      	str	r3, [r4, #4]
 8003fc2:	6014      	str	r4, [r2, #0]
 8003fc4:	0028      	movs	r0, r5
 8003fc6:	f7ff ff5f 	bl	8003e88 <__malloc_unlock>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d908      	bls.n	8003fe2 <_free_r+0x42>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	1821      	adds	r1, r4, r0
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	d1f3      	bne.n	8003fc0 <_free_r+0x20>
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	1809      	adds	r1, r1, r0
 8003fde:	6021      	str	r1, [r4, #0]
 8003fe0:	e7ee      	b.n	8003fc0 <_free_r+0x20>
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <_free_r+0x4e>
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	d9f9      	bls.n	8003fe2 <_free_r+0x42>
 8003fee:	6811      	ldr	r1, [r2, #0]
 8003ff0:	1850      	adds	r0, r2, r1
 8003ff2:	42a0      	cmp	r0, r4
 8003ff4:	d10b      	bne.n	800400e <_free_r+0x6e>
 8003ff6:	6820      	ldr	r0, [r4, #0]
 8003ff8:	1809      	adds	r1, r1, r0
 8003ffa:	1850      	adds	r0, r2, r1
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	4283      	cmp	r3, r0
 8004000:	d1e0      	bne.n	8003fc4 <_free_r+0x24>
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	1841      	adds	r1, r0, r1
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	6053      	str	r3, [r2, #4]
 800400c:	e7da      	b.n	8003fc4 <_free_r+0x24>
 800400e:	42a0      	cmp	r0, r4
 8004010:	d902      	bls.n	8004018 <_free_r+0x78>
 8004012:	230c      	movs	r3, #12
 8004014:	602b      	str	r3, [r5, #0]
 8004016:	e7d5      	b.n	8003fc4 <_free_r+0x24>
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	1821      	adds	r1, r4, r0
 800401c:	428b      	cmp	r3, r1
 800401e:	d103      	bne.n	8004028 <_free_r+0x88>
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	1809      	adds	r1, r1, r0
 8004026:	6021      	str	r1, [r4, #0]
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6054      	str	r4, [r2, #4]
 800402c:	e7ca      	b.n	8003fc4 <_free_r+0x24>
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	20000244 	.word	0x20000244

08004034 <__ssputs_r>:
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	688e      	ldr	r6, [r1, #8]
 8004038:	b085      	sub	sp, #20
 800403a:	001f      	movs	r7, r3
 800403c:	000c      	movs	r4, r1
 800403e:	680b      	ldr	r3, [r1, #0]
 8004040:	9002      	str	r0, [sp, #8]
 8004042:	9203      	str	r2, [sp, #12]
 8004044:	42be      	cmp	r6, r7
 8004046:	d830      	bhi.n	80040aa <__ssputs_r+0x76>
 8004048:	210c      	movs	r1, #12
 800404a:	5e62      	ldrsh	r2, [r4, r1]
 800404c:	2190      	movs	r1, #144	@ 0x90
 800404e:	00c9      	lsls	r1, r1, #3
 8004050:	420a      	tst	r2, r1
 8004052:	d028      	beq.n	80040a6 <__ssputs_r+0x72>
 8004054:	2003      	movs	r0, #3
 8004056:	6921      	ldr	r1, [r4, #16]
 8004058:	1a5b      	subs	r3, r3, r1
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	6963      	ldr	r3, [r4, #20]
 800405e:	4343      	muls	r3, r0
 8004060:	9801      	ldr	r0, [sp, #4]
 8004062:	0fdd      	lsrs	r5, r3, #31
 8004064:	18ed      	adds	r5, r5, r3
 8004066:	1c7b      	adds	r3, r7, #1
 8004068:	181b      	adds	r3, r3, r0
 800406a:	106d      	asrs	r5, r5, #1
 800406c:	42ab      	cmp	r3, r5
 800406e:	d900      	bls.n	8004072 <__ssputs_r+0x3e>
 8004070:	001d      	movs	r5, r3
 8004072:	0552      	lsls	r2, r2, #21
 8004074:	d528      	bpl.n	80040c8 <__ssputs_r+0x94>
 8004076:	0029      	movs	r1, r5
 8004078:	9802      	ldr	r0, [sp, #8]
 800407a:	f7ff fe7d 	bl	8003d78 <_malloc_r>
 800407e:	1e06      	subs	r6, r0, #0
 8004080:	d02c      	beq.n	80040dc <__ssputs_r+0xa8>
 8004082:	9a01      	ldr	r2, [sp, #4]
 8004084:	6921      	ldr	r1, [r4, #16]
 8004086:	f7ff ff81 	bl	8003f8c <memcpy>
 800408a:	89a2      	ldrh	r2, [r4, #12]
 800408c:	4b18      	ldr	r3, [pc, #96]	@ (80040f0 <__ssputs_r+0xbc>)
 800408e:	401a      	ands	r2, r3
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	4313      	orrs	r3, r2
 8004094:	81a3      	strh	r3, [r4, #12]
 8004096:	9b01      	ldr	r3, [sp, #4]
 8004098:	6126      	str	r6, [r4, #16]
 800409a:	18f6      	adds	r6, r6, r3
 800409c:	6026      	str	r6, [r4, #0]
 800409e:	003e      	movs	r6, r7
 80040a0:	6165      	str	r5, [r4, #20]
 80040a2:	1aed      	subs	r5, r5, r3
 80040a4:	60a5      	str	r5, [r4, #8]
 80040a6:	42be      	cmp	r6, r7
 80040a8:	d900      	bls.n	80040ac <__ssputs_r+0x78>
 80040aa:	003e      	movs	r6, r7
 80040ac:	0032      	movs	r2, r6
 80040ae:	9903      	ldr	r1, [sp, #12]
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	f000 fa9b 	bl	80045ec <memmove>
 80040b6:	2000      	movs	r0, #0
 80040b8:	68a3      	ldr	r3, [r4, #8]
 80040ba:	1b9b      	subs	r3, r3, r6
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	199b      	adds	r3, r3, r6
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	b005      	add	sp, #20
 80040c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c8:	002a      	movs	r2, r5
 80040ca:	9802      	ldr	r0, [sp, #8]
 80040cc:	f000 faac 	bl	8004628 <_realloc_r>
 80040d0:	1e06      	subs	r6, r0, #0
 80040d2:	d1e0      	bne.n	8004096 <__ssputs_r+0x62>
 80040d4:	6921      	ldr	r1, [r4, #16]
 80040d6:	9802      	ldr	r0, [sp, #8]
 80040d8:	f7ff ff62 	bl	8003fa0 <_free_r>
 80040dc:	230c      	movs	r3, #12
 80040de:	2001      	movs	r0, #1
 80040e0:	9a02      	ldr	r2, [sp, #8]
 80040e2:	4240      	negs	r0, r0
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	89a2      	ldrh	r2, [r4, #12]
 80040e8:	3334      	adds	r3, #52	@ 0x34
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	e7e9      	b.n	80040c4 <__ssputs_r+0x90>
 80040f0:	fffffb7f 	.word	0xfffffb7f

080040f4 <_svfiprintf_r>:
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	b0a1      	sub	sp, #132	@ 0x84
 80040f8:	9003      	str	r0, [sp, #12]
 80040fa:	001d      	movs	r5, r3
 80040fc:	898b      	ldrh	r3, [r1, #12]
 80040fe:	000f      	movs	r7, r1
 8004100:	0016      	movs	r6, r2
 8004102:	061b      	lsls	r3, r3, #24
 8004104:	d511      	bpl.n	800412a <_svfiprintf_r+0x36>
 8004106:	690b      	ldr	r3, [r1, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10e      	bne.n	800412a <_svfiprintf_r+0x36>
 800410c:	2140      	movs	r1, #64	@ 0x40
 800410e:	f7ff fe33 	bl	8003d78 <_malloc_r>
 8004112:	6038      	str	r0, [r7, #0]
 8004114:	6138      	str	r0, [r7, #16]
 8004116:	2800      	cmp	r0, #0
 8004118:	d105      	bne.n	8004126 <_svfiprintf_r+0x32>
 800411a:	230c      	movs	r3, #12
 800411c:	9a03      	ldr	r2, [sp, #12]
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	2001      	movs	r0, #1
 8004122:	4240      	negs	r0, r0
 8004124:	e0cf      	b.n	80042c6 <_svfiprintf_r+0x1d2>
 8004126:	2340      	movs	r3, #64	@ 0x40
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	2300      	movs	r3, #0
 800412c:	ac08      	add	r4, sp, #32
 800412e:	6163      	str	r3, [r4, #20]
 8004130:	3320      	adds	r3, #32
 8004132:	7663      	strb	r3, [r4, #25]
 8004134:	3310      	adds	r3, #16
 8004136:	76a3      	strb	r3, [r4, #26]
 8004138:	9507      	str	r5, [sp, #28]
 800413a:	0035      	movs	r5, r6
 800413c:	782b      	ldrb	r3, [r5, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <_svfiprintf_r+0x52>
 8004142:	2b25      	cmp	r3, #37	@ 0x25
 8004144:	d148      	bne.n	80041d8 <_svfiprintf_r+0xe4>
 8004146:	1bab      	subs	r3, r5, r6
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	42b5      	cmp	r5, r6
 800414c:	d00b      	beq.n	8004166 <_svfiprintf_r+0x72>
 800414e:	0032      	movs	r2, r6
 8004150:	0039      	movs	r1, r7
 8004152:	9803      	ldr	r0, [sp, #12]
 8004154:	f7ff ff6e 	bl	8004034 <__ssputs_r>
 8004158:	3001      	adds	r0, #1
 800415a:	d100      	bne.n	800415e <_svfiprintf_r+0x6a>
 800415c:	e0ae      	b.n	80042bc <_svfiprintf_r+0x1c8>
 800415e:	6963      	ldr	r3, [r4, #20]
 8004160:	9a05      	ldr	r2, [sp, #20]
 8004162:	189b      	adds	r3, r3, r2
 8004164:	6163      	str	r3, [r4, #20]
 8004166:	782b      	ldrb	r3, [r5, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d100      	bne.n	800416e <_svfiprintf_r+0x7a>
 800416c:	e0a6      	b.n	80042bc <_svfiprintf_r+0x1c8>
 800416e:	2201      	movs	r2, #1
 8004170:	2300      	movs	r3, #0
 8004172:	4252      	negs	r2, r2
 8004174:	6062      	str	r2, [r4, #4]
 8004176:	a904      	add	r1, sp, #16
 8004178:	3254      	adds	r2, #84	@ 0x54
 800417a:	1852      	adds	r2, r2, r1
 800417c:	1c6e      	adds	r6, r5, #1
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	60e3      	str	r3, [r4, #12]
 8004182:	60a3      	str	r3, [r4, #8]
 8004184:	7013      	strb	r3, [r2, #0]
 8004186:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004188:	4b54      	ldr	r3, [pc, #336]	@ (80042dc <_svfiprintf_r+0x1e8>)
 800418a:	2205      	movs	r2, #5
 800418c:	0018      	movs	r0, r3
 800418e:	7831      	ldrb	r1, [r6, #0]
 8004190:	9305      	str	r3, [sp, #20]
 8004192:	f000 fa3e 	bl	8004612 <memchr>
 8004196:	1c75      	adds	r5, r6, #1
 8004198:	2800      	cmp	r0, #0
 800419a:	d11f      	bne.n	80041dc <_svfiprintf_r+0xe8>
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	06d3      	lsls	r3, r2, #27
 80041a0:	d504      	bpl.n	80041ac <_svfiprintf_r+0xb8>
 80041a2:	2353      	movs	r3, #83	@ 0x53
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	185b      	adds	r3, r3, r1
 80041a8:	2120      	movs	r1, #32
 80041aa:	7019      	strb	r1, [r3, #0]
 80041ac:	0713      	lsls	r3, r2, #28
 80041ae:	d504      	bpl.n	80041ba <_svfiprintf_r+0xc6>
 80041b0:	2353      	movs	r3, #83	@ 0x53
 80041b2:	a904      	add	r1, sp, #16
 80041b4:	185b      	adds	r3, r3, r1
 80041b6:	212b      	movs	r1, #43	@ 0x2b
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	7833      	ldrb	r3, [r6, #0]
 80041bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80041be:	d016      	beq.n	80041ee <_svfiprintf_r+0xfa>
 80041c0:	0035      	movs	r5, r6
 80041c2:	2100      	movs	r1, #0
 80041c4:	200a      	movs	r0, #10
 80041c6:	68e3      	ldr	r3, [r4, #12]
 80041c8:	782a      	ldrb	r2, [r5, #0]
 80041ca:	1c6e      	adds	r6, r5, #1
 80041cc:	3a30      	subs	r2, #48	@ 0x30
 80041ce:	2a09      	cmp	r2, #9
 80041d0:	d950      	bls.n	8004274 <_svfiprintf_r+0x180>
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d111      	bne.n	80041fa <_svfiprintf_r+0x106>
 80041d6:	e017      	b.n	8004208 <_svfiprintf_r+0x114>
 80041d8:	3501      	adds	r5, #1
 80041da:	e7af      	b.n	800413c <_svfiprintf_r+0x48>
 80041dc:	9b05      	ldr	r3, [sp, #20]
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	1ac0      	subs	r0, r0, r3
 80041e2:	2301      	movs	r3, #1
 80041e4:	4083      	lsls	r3, r0
 80041e6:	4313      	orrs	r3, r2
 80041e8:	002e      	movs	r6, r5
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	e7cc      	b.n	8004188 <_svfiprintf_r+0x94>
 80041ee:	9b07      	ldr	r3, [sp, #28]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	9107      	str	r1, [sp, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db01      	blt.n	80041fe <_svfiprintf_r+0x10a>
 80041fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041fc:	e004      	b.n	8004208 <_svfiprintf_r+0x114>
 80041fe:	425b      	negs	r3, r3
 8004200:	60e3      	str	r3, [r4, #12]
 8004202:	2302      	movs	r3, #2
 8004204:	4313      	orrs	r3, r2
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	782b      	ldrb	r3, [r5, #0]
 800420a:	2b2e      	cmp	r3, #46	@ 0x2e
 800420c:	d10c      	bne.n	8004228 <_svfiprintf_r+0x134>
 800420e:	786b      	ldrb	r3, [r5, #1]
 8004210:	2b2a      	cmp	r3, #42	@ 0x2a
 8004212:	d134      	bne.n	800427e <_svfiprintf_r+0x18a>
 8004214:	9b07      	ldr	r3, [sp, #28]
 8004216:	3502      	adds	r5, #2
 8004218:	1d1a      	adds	r2, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9207      	str	r2, [sp, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	da01      	bge.n	8004226 <_svfiprintf_r+0x132>
 8004222:	2301      	movs	r3, #1
 8004224:	425b      	negs	r3, r3
 8004226:	9309      	str	r3, [sp, #36]	@ 0x24
 8004228:	4e2d      	ldr	r6, [pc, #180]	@ (80042e0 <_svfiprintf_r+0x1ec>)
 800422a:	2203      	movs	r2, #3
 800422c:	0030      	movs	r0, r6
 800422e:	7829      	ldrb	r1, [r5, #0]
 8004230:	f000 f9ef 	bl	8004612 <memchr>
 8004234:	2800      	cmp	r0, #0
 8004236:	d006      	beq.n	8004246 <_svfiprintf_r+0x152>
 8004238:	2340      	movs	r3, #64	@ 0x40
 800423a:	1b80      	subs	r0, r0, r6
 800423c:	4083      	lsls	r3, r0
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	3501      	adds	r5, #1
 8004242:	4313      	orrs	r3, r2
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	7829      	ldrb	r1, [r5, #0]
 8004248:	2206      	movs	r2, #6
 800424a:	4826      	ldr	r0, [pc, #152]	@ (80042e4 <_svfiprintf_r+0x1f0>)
 800424c:	1c6e      	adds	r6, r5, #1
 800424e:	7621      	strb	r1, [r4, #24]
 8004250:	f000 f9df 	bl	8004612 <memchr>
 8004254:	2800      	cmp	r0, #0
 8004256:	d038      	beq.n	80042ca <_svfiprintf_r+0x1d6>
 8004258:	4b23      	ldr	r3, [pc, #140]	@ (80042e8 <_svfiprintf_r+0x1f4>)
 800425a:	2b00      	cmp	r3, #0
 800425c:	d122      	bne.n	80042a4 <_svfiprintf_r+0x1b0>
 800425e:	2207      	movs	r2, #7
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	3307      	adds	r3, #7
 8004264:	4393      	bics	r3, r2
 8004266:	3308      	adds	r3, #8
 8004268:	9307      	str	r3, [sp, #28]
 800426a:	6963      	ldr	r3, [r4, #20]
 800426c:	9a04      	ldr	r2, [sp, #16]
 800426e:	189b      	adds	r3, r3, r2
 8004270:	6163      	str	r3, [r4, #20]
 8004272:	e762      	b.n	800413a <_svfiprintf_r+0x46>
 8004274:	4343      	muls	r3, r0
 8004276:	0035      	movs	r5, r6
 8004278:	2101      	movs	r1, #1
 800427a:	189b      	adds	r3, r3, r2
 800427c:	e7a4      	b.n	80041c8 <_svfiprintf_r+0xd4>
 800427e:	2300      	movs	r3, #0
 8004280:	200a      	movs	r0, #10
 8004282:	0019      	movs	r1, r3
 8004284:	3501      	adds	r5, #1
 8004286:	6063      	str	r3, [r4, #4]
 8004288:	782a      	ldrb	r2, [r5, #0]
 800428a:	1c6e      	adds	r6, r5, #1
 800428c:	3a30      	subs	r2, #48	@ 0x30
 800428e:	2a09      	cmp	r2, #9
 8004290:	d903      	bls.n	800429a <_svfiprintf_r+0x1a6>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0c8      	beq.n	8004228 <_svfiprintf_r+0x134>
 8004296:	9109      	str	r1, [sp, #36]	@ 0x24
 8004298:	e7c6      	b.n	8004228 <_svfiprintf_r+0x134>
 800429a:	4341      	muls	r1, r0
 800429c:	0035      	movs	r5, r6
 800429e:	2301      	movs	r3, #1
 80042a0:	1889      	adds	r1, r1, r2
 80042a2:	e7f1      	b.n	8004288 <_svfiprintf_r+0x194>
 80042a4:	aa07      	add	r2, sp, #28
 80042a6:	9200      	str	r2, [sp, #0]
 80042a8:	0021      	movs	r1, r4
 80042aa:	003a      	movs	r2, r7
 80042ac:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <_svfiprintf_r+0x1f8>)
 80042ae:	9803      	ldr	r0, [sp, #12]
 80042b0:	e000      	b.n	80042b4 <_svfiprintf_r+0x1c0>
 80042b2:	bf00      	nop
 80042b4:	9004      	str	r0, [sp, #16]
 80042b6:	9b04      	ldr	r3, [sp, #16]
 80042b8:	3301      	adds	r3, #1
 80042ba:	d1d6      	bne.n	800426a <_svfiprintf_r+0x176>
 80042bc:	89bb      	ldrh	r3, [r7, #12]
 80042be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80042c0:	065b      	lsls	r3, r3, #25
 80042c2:	d500      	bpl.n	80042c6 <_svfiprintf_r+0x1d2>
 80042c4:	e72c      	b.n	8004120 <_svfiprintf_r+0x2c>
 80042c6:	b021      	add	sp, #132	@ 0x84
 80042c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ca:	aa07      	add	r2, sp, #28
 80042cc:	9200      	str	r2, [sp, #0]
 80042ce:	0021      	movs	r1, r4
 80042d0:	003a      	movs	r2, r7
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <_svfiprintf_r+0x1f8>)
 80042d4:	9803      	ldr	r0, [sp, #12]
 80042d6:	f000 f87b 	bl	80043d0 <_printf_i>
 80042da:	e7eb      	b.n	80042b4 <_svfiprintf_r+0x1c0>
 80042dc:	080047e8 	.word	0x080047e8
 80042e0:	080047ee 	.word	0x080047ee
 80042e4:	080047f2 	.word	0x080047f2
 80042e8:	00000000 	.word	0x00000000
 80042ec:	08004035 	.word	0x08004035

080042f0 <_printf_common>:
 80042f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f2:	0016      	movs	r6, r2
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	688a      	ldr	r2, [r1, #8]
 80042f8:	690b      	ldr	r3, [r1, #16]
 80042fa:	000c      	movs	r4, r1
 80042fc:	9000      	str	r0, [sp, #0]
 80042fe:	4293      	cmp	r3, r2
 8004300:	da00      	bge.n	8004304 <_printf_common+0x14>
 8004302:	0013      	movs	r3, r2
 8004304:	0022      	movs	r2, r4
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	3243      	adds	r2, #67	@ 0x43
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	2a00      	cmp	r2, #0
 800430e:	d001      	beq.n	8004314 <_printf_common+0x24>
 8004310:	3301      	adds	r3, #1
 8004312:	6033      	str	r3, [r6, #0]
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	069b      	lsls	r3, r3, #26
 8004318:	d502      	bpl.n	8004320 <_printf_common+0x30>
 800431a:	6833      	ldr	r3, [r6, #0]
 800431c:	3302      	adds	r3, #2
 800431e:	6033      	str	r3, [r6, #0]
 8004320:	6822      	ldr	r2, [r4, #0]
 8004322:	2306      	movs	r3, #6
 8004324:	0015      	movs	r5, r2
 8004326:	401d      	ands	r5, r3
 8004328:	421a      	tst	r2, r3
 800432a:	d027      	beq.n	800437c <_printf_common+0x8c>
 800432c:	0023      	movs	r3, r4
 800432e:	3343      	adds	r3, #67	@ 0x43
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	4193      	sbcs	r3, r2
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	0692      	lsls	r2, r2, #26
 800433a:	d430      	bmi.n	800439e <_printf_common+0xae>
 800433c:	0022      	movs	r2, r4
 800433e:	9901      	ldr	r1, [sp, #4]
 8004340:	9800      	ldr	r0, [sp, #0]
 8004342:	9d08      	ldr	r5, [sp, #32]
 8004344:	3243      	adds	r2, #67	@ 0x43
 8004346:	47a8      	blx	r5
 8004348:	3001      	adds	r0, #1
 800434a:	d025      	beq.n	8004398 <_printf_common+0xa8>
 800434c:	2206      	movs	r2, #6
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	2500      	movs	r5, #0
 8004352:	4013      	ands	r3, r2
 8004354:	2b04      	cmp	r3, #4
 8004356:	d105      	bne.n	8004364 <_printf_common+0x74>
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	68e5      	ldr	r5, [r4, #12]
 800435c:	1aed      	subs	r5, r5, r3
 800435e:	43eb      	mvns	r3, r5
 8004360:	17db      	asrs	r3, r3, #31
 8004362:	401d      	ands	r5, r3
 8004364:	68a3      	ldr	r3, [r4, #8]
 8004366:	6922      	ldr	r2, [r4, #16]
 8004368:	4293      	cmp	r3, r2
 800436a:	dd01      	ble.n	8004370 <_printf_common+0x80>
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	18ed      	adds	r5, r5, r3
 8004370:	2600      	movs	r6, #0
 8004372:	42b5      	cmp	r5, r6
 8004374:	d120      	bne.n	80043b8 <_printf_common+0xc8>
 8004376:	2000      	movs	r0, #0
 8004378:	e010      	b.n	800439c <_printf_common+0xac>
 800437a:	3501      	adds	r5, #1
 800437c:	68e3      	ldr	r3, [r4, #12]
 800437e:	6832      	ldr	r2, [r6, #0]
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	42ab      	cmp	r3, r5
 8004384:	ddd2      	ble.n	800432c <_printf_common+0x3c>
 8004386:	0022      	movs	r2, r4
 8004388:	2301      	movs	r3, #1
 800438a:	9901      	ldr	r1, [sp, #4]
 800438c:	9800      	ldr	r0, [sp, #0]
 800438e:	9f08      	ldr	r7, [sp, #32]
 8004390:	3219      	adds	r2, #25
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	d1f0      	bne.n	800437a <_printf_common+0x8a>
 8004398:	2001      	movs	r0, #1
 800439a:	4240      	negs	r0, r0
 800439c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800439e:	2030      	movs	r0, #48	@ 0x30
 80043a0:	18e1      	adds	r1, r4, r3
 80043a2:	3143      	adds	r1, #67	@ 0x43
 80043a4:	7008      	strb	r0, [r1, #0]
 80043a6:	0021      	movs	r1, r4
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	3145      	adds	r1, #69	@ 0x45
 80043ac:	7809      	ldrb	r1, [r1, #0]
 80043ae:	18a2      	adds	r2, r4, r2
 80043b0:	3243      	adds	r2, #67	@ 0x43
 80043b2:	3302      	adds	r3, #2
 80043b4:	7011      	strb	r1, [r2, #0]
 80043b6:	e7c1      	b.n	800433c <_printf_common+0x4c>
 80043b8:	0022      	movs	r2, r4
 80043ba:	2301      	movs	r3, #1
 80043bc:	9901      	ldr	r1, [sp, #4]
 80043be:	9800      	ldr	r0, [sp, #0]
 80043c0:	9f08      	ldr	r7, [sp, #32]
 80043c2:	321a      	adds	r2, #26
 80043c4:	47b8      	blx	r7
 80043c6:	3001      	adds	r0, #1
 80043c8:	d0e6      	beq.n	8004398 <_printf_common+0xa8>
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7d1      	b.n	8004372 <_printf_common+0x82>
	...

080043d0 <_printf_i>:
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	b08b      	sub	sp, #44	@ 0x2c
 80043d4:	9206      	str	r2, [sp, #24]
 80043d6:	000a      	movs	r2, r1
 80043d8:	3243      	adds	r2, #67	@ 0x43
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	9005      	str	r0, [sp, #20]
 80043de:	9203      	str	r2, [sp, #12]
 80043e0:	7e0a      	ldrb	r2, [r1, #24]
 80043e2:	000c      	movs	r4, r1
 80043e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043e6:	2a78      	cmp	r2, #120	@ 0x78
 80043e8:	d809      	bhi.n	80043fe <_printf_i+0x2e>
 80043ea:	2a62      	cmp	r2, #98	@ 0x62
 80043ec:	d80b      	bhi.n	8004406 <_printf_i+0x36>
 80043ee:	2a00      	cmp	r2, #0
 80043f0:	d100      	bne.n	80043f4 <_printf_i+0x24>
 80043f2:	e0bc      	b.n	800456e <_printf_i+0x19e>
 80043f4:	497b      	ldr	r1, [pc, #492]	@ (80045e4 <_printf_i+0x214>)
 80043f6:	9104      	str	r1, [sp, #16]
 80043f8:	2a58      	cmp	r2, #88	@ 0x58
 80043fa:	d100      	bne.n	80043fe <_printf_i+0x2e>
 80043fc:	e090      	b.n	8004520 <_printf_i+0x150>
 80043fe:	0025      	movs	r5, r4
 8004400:	3542      	adds	r5, #66	@ 0x42
 8004402:	702a      	strb	r2, [r5, #0]
 8004404:	e022      	b.n	800444c <_printf_i+0x7c>
 8004406:	0010      	movs	r0, r2
 8004408:	3863      	subs	r0, #99	@ 0x63
 800440a:	2815      	cmp	r0, #21
 800440c:	d8f7      	bhi.n	80043fe <_printf_i+0x2e>
 800440e:	f7fb fe83 	bl	8000118 <__gnu_thumb1_case_shi>
 8004412:	0016      	.short	0x0016
 8004414:	fff6001f 	.word	0xfff6001f
 8004418:	fff6fff6 	.word	0xfff6fff6
 800441c:	001ffff6 	.word	0x001ffff6
 8004420:	fff6fff6 	.word	0xfff6fff6
 8004424:	fff6fff6 	.word	0xfff6fff6
 8004428:	003600a1 	.word	0x003600a1
 800442c:	fff60080 	.word	0xfff60080
 8004430:	00b2fff6 	.word	0x00b2fff6
 8004434:	0036fff6 	.word	0x0036fff6
 8004438:	fff6fff6 	.word	0xfff6fff6
 800443c:	0084      	.short	0x0084
 800443e:	0025      	movs	r5, r4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	3542      	adds	r5, #66	@ 0x42
 8004444:	1d11      	adds	r1, r2, #4
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	702b      	strb	r3, [r5, #0]
 800444c:	2301      	movs	r3, #1
 800444e:	e0a0      	b.n	8004592 <_printf_i+0x1c2>
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	6809      	ldr	r1, [r1, #0]
 8004454:	1d02      	adds	r2, r0, #4
 8004456:	060d      	lsls	r5, r1, #24
 8004458:	d50b      	bpl.n	8004472 <_printf_i+0xa2>
 800445a:	6806      	ldr	r6, [r0, #0]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	2e00      	cmp	r6, #0
 8004460:	da03      	bge.n	800446a <_printf_i+0x9a>
 8004462:	232d      	movs	r3, #45	@ 0x2d
 8004464:	9a03      	ldr	r2, [sp, #12]
 8004466:	4276      	negs	r6, r6
 8004468:	7013      	strb	r3, [r2, #0]
 800446a:	4b5e      	ldr	r3, [pc, #376]	@ (80045e4 <_printf_i+0x214>)
 800446c:	270a      	movs	r7, #10
 800446e:	9304      	str	r3, [sp, #16]
 8004470:	e018      	b.n	80044a4 <_printf_i+0xd4>
 8004472:	6806      	ldr	r6, [r0, #0]
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	0649      	lsls	r1, r1, #25
 8004478:	d5f1      	bpl.n	800445e <_printf_i+0x8e>
 800447a:	b236      	sxth	r6, r6
 800447c:	e7ef      	b.n	800445e <_printf_i+0x8e>
 800447e:	6808      	ldr	r0, [r1, #0]
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	c940      	ldmia	r1!, {r6}
 8004484:	0605      	lsls	r5, r0, #24
 8004486:	d402      	bmi.n	800448e <_printf_i+0xbe>
 8004488:	0640      	lsls	r0, r0, #25
 800448a:	d500      	bpl.n	800448e <_printf_i+0xbe>
 800448c:	b2b6      	uxth	r6, r6
 800448e:	6019      	str	r1, [r3, #0]
 8004490:	4b54      	ldr	r3, [pc, #336]	@ (80045e4 <_printf_i+0x214>)
 8004492:	270a      	movs	r7, #10
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	2a6f      	cmp	r2, #111	@ 0x6f
 8004498:	d100      	bne.n	800449c <_printf_i+0xcc>
 800449a:	3f02      	subs	r7, #2
 800449c:	0023      	movs	r3, r4
 800449e:	2200      	movs	r2, #0
 80044a0:	3343      	adds	r3, #67	@ 0x43
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	6863      	ldr	r3, [r4, #4]
 80044a6:	60a3      	str	r3, [r4, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	db03      	blt.n	80044b4 <_printf_i+0xe4>
 80044ac:	2104      	movs	r1, #4
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	438a      	bics	r2, r1
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	2e00      	cmp	r6, #0
 80044b6:	d102      	bne.n	80044be <_printf_i+0xee>
 80044b8:	9d03      	ldr	r5, [sp, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <_printf_i+0x108>
 80044be:	9d03      	ldr	r5, [sp, #12]
 80044c0:	0030      	movs	r0, r6
 80044c2:	0039      	movs	r1, r7
 80044c4:	f7fb feb8 	bl	8000238 <__aeabi_uidivmod>
 80044c8:	9b04      	ldr	r3, [sp, #16]
 80044ca:	3d01      	subs	r5, #1
 80044cc:	5c5b      	ldrb	r3, [r3, r1]
 80044ce:	702b      	strb	r3, [r5, #0]
 80044d0:	0033      	movs	r3, r6
 80044d2:	0006      	movs	r6, r0
 80044d4:	429f      	cmp	r7, r3
 80044d6:	d9f3      	bls.n	80044c0 <_printf_i+0xf0>
 80044d8:	2f08      	cmp	r7, #8
 80044da:	d109      	bne.n	80044f0 <_printf_i+0x120>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	07db      	lsls	r3, r3, #31
 80044e0:	d506      	bpl.n	80044f0 <_printf_i+0x120>
 80044e2:	6862      	ldr	r2, [r4, #4]
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	dc02      	bgt.n	80044f0 <_printf_i+0x120>
 80044ea:	2330      	movs	r3, #48	@ 0x30
 80044ec:	3d01      	subs	r5, #1
 80044ee:	702b      	strb	r3, [r5, #0]
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	1b5b      	subs	r3, r3, r5
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	9b07      	ldr	r3, [sp, #28]
 80044f8:	0021      	movs	r1, r4
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	9805      	ldr	r0, [sp, #20]
 80044fe:	9b06      	ldr	r3, [sp, #24]
 8004500:	aa09      	add	r2, sp, #36	@ 0x24
 8004502:	f7ff fef5 	bl	80042f0 <_printf_common>
 8004506:	3001      	adds	r0, #1
 8004508:	d148      	bne.n	800459c <_printf_i+0x1cc>
 800450a:	2001      	movs	r0, #1
 800450c:	4240      	negs	r0, r0
 800450e:	b00b      	add	sp, #44	@ 0x2c
 8004510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004512:	2220      	movs	r2, #32
 8004514:	6809      	ldr	r1, [r1, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	6022      	str	r2, [r4, #0]
 800451a:	2278      	movs	r2, #120	@ 0x78
 800451c:	4932      	ldr	r1, [pc, #200]	@ (80045e8 <_printf_i+0x218>)
 800451e:	9104      	str	r1, [sp, #16]
 8004520:	0021      	movs	r1, r4
 8004522:	3145      	adds	r1, #69	@ 0x45
 8004524:	700a      	strb	r2, [r1, #0]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	c940      	ldmia	r1!, {r6}
 800452c:	0610      	lsls	r0, r2, #24
 800452e:	d402      	bmi.n	8004536 <_printf_i+0x166>
 8004530:	0650      	lsls	r0, r2, #25
 8004532:	d500      	bpl.n	8004536 <_printf_i+0x166>
 8004534:	b2b6      	uxth	r6, r6
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	07d3      	lsls	r3, r2, #31
 800453a:	d502      	bpl.n	8004542 <_printf_i+0x172>
 800453c:	2320      	movs	r3, #32
 800453e:	4313      	orrs	r3, r2
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	2e00      	cmp	r6, #0
 8004544:	d001      	beq.n	800454a <_printf_i+0x17a>
 8004546:	2710      	movs	r7, #16
 8004548:	e7a8      	b.n	800449c <_printf_i+0xcc>
 800454a:	2220      	movs	r2, #32
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	4393      	bics	r3, r2
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	e7f8      	b.n	8004546 <_printf_i+0x176>
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	680d      	ldr	r5, [r1, #0]
 8004558:	1d10      	adds	r0, r2, #4
 800455a:	6949      	ldr	r1, [r1, #20]
 800455c:	6018      	str	r0, [r3, #0]
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	062e      	lsls	r6, r5, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0x198>
 8004564:	6019      	str	r1, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0x19e>
 8004568:	066d      	lsls	r5, r5, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0x194>
 800456c:	8019      	strh	r1, [r3, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	9d03      	ldr	r5, [sp, #12]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	e7bf      	b.n	80044f6 <_printf_i+0x126>
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	1d11      	adds	r1, r2, #4
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	6815      	ldr	r5, [r2, #0]
 800457e:	2100      	movs	r1, #0
 8004580:	0028      	movs	r0, r5
 8004582:	6862      	ldr	r2, [r4, #4]
 8004584:	f000 f845 	bl	8004612 <memchr>
 8004588:	2800      	cmp	r0, #0
 800458a:	d001      	beq.n	8004590 <_printf_i+0x1c0>
 800458c:	1b40      	subs	r0, r0, r5
 800458e:	6060      	str	r0, [r4, #4]
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	2300      	movs	r3, #0
 8004596:	9a03      	ldr	r2, [sp, #12]
 8004598:	7013      	strb	r3, [r2, #0]
 800459a:	e7ac      	b.n	80044f6 <_printf_i+0x126>
 800459c:	002a      	movs	r2, r5
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	9906      	ldr	r1, [sp, #24]
 80045a2:	9805      	ldr	r0, [sp, #20]
 80045a4:	9d07      	ldr	r5, [sp, #28]
 80045a6:	47a8      	blx	r5
 80045a8:	3001      	adds	r0, #1
 80045aa:	d0ae      	beq.n	800450a <_printf_i+0x13a>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	079b      	lsls	r3, r3, #30
 80045b0:	d415      	bmi.n	80045de <_printf_i+0x20e>
 80045b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b4:	68e0      	ldr	r0, [r4, #12]
 80045b6:	4298      	cmp	r0, r3
 80045b8:	daa9      	bge.n	800450e <_printf_i+0x13e>
 80045ba:	0018      	movs	r0, r3
 80045bc:	e7a7      	b.n	800450e <_printf_i+0x13e>
 80045be:	0022      	movs	r2, r4
 80045c0:	2301      	movs	r3, #1
 80045c2:	9906      	ldr	r1, [sp, #24]
 80045c4:	9805      	ldr	r0, [sp, #20]
 80045c6:	9e07      	ldr	r6, [sp, #28]
 80045c8:	3219      	adds	r2, #25
 80045ca:	47b0      	blx	r6
 80045cc:	3001      	adds	r0, #1
 80045ce:	d09c      	beq.n	800450a <_printf_i+0x13a>
 80045d0:	3501      	adds	r5, #1
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	42ab      	cmp	r3, r5
 80045da:	dcf0      	bgt.n	80045be <_printf_i+0x1ee>
 80045dc:	e7e9      	b.n	80045b2 <_printf_i+0x1e2>
 80045de:	2500      	movs	r5, #0
 80045e0:	e7f7      	b.n	80045d2 <_printf_i+0x202>
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	080047f9 	.word	0x080047f9
 80045e8:	0800480a 	.word	0x0800480a

080045ec <memmove>:
 80045ec:	b510      	push	{r4, lr}
 80045ee:	4288      	cmp	r0, r1
 80045f0:	d806      	bhi.n	8004600 <memmove+0x14>
 80045f2:	2300      	movs	r3, #0
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d008      	beq.n	800460a <memmove+0x1e>
 80045f8:	5ccc      	ldrb	r4, [r1, r3]
 80045fa:	54c4      	strb	r4, [r0, r3]
 80045fc:	3301      	adds	r3, #1
 80045fe:	e7f9      	b.n	80045f4 <memmove+0x8>
 8004600:	188b      	adds	r3, r1, r2
 8004602:	4298      	cmp	r0, r3
 8004604:	d2f5      	bcs.n	80045f2 <memmove+0x6>
 8004606:	3a01      	subs	r2, #1
 8004608:	d200      	bcs.n	800460c <memmove+0x20>
 800460a:	bd10      	pop	{r4, pc}
 800460c:	5c8b      	ldrb	r3, [r1, r2]
 800460e:	5483      	strb	r3, [r0, r2]
 8004610:	e7f9      	b.n	8004606 <memmove+0x1a>

08004612 <memchr>:
 8004612:	b2c9      	uxtb	r1, r1
 8004614:	1882      	adds	r2, r0, r2
 8004616:	4290      	cmp	r0, r2
 8004618:	d101      	bne.n	800461e <memchr+0xc>
 800461a:	2000      	movs	r0, #0
 800461c:	4770      	bx	lr
 800461e:	7803      	ldrb	r3, [r0, #0]
 8004620:	428b      	cmp	r3, r1
 8004622:	d0fb      	beq.n	800461c <memchr+0xa>
 8004624:	3001      	adds	r0, #1
 8004626:	e7f6      	b.n	8004616 <memchr+0x4>

08004628 <_realloc_r>:
 8004628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800462a:	0006      	movs	r6, r0
 800462c:	000c      	movs	r4, r1
 800462e:	0015      	movs	r5, r2
 8004630:	2900      	cmp	r1, #0
 8004632:	d105      	bne.n	8004640 <_realloc_r+0x18>
 8004634:	0011      	movs	r1, r2
 8004636:	f7ff fb9f 	bl	8003d78 <_malloc_r>
 800463a:	0004      	movs	r4, r0
 800463c:	0020      	movs	r0, r4
 800463e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004640:	2a00      	cmp	r2, #0
 8004642:	d103      	bne.n	800464c <_realloc_r+0x24>
 8004644:	f7ff fcac 	bl	8003fa0 <_free_r>
 8004648:	2400      	movs	r4, #0
 800464a:	e7f7      	b.n	800463c <_realloc_r+0x14>
 800464c:	f000 f81b 	bl	8004686 <_malloc_usable_size_r>
 8004650:	0007      	movs	r7, r0
 8004652:	4285      	cmp	r5, r0
 8004654:	d802      	bhi.n	800465c <_realloc_r+0x34>
 8004656:	0843      	lsrs	r3, r0, #1
 8004658:	42ab      	cmp	r3, r5
 800465a:	d3ef      	bcc.n	800463c <_realloc_r+0x14>
 800465c:	0029      	movs	r1, r5
 800465e:	0030      	movs	r0, r6
 8004660:	f7ff fb8a 	bl	8003d78 <_malloc_r>
 8004664:	9001      	str	r0, [sp, #4]
 8004666:	2800      	cmp	r0, #0
 8004668:	d0ee      	beq.n	8004648 <_realloc_r+0x20>
 800466a:	002a      	movs	r2, r5
 800466c:	42bd      	cmp	r5, r7
 800466e:	d900      	bls.n	8004672 <_realloc_r+0x4a>
 8004670:	003a      	movs	r2, r7
 8004672:	0021      	movs	r1, r4
 8004674:	9801      	ldr	r0, [sp, #4]
 8004676:	f7ff fc89 	bl	8003f8c <memcpy>
 800467a:	0021      	movs	r1, r4
 800467c:	0030      	movs	r0, r6
 800467e:	f7ff fc8f 	bl	8003fa0 <_free_r>
 8004682:	9c01      	ldr	r4, [sp, #4]
 8004684:	e7da      	b.n	800463c <_realloc_r+0x14>

08004686 <_malloc_usable_size_r>:
 8004686:	1f0b      	subs	r3, r1, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1f18      	subs	r0, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	da01      	bge.n	8004694 <_malloc_usable_size_r+0xe>
 8004690:	580b      	ldr	r3, [r1, r0]
 8004692:	18c0      	adds	r0, r0, r3
 8004694:	4770      	bx	lr
	...

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
