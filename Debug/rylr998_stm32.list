
rylr998_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08003dc8  08003dc8  00004dc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004084  08004084  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004084  08004084  00005084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800408c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000068  080040f4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080040f4  00006514  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d78d  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  0001381d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00015fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000859  00000000  00000000  00016888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001280d  00000000  00000000  000170e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b8  00000000  00000000  000298ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068aa3  00000000  00000000  00039aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002274  00000000  00000000  000a258c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00003f16  00000000  00000000  000a4800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000a8716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003db0 	.word	0x08003db0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003db0 	.word	0x08003db0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	@ (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	2101      	movs	r1, #1
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_DMA_Init+0x38>)

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006a6:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006aa:	430a      	orrs	r2, r1
 80006ac:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	400b      	ands	r3, r1
 80006b4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006b6:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006ba:	f000 fd03 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006be:	200a      	movs	r0, #10
 80006c0:	f000 fd2a 	bl	8001118 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	200b      	movs	r0, #11
 80006c8:	0011      	movs	r1, r2
 80006ca:	f000 fcfb 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006ce:	200b      	movs	r0, #11
 80006d0:	f000 fd22 	bl	8001118 <HAL_NVIC_EnableIRQ>

}
 80006d4:	bd07      	pop	{r0, r1, r2, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	2214      	movs	r2, #20
 80006e2:	2100      	movs	r1, #0
 80006e4:	a803      	add	r0, sp, #12
 80006e6:	f002 fb29 	bl	8002d3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_GPIO_Init+0x64>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006f0:	4d14      	ldr	r5, [pc, #80]	@ (8000744 <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006f4:	0028      	movs	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fc:	400a      	ands	r2, r1
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	3902      	subs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4322      	orrs	r2, r4
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800070a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800070c:	4022      	ands	r2, r4
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000714:	430a      	orrs	r2, r1
 8000716:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	400b      	ands	r3, r1
 800071e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000720:	3106      	adds	r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000724:	f000 fee2 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000728:	2308      	movs	r3, #8
 800072a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800072e:	0028      	movs	r0, r5
 8000730:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000738:	f000 fe24 	bl	8001384 <HAL_GPIO_Init>

}
 800073c:	b009      	add	sp, #36	@ 0x24
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	50000400 	.word	0x50000400

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b510      	push	{r4, lr}
 800074a:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	a80c      	add	r0, sp, #48	@ 0x30
 8000752:	f002 faf3 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000756:	2214      	movs	r2, #20
 8000758:	2100      	movs	r1, #0
 800075a:	4668      	mov	r0, sp
 800075c:	f002 faee 	bl	8002d3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	2218      	movs	r2, #24
 8000762:	2100      	movs	r1, #0
 8000764:	a805      	add	r0, sp, #20
 8000766:	f002 fae9 	bl	8002d3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076a:	491d      	ldr	r1, [pc, #116]	@ (80007e0 <SystemClock_Config+0x98>)
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <SystemClock_Config+0x9c>)
 800076e:	680a      	ldr	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000772:	401a      	ands	r2, r3
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	4313      	orrs	r3, r2
 800077a:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000786:	2380      	movs	r3, #128	@ 0x80
 8000788:	02db      	lsls	r3, r3, #11
 800078a:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800078c:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000790:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000798:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f000 fef7 	bl	800158c <HAL_RCC_OscConfig>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a2:	b672      	cpsid	i
  */
void Error_Handler(void){
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	0021      	movs	r1, r4
 80007b4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	f001 f936 	bl	8001a28 <HAL_RCC_ClockConfig>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x7c>
 80007c0:	b672      	cpsid	i
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 80007c4:	2306      	movs	r3, #6
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c6:	9007      	str	r0, [sp, #28]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007c8:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 80007cc:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	f001 fa09 	bl	8001be4 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x92>
 80007d6:	b672      	cpsid	i
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <SystemClock_Config+0x90>
}
 80007da:	b018      	add	sp, #96	@ 0x60
 80007dc:	bd10      	pop	{r4, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	40007000 	.word	0x40007000
 80007e4:	ffffe7ff 	.word	0xffffe7ff

080007e8 <main>:
{
 80007e8:	b510      	push	{r4, lr}
  HAL_Init();
 80007ea:	f000 fc33 	bl	8001054 <HAL_Init>
  SystemClock_Config();
 80007ee:	f7ff ffab 	bl	8000748 <SystemClock_Config>
  MX_GPIO_Init();
 80007f2:	f7ff ff73 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 80007f6:	f7ff ff53 	bl	80006a0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007fa:	f000 fab7 	bl	8000d6c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80007fe:	f000 fad1 	bl	8000da4 <MX_USART2_UART_Init>
	INIT_RX_UART2();
 8000802:	f000 fbb7 	bl	8000f74 <INIT_RX_UART2>
	rylr998_setChannel(1,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2001      	movs	r0, #1
 800080a:	f000 f9f5 	bl	8000bf8 <rylr998_setChannel>
  while (1)
 800080e:	e7fe      	b.n	800080e <main+0x26>

08000810 <Error_Handler>:
 8000810:	b672      	cpsid	i
  while (1)
 8000812:	e7fe      	b.n	8000812 <Error_Handler+0x2>

08000814 <rylr998_sendCommand>:


#define TX_BUFFER_SIZE 64
static char uartTxBuffer[TX_BUFFER_SIZE];

void rylr998_sendCommand(const char *cmd) {
 8000814:	b510      	push	{r4, lr}
 8000816:	0004      	movs	r4, r0
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)cmd, strlen(cmd), 20);
 8000818:	f7ff fc76 	bl	8000108 <strlen>
 800081c:	2314      	movs	r3, #20
 800081e:	b282      	uxth	r2, r0
 8000820:	0021      	movs	r1, r4
 8000822:	4802      	ldr	r0, [pc, #8]	@ (800082c <rylr998_sendCommand+0x18>)
 8000824:	f001 fe61 	bl	80024ea <HAL_UART_Transmit>
}
 8000828:	bd10      	pop	{r4, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	2000033c 	.word	0x2000033c

08000830 <rylr998_setAddress>:
		}else{
			Error_Handler();
		}
}

void rylr998_setAddress(uint8_t address) {
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	0005      	movs	r5, r0
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000834:	4c07      	ldr	r4, [pc, #28]	@ (8000854 <rylr998_setAddress+0x24>)
 8000836:	2204      	movs	r2, #4
 8000838:	2100      	movs	r1, #0
 800083a:	0020      	movs	r0, r4
 800083c:	f002 fa7e 	bl	8002d3c <memset>
    snprintf(uartTxBuffer, sizeof(uartTxBuffer), AT "ADDRESS=%d" END, address);
 8000840:	002b      	movs	r3, r5
 8000842:	2140      	movs	r1, #64	@ 0x40
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <rylr998_setAddress+0x28>)
 8000846:	0020      	movs	r0, r4
 8000848:	f002 f9ea 	bl	8002c20 <sniprintf>
    rylr998_sendCommand(uartTxBuffer);
 800084c:	0020      	movs	r0, r4
 800084e:	f7ff ffe1 	bl	8000814 <rylr998_sendCommand>
}
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2000010d 	.word	0x2000010d
 8000858:	08003dc8 	.word	0x08003dc8

0800085c <rylr998_networkId>:

void rylr998_networkId(uint8_t networkId){
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	0005      	movs	r5, r0
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000860:	4c07      	ldr	r4, [pc, #28]	@ (8000880 <rylr998_networkId+0x24>)
 8000862:	2204      	movs	r2, #4
 8000864:	2100      	movs	r1, #0
 8000866:	0020      	movs	r0, r4
 8000868:	f002 fa68 	bl	8002d3c <memset>
	snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT "NETWORKID=%u" END, networkId);
 800086c:	002b      	movs	r3, r5
 800086e:	2140      	movs	r1, #64	@ 0x40
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <rylr998_networkId+0x28>)
 8000872:	0020      	movs	r0, r4
 8000874:	f002 f9d4 	bl	8002c20 <sniprintf>
	rylr998_sendCommand(uartTxBuffer);
 8000878:	0020      	movs	r0, r4
 800087a:	f7ff ffcb 	bl	8000814 <rylr998_sendCommand>
}
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	2000010d 	.word	0x2000010d
 8000884:	08003dd8 	.word	0x08003dd8

08000888 <rylr998_setParameter>:

void rylr998_setParameter(uint8_t SF, uint8_t BW, uint8_t CR, uint8_t ProgramedPreamble){
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	001f      	movs	r7, r3
 800088c:	000d      	movs	r5, r1
 800088e:	0016      	movs	r6, r2
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000890:	4c0a      	ldr	r4, [pc, #40]	@ (80008bc <rylr998_setParameter+0x34>)
void rylr998_setParameter(uint8_t SF, uint8_t BW, uint8_t CR, uint8_t ProgramedPreamble){
 8000892:	b087      	sub	sp, #28
 8000894:	9005      	str	r0, [sp, #20]
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000896:	2204      	movs	r2, #4
 8000898:	2100      	movs	r1, #0
 800089a:	0020      	movs	r0, r4
 800089c:	f002 fa4e 	bl	8002d3c <memset>
	snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT "PARAMETER=%u,%u,%u,%u" END, SF, BW, CR, ProgramedPreamble);
 80008a0:	2140      	movs	r1, #64	@ 0x40
 80008a2:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <rylr998_setParameter+0x38>)
 80008a4:	9b05      	ldr	r3, [sp, #20]
 80008a6:	0020      	movs	r0, r4
 80008a8:	9702      	str	r7, [sp, #8]
 80008aa:	9601      	str	r6, [sp, #4]
 80008ac:	9500      	str	r5, [sp, #0]
 80008ae:	f002 f9b7 	bl	8002c20 <sniprintf>
	rylr998_sendCommand(uartTxBuffer);
 80008b2:	0020      	movs	r0, r4
 80008b4:	f7ff ffae 	bl	8000814 <rylr998_sendCommand>
}
 80008b8:	b007      	add	sp, #28
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	2000010d 	.word	0x2000010d
 80008c0:	08003dea 	.word	0x08003dea

080008c4 <rylr998_mode>:
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
	snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT "RESET" END);
	rylr998_sendCommand(uartTxBuffer);
}*/

void rylr998_mode(uint8_t mode, uint32_t rxTime, uint32_t LowSpeedTime){
 80008c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 80008c6:	4c0f      	ldr	r4, [pc, #60]	@ (8000904 <rylr998_mode+0x40>)
void rylr998_mode(uint8_t mode, uint32_t rxTime, uint32_t LowSpeedTime){
 80008c8:	000d      	movs	r5, r1
 80008ca:	0007      	movs	r7, r0
 80008cc:	0016      	movs	r6, r2
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 80008ce:	2100      	movs	r1, #0
 80008d0:	2204      	movs	r2, #4
 80008d2:	0020      	movs	r0, r4
 80008d4:	f002 fa32 	bl	8002d3c <memset>
	if (rxTime==0||LowSpeedTime==0){snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT"MODE=%u" END, mode);
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d001      	beq.n	80008e0 <rylr998_mode+0x1c>
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d109      	bne.n	80008f4 <rylr998_mode+0x30>
 80008e0:	003b      	movs	r3, r7
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	0020      	movs	r0, r4
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <rylr998_mode+0x44>)
 80008e8:	f002 f99a 	bl	8002c20 <sniprintf>
	}else{snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT"MODE=2,%lu,%lu" END,rxTime,LowSpeedTime);}
	rylr998_sendCommand(uartTxBuffer);
 80008ec:	0020      	movs	r0, r4
 80008ee:	f7ff ff91 	bl	8000814 <rylr998_sendCommand>
}
 80008f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	}else{snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT"MODE=2,%lu,%lu" END,rxTime,LowSpeedTime);}
 80008f4:	002b      	movs	r3, r5
 80008f6:	2140      	movs	r1, #64	@ 0x40
 80008f8:	0020      	movs	r0, r4
 80008fa:	4a04      	ldr	r2, [pc, #16]	@ (800090c <rylr998_mode+0x48>)
 80008fc:	9600      	str	r6, [sp, #0]
 80008fe:	f002 f98f 	bl	8002c20 <sniprintf>
 8000902:	e7f3      	b.n	80008ec <rylr998_mode+0x28>
 8000904:	2000010d 	.word	0x2000010d
 8000908:	08003e05 	.word	0x08003e05
 800090c:	08003e12 	.word	0x08003e12

08000910 <rylr998_setBand>:
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
	snprintf(uartTxBuffer, TX_BUFFER_SIZE,  AT "IPR=%lu" END, baudRate);
	rylr998_sendCommand(uartTxBuffer);
}*/

void rylr998_setBand(uint32_t frequency,uint8_t memory){
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	0005      	movs	r5, r0
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000914:	4c07      	ldr	r4, [pc, #28]	@ (8000934 <rylr998_setBand+0x24>)
 8000916:	2204      	movs	r2, #4
 8000918:	2100      	movs	r1, #0
 800091a:	0020      	movs	r0, r4
 800091c:	f002 fa0e 	bl	8002d3c <memset>
	if(memory){snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT"BAND=%lu,M"END,frequency);
 8000920:	002b      	movs	r3, r5
 8000922:	2140      	movs	r1, #64	@ 0x40
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <rylr998_setBand+0x28>)
 8000926:	0020      	movs	r0, r4
 8000928:	f002 f97a 	bl	8002c20 <sniprintf>
	}else{snprintf(uartTxBuffer, TX_BUFFER_SIZE, AT"BAND=%lu,M"END,frequency);}
	rylr998_sendCommand(uartTxBuffer);
 800092c:	0020      	movs	r0, r4
 800092e:	f7ff ff71 	bl	8000814 <rylr998_sendCommand>
}
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	2000010d 	.word	0x2000010d
 8000938:	08003e26 	.word	0x08003e26

0800093c <rylr998_setCPIN>:

void rylr998_setCPIN(const char *password){
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	0005      	movs	r5, r0
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000940:	4c07      	ldr	r4, [pc, #28]	@ (8000960 <rylr998_setCPIN+0x24>)
 8000942:	2204      	movs	r2, #4
 8000944:	2100      	movs	r1, #0
 8000946:	0020      	movs	r0, r4
 8000948:	f002 f9f8 	bl	8002d3c <memset>
	snprintf(uartTxBuffer, TX_BUFFER_SIZE,  AT "CPIN=%s"END, password);
 800094c:	002b      	movs	r3, r5
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <rylr998_setCPIN+0x28>)
 8000952:	0020      	movs	r0, r4
 8000954:	f002 f964 	bl	8002c20 <sniprintf>
	rylr998_sendCommand(uartTxBuffer);
 8000958:	0020      	movs	r0, r4
 800095a:	f7ff ff5b 	bl	8000814 <rylr998_sendCommand>
}
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	2000010d 	.word	0x2000010d
 8000964:	08003e36 	.word	0x08003e36

08000968 <rylr998_setCRFOP>:

void rylr998_setCRFOP(uint8_t CRFOP){
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	0005      	movs	r5, r0
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 800096c:	4c07      	ldr	r4, [pc, #28]	@ (800098c <rylr998_setCRFOP+0x24>)
 800096e:	2204      	movs	r2, #4
 8000970:	2100      	movs	r1, #0
 8000972:	0020      	movs	r0, r4
 8000974:	f002 f9e2 	bl	8002d3c <memset>
	snprintf(uartTxBuffer, TX_BUFFER_SIZE,  AT"CRFOP=%u"END, CRFOP);
 8000978:	002b      	movs	r3, r5
 800097a:	2140      	movs	r1, #64	@ 0x40
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <rylr998_setCRFOP+0x28>)
 800097e:	0020      	movs	r0, r4
 8000980:	f002 f94e 	bl	8002c20 <sniprintf>
	rylr998_sendCommand(uartTxBuffer);
 8000984:	0020      	movs	r0, r4
 8000986:	f7ff ff45 	bl	8000814 <rylr998_sendCommand>
}
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	2000010d 	.word	0x2000010d
 8000990:	08003e43 	.word	0x08003e43

08000994 <rylr998_FACTORY>:

void rylr998_FACTORY(void){
 8000994:	b510      	push	{r4, lr}
	memset(uartTxBuffer, 0, sizeof(TX_BUFFER_SIZE));
 8000996:	4c07      	ldr	r4, [pc, #28]	@ (80009b4 <rylr998_FACTORY+0x20>)
 8000998:	2204      	movs	r2, #4
 800099a:	2100      	movs	r1, #0
 800099c:	0020      	movs	r0, r4
 800099e:	f002 f9cd 	bl	8002d3c <memset>
	snprintf(uartTxBuffer, TX_BUFFER_SIZE,  AT"FACTORY"END);
 80009a2:	4905      	ldr	r1, [pc, #20]	@ (80009b8 <rylr998_FACTORY+0x24>)
 80009a4:	0020      	movs	r0, r4
 80009a6:	f002 fad2 	bl	8002f4e <strcpy>
	rylr998_sendCommand(uartTxBuffer);
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff ff32 	bl	8000814 <rylr998_sendCommand>
}
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	2000010d 	.word	0x2000010d
 80009b8:	08003e51 	.word	0x08003e51

080009bc <rylr998_SetInterruptFlag>:
/**
 * @brief  Sets IRQ flag whenever new data gets into gets recived in the Rx buffer
 *
 */
void rylr998_SetInterruptFlag(void){
	rylr998_interrupt_flag =1;
 80009bc:	2201      	movs	r2, #1
 80009be:	4b01      	ldr	r3, [pc, #4]	@ (80009c4 <rylr998_SetInterruptFlag+0x8>)
 80009c0:	701a      	strb	r2, [r3, #0]
}
 80009c2:	4770      	bx	lr
 80009c4:	2000010c 	.word	0x2000010c

080009c8 <rylr998_ResponseFind>:
 * @params RxBuffer sorted
 * @retval command selected
 *
 */
RYLR_RX_command_t rylr998_ResponseFind(char *rxBuffer)
{
 80009c8:	b510      	push	{r4, lr}

	RYLR_RX_command_t 	ret 					= RYLR_NOT_FOUND;
	if(!memcmp(rxBuffer, "+OK"END, 5))
 80009ca:	2205      	movs	r2, #5
 80009cc:	490c      	ldr	r1, [pc, #48]	@ (8000a00 <rylr998_ResponseFind+0x38>)
{
 80009ce:	0004      	movs	r4, r0
	if(!memcmp(rxBuffer, "+OK"END, 5))
 80009d0:	f002 f9a6 	bl	8002d20 <memcmp>
	{
		return ret = RYLR_OK;
 80009d4:	1e03      	subs	r3, r0, #0
	if(!memcmp(rxBuffer, "+OK"END, 5))
 80009d6:	d010      	beq.n	80009fa <rylr998_ResponseFind+0x32>
	}
	else if(!memcmp(rxBuffer, "+RCV", 4))
 80009d8:	2204      	movs	r2, #4
 80009da:	0020      	movs	r0, r4
 80009dc:	4909      	ldr	r1, [pc, #36]	@ (8000a04 <rylr998_ResponseFind+0x3c>)
 80009de:	f002 f99f 	bl	8002d20 <memcmp>
		{
			return ret = RYLR_RCV;
 80009e2:	2302      	movs	r3, #2
	else if(!memcmp(rxBuffer, "+RCV", 4))
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d008      	beq.n	80009fa <rylr998_ResponseFind+0x32>
		}
	else if(!memcmp(rxBuffer, "+ERR=", 5))
 80009e8:	2205      	movs	r2, #5
 80009ea:	0020      	movs	r0, r4
 80009ec:	4906      	ldr	r1, [pc, #24]	@ (8000a08 <rylr998_ResponseFind+0x40>)
 80009ee:	f002 f997 	bl	8002d20 <memcmp>
	}
	else if(!memcmp(rxBuffer, "+IPR=", 5))
	{
		return ret = RYLR_IPR;
	}*/
	return ret;
 80009f2:	0003      	movs	r3, r0
 80009f4:	1e5a      	subs	r2, r3, #1
 80009f6:	4193      	sbcs	r3, r2
 80009f8:	330a      	adds	r3, #10
}
 80009fa:	0018      	movs	r0, r3
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	08003e5e 	.word	0x08003e5e
 8000a04:	08003e64 	.word	0x08003e64
 8000a08:	08003e69 	.word	0x08003e69

08000a0c <rylr998_prase_reciver>:


RYLR_RX_data_t rx_packet;

RYLR_RX_command_t rylr998_prase_reciver(uint8_t *pBuff, uint8_t RX_BUFFER_SIZE)
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}

	static char aux_buff[64];  //it must match with RX_BUFFER_SIZE
	static uint8_t start_indx=0;
	static uint8_t i;

	for(i = 0; i <RX_BUFFER_SIZE; i++){   //Looks for the index of the starting char
 8000a0e:	2500      	movs	r5, #0
{
 8000a10:	000c      	movs	r4, r1

		if(pBuff[(start_indx+i) % RX_BUFFER_SIZE]=='+'){
 8000a12:	4e40      	ldr	r6, [pc, #256]	@ (8000b14 <rylr998_prase_reciver+0x108>)
	for(i = 0; i <RX_BUFFER_SIZE; i++){   //Looks for the index of the starting char
 8000a14:	4b40      	ldr	r3, [pc, #256]	@ (8000b18 <rylr998_prase_reciver+0x10c>)
{
 8000a16:	b087      	sub	sp, #28
		if(pBuff[(start_indx+i) % RX_BUFFER_SIZE]=='+'){
 8000a18:	7837      	ldrb	r7, [r6, #0]
{
 8000a1a:	9003      	str	r0, [sp, #12]
	for(i = 0; i <RX_BUFFER_SIZE; i++){   //Looks for the index of the starting char
 8000a1c:	701d      	strb	r5, [r3, #0]
 8000a1e:	b2eb      	uxtb	r3, r5
 8000a20:	429c      	cmp	r4, r3
 8000a22:	d909      	bls.n	8000a38 <rylr998_prase_reciver+0x2c>
		if(pBuff[(start_indx+i) % RX_BUFFER_SIZE]=='+'){
 8000a24:	1978      	adds	r0, r7, r5
 8000a26:	0021      	movs	r1, r4
 8000a28:	f7ff fcf0 	bl	800040c <__aeabi_idivmod>
 8000a2c:	9b03      	ldr	r3, [sp, #12]
 8000a2e:	3501      	adds	r5, #1
 8000a30:	5c5b      	ldrb	r3, [r3, r1]
 8000a32:	2b2b      	cmp	r3, #43	@ 0x2b
 8000a34:	d1f3      	bne.n	8000a1e <rylr998_prase_reciver+0x12>
			start_indx=(start_indx + i) % RX_BUFFER_SIZE;
 8000a36:	7031      	strb	r1, [r6, #0]
			break;
		}
	}

	for (i = 0; i <RX_BUFFER_SIZE; i++){
 8000a38:	2500      	movs	r5, #0
 8000a3a:	002f      	movs	r7, r5

		aux_buff[i] = pBuff[(start_indx + i) % RX_BUFFER_SIZE];
 8000a3c:	7833      	ldrb	r3, [r6, #0]
 8000a3e:	9304      	str	r3, [sp, #16]
 8000a40:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <rylr998_prase_reciver+0x110>)
 8000a42:	9305      	str	r3, [sp, #20]
 8000a44:	b2eb      	uxtb	r3, r5
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	9b04      	ldr	r3, [sp, #16]
 8000a4a:	195b      	adds	r3, r3, r5
 8000a4c:	9302      	str	r3, [sp, #8]
	for (i = 0; i <RX_BUFFER_SIZE; i++){
 8000a4e:	b2eb      	uxtb	r3, r5
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d90a      	bls.n	8000a6a <rylr998_prase_reciver+0x5e>
		aux_buff[i] = pBuff[(start_indx + i) % RX_BUFFER_SIZE];
 8000a54:	0021      	movs	r1, r4
 8000a56:	9802      	ldr	r0, [sp, #8]
 8000a58:	f7ff fcd8 	bl	800040c <__aeabi_idivmod>
 8000a5c:	9b03      	ldr	r3, [sp, #12]
 8000a5e:	9a05      	ldr	r2, [sp, #20]
 8000a60:	5c5b      	ldrb	r3, [r3, r1]
 8000a62:	5553      	strb	r3, [r2, r5]

		if(aux_buff[i]=='\n'){
 8000a64:	3501      	adds	r5, #1
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d119      	bne.n	8000a9e <rylr998_prase_reciver+0x92>
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	d002      	beq.n	8000a74 <rylr998_prase_reciver+0x68>
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <rylr998_prase_reciver+0x10c>)
 8000a70:	9a01      	ldr	r2, [sp, #4]
 8000a72:	701a      	strb	r2, [r3, #0]
	rylr998_interrupt_flag =0;
 8000a74:	2500      	movs	r5, #0
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <rylr998_prase_reciver+0x114>)
			break;
		}
	}
	rylr998_ClearInterruptFlag();
	start_indx=(start_indx + i+1) % RX_BUFFER_SIZE;
 8000a78:	9802      	ldr	r0, [sp, #8]
 8000a7a:	0021      	movs	r1, r4
	rylr998_interrupt_flag =0;
 8000a7c:	701d      	strb	r5, [r3, #0]
	start_indx=(start_indx + i+1) % RX_BUFFER_SIZE;
 8000a7e:	3001      	adds	r0, #1
 8000a80:	f7ff fcc4 	bl	800040c <__aeabi_idivmod>

            RYLR_RX_command_t cmd = rylr998_ResponseFind(aux_buff);
 8000a84:	4c25      	ldr	r4, [pc, #148]	@ (8000b1c <rylr998_prase_reciver+0x110>)
	start_indx=(start_indx + i+1) % RX_BUFFER_SIZE;
 8000a86:	7031      	strb	r1, [r6, #0]
            RYLR_RX_command_t cmd = rylr998_ResponseFind(aux_buff);
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f7ff ff9d 	bl	80009c8 <rylr998_ResponseFind>
 8000a8e:	0006      	movs	r6, r0

            // Handle different cases
            switch (cmd)
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d006      	beq.n	8000aa2 <rylr998_prase_reciver+0x96>
 8000a94:	280a      	cmp	r0, #10
 8000a96:	d03a      	beq.n	8000b0e <rylr998_prase_reciver+0x102>
                    break;
            }


            return cmd;
}
 8000a98:	0030      	movs	r0, r6
 8000a9a:	b007      	add	sp, #28
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	2701      	movs	r7, #1
 8000aa0:	e7d0      	b.n	8000a44 <rylr998_prase_reciver+0x38>
            	    token = strtok(aux_buff, "=");  // Remove "+RCV="
 8000aa2:	0020      	movs	r0, r4
 8000aa4:	491f      	ldr	r1, [pc, #124]	@ (8000b24 <rylr998_prase_reciver+0x118>)
 8000aa6:	f002 f965 	bl	8002d74 <strtok>
            	    token = strtok(NULL, ",");      // Get ID address
 8000aaa:	4f1f      	ldr	r7, [pc, #124]	@ (8000b28 <rylr998_prase_reciver+0x11c>)
 8000aac:	0028      	movs	r0, r5
 8000aae:	0039      	movs	r1, r7
 8000ab0:	f002 f960 	bl	8002d74 <strtok>
            	    rx_packet.id = atoi(token);
 8000ab4:	f001 fe98 	bl	80027e8 <atoi>
 8000ab8:	4c1c      	ldr	r4, [pc, #112]	@ (8000b2c <rylr998_prase_reciver+0x120>)
            	    token = strtok(NULL, ",");      // Get byte count
 8000aba:	0039      	movs	r1, r7
            	    rx_packet.id = atoi(token);
 8000abc:	8020      	strh	r0, [r4, #0]
            	    token = strtok(NULL, ",");      // Get byte count
 8000abe:	0028      	movs	r0, r5
 8000ac0:	f002 f958 	bl	8002d74 <strtok>
            	    rx_packet.byte_count = atoi(token);
 8000ac4:	f001 fe90 	bl	80027e8 <atoi>
            	    token = strtok(NULL, ",");
 8000ac8:	0039      	movs	r1, r7
            	    rx_packet.byte_count = atoi(token);
 8000aca:	70a0      	strb	r0, [r4, #2]
            	    token = strtok(NULL, ",");
 8000acc:	0028      	movs	r0, r5
 8000ace:	f002 f951 	bl	8002d74 <strtok>
            	    strncpy(rx_packet.data, token, rx_packet.byte_count);  // Copy up to byte_count
 8000ad2:	78a3      	ldrb	r3, [r4, #2]
            	    token = strtok(NULL, ",");
 8000ad4:	0001      	movs	r1, r0
            	    strncpy(rx_packet.data, token, rx_packet.byte_count);  // Copy up to byte_count
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <rylr998_prase_reciver+0x124>)
 8000ada:	9a01      	ldr	r2, [sp, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	f002 f934 	bl	8002d4c <strncpy>
            	    rx_packet.data[rx_packet.byte_count] = '\0';  // Ensure null termination
 8000ae4:	9b01      	ldr	r3, [sp, #4]
            	    token = strtok(NULL, ",");      // Get RSSI
 8000ae6:	0039      	movs	r1, r7
            	    rx_packet.data[rx_packet.byte_count] = '\0';  // Ensure null termination
 8000ae8:	18e3      	adds	r3, r4, r3
            	    token = strtok(NULL, ",");      // Get RSSI
 8000aea:	0028      	movs	r0, r5
            	    rx_packet.data[rx_packet.byte_count] = '\0';  // Ensure null termination
 8000aec:	70dd      	strb	r5, [r3, #3]
            	    token = strtok(NULL, ",");      // Get RSSI
 8000aee:	f002 f941 	bl	8002d74 <strtok>
            	    rx_packet.rssi = atoi(token);
 8000af2:	f001 fe79 	bl	80027e8 <atoi>
 8000af6:	9b02      	ldr	r3, [sp, #8]
            	    token = strtok(NULL, ",");      // Get SNR
 8000af8:	0039      	movs	r1, r7
            	    rx_packet.rssi = atoi(token);
 8000afa:	3340      	adds	r3, #64	@ 0x40
 8000afc:	7018      	strb	r0, [r3, #0]
            	    token = strtok(NULL, ",");      // Get SNR
 8000afe:	0028      	movs	r0, r5
 8000b00:	f002 f938 	bl	8002d74 <strtok>
            	    rx_packet.snr = atoi(token);
 8000b04:	f001 fe70 	bl	80027e8 <atoi>
 8000b08:	3444      	adds	r4, #68	@ 0x44
 8000b0a:	7020      	strb	r0, [r4, #0]
                    break;
 8000b0c:	e7c4      	b.n	8000a98 <rylr998_prase_reciver+0x8c>
                		Error_Handler();
 8000b0e:	f7ff fe7f 	bl	8000810 <Error_Handler>
                	while(1){  //TODO  for now, if something went wrong, the code gets stuck here.
 8000b12:	e7fc      	b.n	8000b0e <rylr998_prase_reciver+0x102>
 8000b14:	200000c4 	.word	0x200000c4
 8000b18:	200000c5 	.word	0x200000c5
 8000b1c:	20000084 	.word	0x20000084
 8000b20:	2000010c 	.word	0x2000010c
 8000b24:	08003e6d 	.word	0x08003e6d
 8000b28:	08003e6f 	.word	0x08003e6f
 8000b2c:	200000c6 	.word	0x200000c6
 8000b30:	200000c9 	.word	0x200000c9

08000b34 <rylr998_getCommand>:
void rylr998_getCommand(RYLR_RX_command_t cmd,uint8_t *rx_buff,uint8_t RX_BUFFER_SIZE){
 8000b34:	b570      	push	{r4, r5, r6, lr}
	HAL_Delay(30);
 8000b36:	201e      	movs	r0, #30
void rylr998_getCommand(RYLR_RX_command_t cmd,uint8_t *rx_buff,uint8_t RX_BUFFER_SIZE){
 8000b38:	000c      	movs	r4, r1
 8000b3a:	0015      	movs	r5, r2
	HAL_Delay(30);
 8000b3c:	f000 fab0 	bl	80010a0 <HAL_Delay>
	return rylr998_interrupt_flag;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <rylr998_getCommand+0x24>)
		if(rylr998_GetInterruptFlag()){
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <rylr998_getCommand+0x1e>
				if(rylr998_prase_reciver(rx_buff,RX_BUFFER_SIZE)!=cmd){
 8000b48:	0029      	movs	r1, r5
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f7ff ff5e 	bl	8000a0c <rylr998_prase_reciver>
}
 8000b50:	bd70      	pop	{r4, r5, r6, pc}
			Error_Handler();
 8000b52:	f7ff fe5d 	bl	8000810 <Error_Handler>
}
 8000b56:	e7fb      	b.n	8000b50 <rylr998_getCommand+0x1c>
 8000b58:	2000010c 	.word	0x2000010c

08000b5c <rylr998_config>:
void rylr998_config(RYLR_config_t *config_handler){
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	0004      	movs	r4, r0
		rylr998_FACTORY();
 8000b60:	f7ff ff18 	bl	8000994 <rylr998_FACTORY>
		rylr998_getCommand(RYLR_FACTORY,rx_buff,RX_BUFF);
 8000b64:	4d23      	ldr	r5, [pc, #140]	@ (8000bf4 <rylr998_config+0x98>)
 8000b66:	2240      	movs	r2, #64	@ 0x40
 8000b68:	0029      	movs	r1, r5
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f7ff ffe2 	bl	8000b34 <rylr998_getCommand>
		rylr998_networkId(config_handler->networkId);
 8000b70:	7820      	ldrb	r0, [r4, #0]
 8000b72:	f7ff fe73 	bl	800085c <rylr998_networkId>
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000b76:	0029      	movs	r1, r5
 8000b78:	2240      	movs	r2, #64	@ 0x40
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ffda 	bl	8000b34 <rylr998_getCommand>
		rylr998_setAddress(config_handler->address);
 8000b80:	78a0      	ldrb	r0, [r4, #2]
 8000b82:	f7ff fe55 	bl	8000830 <rylr998_setAddress>
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000b86:	0029      	movs	r1, r5
 8000b88:	2240      	movs	r2, #64	@ 0x40
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff ffd2 	bl	8000b34 <rylr998_getCommand>
		rylr998_setParameter(config_handler->SF, config_handler->BW, config_handler->CR, config_handler->ProgramedPreamble);
 8000b90:	79e3      	ldrb	r3, [r4, #7]
 8000b92:	79a2      	ldrb	r2, [r4, #6]
 8000b94:	7961      	ldrb	r1, [r4, #5]
 8000b96:	7920      	ldrb	r0, [r4, #4]
 8000b98:	f7ff fe76 	bl	8000888 <rylr998_setParameter>
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000b9c:	0029      	movs	r1, r5
 8000b9e:	2240      	movs	r2, #64	@ 0x40
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ffc7 	bl	8000b34 <rylr998_getCommand>
		rylr998_mode(config_handler->mode,config_handler->rxTime,config_handler->LowSpeedTime);
 8000ba6:	7a20      	ldrb	r0, [r4, #8]
 8000ba8:	6922      	ldr	r2, [r4, #16]
 8000baa:	68e1      	ldr	r1, [r4, #12]
 8000bac:	f7ff fe8a 	bl	80008c4 <rylr998_mode>
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000bb0:	0029      	movs	r1, r5
 8000bb2:	2240      	movs	r2, #64	@ 0x40
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ffbd 	bl	8000b34 <rylr998_getCommand>
		rylr998_setBand(config_handler->frequency,config_handler->memory);
 8000bba:	7f21      	ldrb	r1, [r4, #28]
 8000bbc:	69a0      	ldr	r0, [r4, #24]
 8000bbe:	f7ff fea7 	bl	8000910 <rylr998_setBand>
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000bc2:	0029      	movs	r1, r5
 8000bc4:	2240      	movs	r2, #64	@ 0x40
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ffb4 	bl	8000b34 <rylr998_getCommand>
		rylr998_setCPIN(config_handler->password);
 8000bcc:	0020      	movs	r0, r4
 8000bce:	301d      	adds	r0, #29
 8000bd0:	f7ff feb4 	bl	800093c <rylr998_setCPIN>
		rylr998_setCRFOP(config_handler->CRFOP);
 8000bd4:	3406      	adds	r4, #6
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000bd6:	0029      	movs	r1, r5
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ffaa 	bl	8000b34 <rylr998_getCommand>
		rylr998_setCRFOP(config_handler->CRFOP);
 8000be0:	7fe0      	ldrb	r0, [r4, #31]
 8000be2:	f7ff fec1 	bl	8000968 <rylr998_setCRFOP>
		rylr998_getCommand(RYLR_OK,rx_buff,RX_BUFF);
 8000be6:	0029      	movs	r1, r5
 8000be8:	2240      	movs	r2, #64	@ 0x40
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ffa2 	bl	8000b34 <rylr998_getCommand>
}
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	20000154 	.word	0x20000154

08000bf8 <rylr998_setChannel>:
void rylr998_setChannel(uint8_t ch,uint8_t address){
 8000bf8:	b500      	push	{lr}
 8000bfa:	b08b      	sub	sp, #44	@ 0x2c
	config_handler.networkId =18;
 8000bfc:	466a      	mov	r2, sp
 8000bfe:	2312      	movs	r3, #18
 8000c00:	7013      	strb	r3, [r2, #0]
	config_handler.SF=9;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <rylr998_setChannel+0x3c>)
	strcpy(config_handler.password, "FFFFFFFF"); //we dont want the \0 terminator so we overflow
 8000c04:	201d      	movs	r0, #29
	config_handler.SF=9;
 8000c06:	9301      	str	r3, [sp, #4]
	config_handler.mode=0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	7213      	strb	r3, [r2, #8]
	config_handler.rxTime=0;
 8000c0c:	9303      	str	r3, [sp, #12]
	config_handler.LowSpeedTime=0;
 8000c0e:	9304      	str	r3, [sp, #16]
	config_handler.frequency=915000000;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <rylr998_setChannel+0x40>)
	config_handler.address =address;
 8000c12:	8051      	strh	r1, [r2, #2]
	config_handler.frequency=915000000;
 8000c14:	9306      	str	r3, [sp, #24]
	config_handler.memory=1;
 8000c16:	2301      	movs	r3, #1
	strcpy(config_handler.password, "FFFFFFFF"); //we dont want the \0 terminator so we overflow
 8000c18:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <rylr998_setChannel+0x44>)
 8000c1a:	4468      	add	r0, sp
	config_handler.memory=1;
 8000c1c:	7713      	strb	r3, [r2, #28]
	strcpy(config_handler.password, "FFFFFFFF"); //we dont want the \0 terminator so we overflow
 8000c1e:	f002 f996 	bl	8002f4e <strcpy>
	config_handler.CRFOP=22;
 8000c22:	466b      	mov	r3, sp
 8000c24:	2216      	movs	r2, #22
 8000c26:	3306      	adds	r3, #6
	rylr998_config(&config_handler);
 8000c28:	4668      	mov	r0, sp
	config_handler.CRFOP=22;
 8000c2a:	77da      	strb	r2, [r3, #31]
	rylr998_config(&config_handler);
 8000c2c:	f7ff ff96 	bl	8000b5c <rylr998_config>
}
 8000c30:	b00b      	add	sp, #44	@ 0x2c
 8000c32:	bd00      	pop	{pc}
 8000c34:	0c010709 	.word	0x0c010709
 8000c38:	3689cac0 	.word	0x3689cac0
 8000c3c:	08003e71 	.word	0x08003e71

08000c40 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	2201      	movs	r2, #1
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_MspInit+0x18>)
 8000c44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c46:	430a      	orrs	r2, r1
 8000c48:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000c4e:	0552      	lsls	r2, r2, #21
 8000c50:	430a      	orrs	r2, r1
 8000c52:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	4770      	bx	lr
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	40021000 	.word	0x40021000

08000c5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler>

08000c5e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler>

08000c60 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 fa09 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bd10      	pop	{r4, pc}

08000c6c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <DMA1_Channel2_3_IRQHandler+0x10>)
 8000c70:	f000 fb3d 	bl	80012ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000c76:	f000 fb3a 	bl	80012ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c7a:	bd10      	pop	{r4, pc}
 8000c7c:	20000224 	.word	0x20000224
 8000c80:	2000026c 	.word	0x2000026c

08000c84 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000c84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c86:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 8000c88:	f000 fb31 	bl	80012ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000c8e:	f000 fb2e 	bl	80012ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000c92:	bd10      	pop	{r4, pc}
 8000c94:	20000194 	.word	0x20000194
 8000c98:	200001dc 	.word	0x200001dc

08000c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9e:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <USART2_IRQHandler+0xc>)
 8000ca0:	f001 f8d0 	bl	8001e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	200002b4 	.word	0x200002b4

08000cac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000cac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000cae:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <LPUART1_IRQHandler+0xc>)
 8000cb0:	f001 f8c8 	bl	8001e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000cb4:	bd10      	pop	{r4, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	2000033c 	.word	0x2000033c

08000cbc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4770      	bx	lr

08000cc0 <_kill>:

int _kill(int pid, int sig)
{
 8000cc0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cc2:	f002 f917 	bl	8002ef4 <__errno>
 8000cc6:	2316      	movs	r3, #22
 8000cc8:	6003      	str	r3, [r0, #0]
  return -1;
 8000cca:	2001      	movs	r0, #1
}
 8000ccc:	4240      	negs	r0, r0
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <_exit>:

void _exit (int status)
{
 8000cd0:	b510      	push	{r4, lr}
  errno = EINVAL;
 8000cd2:	f002 f90f 	bl	8002ef4 <__errno>
 8000cd6:	2316      	movs	r3, #22
 8000cd8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000cda:	e7fe      	b.n	8000cda <_exit+0xa>

08000cdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	000e      	movs	r6, r1
 8000ce0:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2500      	movs	r5, #0
 8000ce4:	42a5      	cmp	r5, r4
 8000ce6:	db01      	blt.n	8000cec <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000ce8:	0020      	movs	r0, r4
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000cec:	e000      	b.n	8000cf0 <_read+0x14>
 8000cee:	bf00      	nop
 8000cf0:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	3501      	adds	r5, #1
 8000cf4:	e7f6      	b.n	8000ce4 <_read+0x8>

08000cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf6:	b570      	push	{r4, r5, r6, lr}
 8000cf8:	000e      	movs	r6, r1
 8000cfa:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	db01      	blt.n	8000d06 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000d02:	0020      	movs	r0, r4
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000d06:	5d70      	ldrb	r0, [r6, r5]
 8000d08:	e000      	b.n	8000d0c <_write+0x16>
 8000d0a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	3501      	adds	r5, #1
 8000d0e:	e7f6      	b.n	8000cfe <_write+0x8>

08000d10 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8000d10:	2001      	movs	r0, #1
}
 8000d12:	4240      	negs	r0, r0
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	019b      	lsls	r3, r3, #6
  return 0;
}
 8000d1a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000d1c:	604b      	str	r3, [r1, #4]
}
 8000d1e:	4770      	bx	lr

08000d20 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000d20:	2001      	movs	r0, #1
 8000d22:	4770      	bx	lr

08000d24 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000d24:	2000      	movs	r0, #0
 8000d26:	4770      	bx	lr

08000d28 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	490b      	ldr	r1, [pc, #44]	@ (8000d58 <_sbrk+0x30>)
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d5c <_sbrk+0x34>)
{
 8000d2c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	490b      	ldr	r1, [pc, #44]	@ (8000d60 <_sbrk+0x38>)
{
 8000d32:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000d34:	6808      	ldr	r0, [r1, #0]
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d101      	bne.n	8000d3e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000d3a:	480a      	ldr	r0, [pc, #40]	@ (8000d64 <_sbrk+0x3c>)
 8000d3c:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	6808      	ldr	r0, [r1, #0]
 8000d40:	18c3      	adds	r3, r0, r3
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d906      	bls.n	8000d54 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000d46:	f002 f8d5 	bl	8002ef4 <__errno>
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000d52:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000d54:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000d56:	e7fc      	b.n	8000d52 <_sbrk+0x2a>
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20002000 	.word	0x20002000
 8000d60:	20000150 	.word	0x20000150
 8000d64:	20000518 	.word	0x20000518

08000d68 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	4770      	bx	lr
	...

08000d6c <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <MX_LPUART1_UART_Init+0x30>)
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_LPUART1_UART_Init+0x34>)
{
 8000d70:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8000d72:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d74:	23e1      	movs	r3, #225	@ 0xe1
 8000d76:	025b      	lsls	r3, r3, #9
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d78:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 8000d7a:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7c:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d7e:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d80:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d82:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d84:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d88:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d8c:	f001 fc74 	bl	8002678 <HAL_UART_Init>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_LPUART1_UART_Init+0x2c>
  {
    Error_Handler();
 8000d94:	f7ff fd3c 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	2000033c 	.word	0x2000033c
 8000da0:	40004800 	.word	0x40004800

08000da4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <MX_USART2_UART_Init+0x30>)
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <MX_USART2_UART_Init+0x34>)
{
 8000da8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000daa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000dac:	23e1      	movs	r3, #225	@ 0xe1
 8000dae:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8000db2:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dbc:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc6:	f001 fc57 	bl	8002678 <HAL_UART_Init>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8000dce:	f7ff fd1f 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bd10      	pop	{r4, pc}
 8000dd4:	200002b4 	.word	0x200002b4
 8000dd8:	40004400 	.word	0x40004400

08000ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	0005      	movs	r5, r0
 8000de0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	2214      	movs	r2, #20
 8000de4:	2100      	movs	r1, #0
 8000de6:	a803      	add	r0, sp, #12
 8000de8:	f001 ffa8 	bl	8002d3c <memset>
  if(uartHandle->Instance==LPUART1)
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	4a56      	ldr	r2, [pc, #344]	@ (8000f48 <HAL_UART_MspInit+0x16c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d154      	bne.n	8000e9e <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	4b55      	ldr	r3, [pc, #340]	@ (8000f4c <HAL_UART_MspInit+0x170>)
 8000df8:	02d2      	lsls	r2, r2, #11
 8000dfa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dfe:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e02:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	400b      	ands	r3, r1
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e14:	230c      	movs	r3, #12
 8000e16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	3b0a      	subs	r3, #10
 8000e1a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	185b      	adds	r3, r3, r1
 8000e1e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e22:	3303      	adds	r3, #3
 8000e24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f000 faad 	bl	8001384 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e2a:	4c49      	ldr	r4, [pc, #292]	@ (8000f50 <HAL_UART_MspInit+0x174>)
 8000e2c:	4b49      	ldr	r3, [pc, #292]	@ (8000f54 <HAL_UART_MspInit+0x178>)
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	2280      	movs	r2, #128	@ 0x80
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e30:	6023      	str	r3, [r4, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000e32:	2305      	movs	r3, #5
 8000e34:	6063      	str	r3, [r4, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e3a:	0020      	movs	r0, r4
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e3c:	3a60      	subs	r2, #96	@ 0x60
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3e:	60a3      	str	r3, [r4, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e42:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e44:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e46:	61e2      	str	r2, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e48:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e4a:	f000 f98b 	bl	8001164 <HAL_DMA_Init>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_UART_MspInit+0x7a>
    {
      Error_Handler();
 8000e52:	f7ff fcdd 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000e56:	4b40      	ldr	r3, [pc, #256]	@ (8000f58 <HAL_UART_MspInit+0x17c>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000e58:	676c      	str	r4, [r5, #116]	@ 0x74
 8000e5a:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000e5c:	4c3f      	ldr	r4, [pc, #252]	@ (8000f5c <HAL_UART_MspInit+0x180>)
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5e:	2280      	movs	r2, #128	@ 0x80
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000e60:	6023      	str	r3, [r4, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000e62:	2305      	movs	r3, #5
 8000e64:	6063      	str	r3, [r4, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e66:	330b      	adds	r3, #11
 8000e68:	60a3      	str	r3, [r4, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6a:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000e6c:	0020      	movs	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6e:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e70:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e72:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e74:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000e76:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e78:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000e7a:	f000 f973 	bl	8001164 <HAL_DMA_Init>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 8000e82:	f7ff fcc5 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	201d      	movs	r0, #29
 8000e8a:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000e8c:	672c      	str	r4, [r5, #112]	@ 0x70
 8000e8e:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e90:	f000 f918 	bl	80010c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e94:	201d      	movs	r0, #29

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e96:	f000 f93f 	bl	8001118 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e9a:	b008      	add	sp, #32
 8000e9c:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8000e9e:	4a30      	ldr	r2, [pc, #192]	@ (8000f60 <HAL_UART_MspInit+0x184>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d1fa      	bne.n	8000e9a <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <HAL_UART_MspInit+0x170>)
 8000ea8:	0292      	lsls	r2, r2, #10
 8000eaa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eae:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000eb6:	2604      	movs	r6, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|VCP_RX_Pin;
 8000ec6:	2382      	movs	r3, #130	@ 0x82
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000ed6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f000 fa54 	bl	8001384 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000edc:	4c21      	ldr	r4, [pc, #132]	@ (8000f64 <HAL_UART_MspInit+0x188>)
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <HAL_UART_MspInit+0x18c>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee0:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000ee2:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee4:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee6:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ee8:	0020      	movs	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000eea:	3a60      	subs	r2, #96	@ 0x60
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000eec:	6066      	str	r6, [r4, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef2:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef4:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ef6:	61e2      	str	r2, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000efa:	f000 f933 	bl	8001164 <HAL_DMA_Init>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8000f02:	f7ff fc85 	bl	8000810 <Error_Handler>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0x190>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f08:	676c      	str	r4, [r5, #116]	@ 0x74
 8000f0a:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000f0c:	4c18      	ldr	r4, [pc, #96]	@ (8000f70 <HAL_UART_MspInit+0x194>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000f10:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f16:	330c      	adds	r3, #12
 8000f18:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f1c:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1e:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f20:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f22:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f24:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f26:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f28:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f2a:	f000 f91b 	bl	8001164 <HAL_DMA_Init>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0x15a>
      Error_Handler();
 8000f32:	f7ff fc6d 	bl	8000810 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	201c      	movs	r0, #28
 8000f3a:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000f3c:	672c      	str	r4, [r5, #112]	@ 0x70
 8000f3e:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f40:	f000 f8c0 	bl	80010c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f44:	201c      	movs	r0, #28
 8000f46:	e7a6      	b.n	8000e96 <HAL_UART_MspInit+0xba>
 8000f48:	40004800 	.word	0x40004800
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	2000026c 	.word	0x2000026c
 8000f54:	40020030 	.word	0x40020030
 8000f58:	4002001c 	.word	0x4002001c
 8000f5c:	20000224 	.word	0x20000224
 8000f60:	40004400 	.word	0x40004400
 8000f64:	200001dc 	.word	0x200001dc
 8000f68:	40020058 	.word	0x40020058
 8000f6c:	40020044 	.word	0x40020044
 8000f70:	20000194 	.word	0x20000194

08000f74 <INIT_RX_UART2>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}
uint8_t rx_buff[RX_BUFF];
/* USER CODE BEGIN 1 */
void INIT_RX_UART2(void){
 8000f74:	b510      	push	{r4, lr}
HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, rx_buff, RX_BUFF);
 8000f76:	2240      	movs	r2, #64	@ 0x40
 8000f78:	4902      	ldr	r1, [pc, #8]	@ (8000f84 <INIT_RX_UART2+0x10>)
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <INIT_RX_UART2+0x14>)
 8000f7c:	f001 fc03 	bl	8002786 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	20000154 	.word	0x20000154
 8000f88:	2000033c 	.word	0x2000033c

08000f8c <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f8c:	b570      	push	{r4, r5, r6, lr}
    // Check if the event is an idle line event

	if((huart == &hlpuart1)){
 8000f8e:	4c08      	ldr	r4, [pc, #32]	@ (8000fb0 <HAL_UARTEx_RxEventCallback+0x24>)
 8000f90:	4284      	cmp	r4, r0
 8000f92:	d10c      	bne.n	8000fae <HAL_UARTEx_RxEventCallback+0x22>
		//if (HAL_UARTEx_GetRxEventType(huart) == HAL_UART_RXEVENT_IDLE ||HAL_UARTEx_GetRxEventType(huart) == HAL_UART_RXEVENT_HT) {
		//For some reason, the RXevent IDLE tends to not work right
			if (rx_buff[Size-1]=='\n'){
 8000f94:	4d07      	ldr	r5, [pc, #28]	@ (8000fb4 <HAL_UARTEx_RxEventCallback+0x28>)
 8000f96:	1869      	adds	r1, r5, r1
 8000f98:	3901      	subs	r1, #1
 8000f9a:	780b      	ldrb	r3, [r1, #0]
 8000f9c:	2b0a      	cmp	r3, #10
 8000f9e:	d101      	bne.n	8000fa4 <HAL_UARTEx_RxEventCallback+0x18>
			rylr998_SetInterruptFlag();
 8000fa0:	f7ff fd0c 	bl	80009bc <rylr998_SetInterruptFlag>
			}
			HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buff, RX_BUFF);
 8000fa4:	2240      	movs	r2, #64	@ 0x40
 8000fa6:	0029      	movs	r1, r5
 8000fa8:	0020      	movs	r0, r4
 8000faa:	f001 fbec 	bl	8002786 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	2000033c 	.word	0x2000033c
 8000fb4:	20000154 	.word	0x20000154

08000fb8 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:     ldr   r0, =_estack
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff fed4 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f001 ff8b 	bl	8002f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fbfd 	bl	80007e8 <main>

08000fee <LoopForever>:

LoopForever:
    b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
Reset_Handler:     ldr   r0, =_estack
 8000ff0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ffc:	0800408c 	.word	0x0800408c
  ldr r2, =_sbss
 8001000:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001004:	20000514 	.word	0x20000514

08001008 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_COMP_IRQHandler>
	...

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	20fa      	movs	r0, #250	@ 0xfa
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_InitTick+0x3c>)
 8001014:	0080      	lsls	r0, r0, #2
 8001016:	7819      	ldrb	r1, [r3, #0]
 8001018:	f7ff f888 	bl	800012c <__udivsi3>
 800101c:	4c0b      	ldr	r4, [pc, #44]	@ (800104c <HAL_InitTick+0x40>)
 800101e:	0001      	movs	r1, r0
 8001020:	6820      	ldr	r0, [r4, #0]
 8001022:	f7ff f883 	bl	800012c <__udivsi3>
 8001026:	f000 f883 	bl	8001130 <HAL_SYSTICK_Config>
 800102a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102e:	2c00      	cmp	r4, #0
 8001030:	d109      	bne.n	8001046 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	2d03      	cmp	r5, #3
 8001034:	d807      	bhi.n	8001046 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001036:	3802      	subs	r0, #2
 8001038:	0022      	movs	r2, r4
 800103a:	0029      	movs	r1, r5
 800103c:	f000 f842 	bl	80010c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	0020      	movs	r0, r4
 8001042:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_InitTick+0x44>)
 8001044:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	20000004 	.word	0x20000004
 800104c:	20000000 	.word	0x20000000
 8001050:	20000008 	.word	0x20000008

08001054 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001054:	2340      	movs	r3, #64	@ 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <HAL_Init+0x24>)
{
 8001058:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800105a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800105e:	430b      	orrs	r3, r1
 8001060:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	f7ff ffd3 	bl	800100c <HAL_InitTick>
 8001066:	1e04      	subs	r4, r0, #0
 8001068:	d103      	bne.n	8001072 <HAL_Init+0x1e>
    HAL_MspInit();
 800106a:	f7ff fde9 	bl	8000c40 <HAL_MspInit>
}
 800106e:	0020      	movs	r0, r4
 8001070:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001072:	2401      	movs	r4, #1
 8001074:	e7fb      	b.n	800106e <HAL_Init+0x1a>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800107c:	4a03      	ldr	r2, [pc, #12]	@ (800108c <HAL_IncTick+0x10>)
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <HAL_IncTick+0x14>)
 8001080:	6811      	ldr	r1, [r2, #0]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	185b      	adds	r3, r3, r1
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	4770      	bx	lr
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	200003c4 	.word	0x200003c4
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001094:	4b01      	ldr	r3, [pc, #4]	@ (800109c <HAL_GetTick+0x8>)
 8001096:	6818      	ldr	r0, [r3, #0]
}
 8001098:	4770      	bx	lr
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	200003c4 	.word	0x200003c4

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff fff6 	bl	8001094 <HAL_GetTick>
 80010a8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	1c63      	adds	r3, r4, #1
 80010ac:	d002      	beq.n	80010b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <HAL_Delay+0x20>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	1b40      	subs	r0, r0, r5
 80010ba:	42a0      	cmp	r0, r4
 80010bc:	d3fa      	bcc.n	80010b4 <HAL_Delay+0x14>
  {
  }
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c6:	24ff      	movs	r4, #255	@ 0xff
 80010c8:	2203      	movs	r2, #3
 80010ca:	000b      	movs	r3, r1
 80010cc:	0021      	movs	r1, r4
 80010ce:	4002      	ands	r2, r0
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010da:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80010dc:	2800      	cmp	r0, #0
 80010de:	db0a      	blt.n	80010f6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	24c0      	movs	r4, #192	@ 0xc0
 80010e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_NVIC_SetPriority+0x4c>)
 80010e4:	0880      	lsrs	r0, r0, #2
 80010e6:	0080      	lsls	r0, r0, #2
 80010e8:	1880      	adds	r0, r0, r2
 80010ea:	00a4      	lsls	r4, r4, #2
 80010ec:	5902      	ldr	r2, [r0, r4]
 80010ee:	400a      	ands	r2, r1
 80010f0:	4313      	orrs	r3, r2
 80010f2:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80010f4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f6:	220f      	movs	r2, #15
 80010f8:	4010      	ands	r0, r2
 80010fa:	3808      	subs	r0, #8
 80010fc:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <HAL_NVIC_SetPriority+0x50>)
 80010fe:	0880      	lsrs	r0, r0, #2
 8001100:	0080      	lsls	r0, r0, #2
 8001102:	1880      	adds	r0, r0, r2
 8001104:	69c2      	ldr	r2, [r0, #28]
 8001106:	4011      	ands	r1, r2
 8001108:	4319      	orrs	r1, r3
 800110a:	61c1      	str	r1, [r0, #28]
 800110c:	e7f2      	b.n	80010f4 <HAL_NVIC_SetPriority+0x30>
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001118:	2800      	cmp	r0, #0
 800111a:	db05      	blt.n	8001128 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111c:	231f      	movs	r3, #31
 800111e:	4018      	ands	r0, r3
 8001120:	3b1e      	subs	r3, #30
 8001122:	4083      	lsls	r3, r0
 8001124:	4a01      	ldr	r2, [pc, #4]	@ (800112c <HAL_NVIC_EnableIRQ+0x14>)
 8001126:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001128:	4770      	bx	lr
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	e000e100 	.word	0xe000e100

08001130 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	1e43      	subs	r3, r0, #1
 8001134:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	4293      	cmp	r3, r2
 800113a:	d20d      	bcs.n	8001158 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a07      	ldr	r2, [pc, #28]	@ (800115c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001144:	6a03      	ldr	r3, [r0, #32]
 8001146:	0609      	lsls	r1, r1, #24
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	430b      	orrs	r3, r1
 800114e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	e000e010 	.word	0xe000e010
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
  if(hdma == NULL)
 800116a:	2c00      	cmp	r4, #0
 800116c:	d035      	beq.n	80011da <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800116e:	6825      	ldr	r5, [r4, #0]
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_DMA_Init+0x78>)
 8001172:	2114      	movs	r1, #20
 8001174:	18e8      	adds	r0, r5, r3
 8001176:	f7fe ffd9 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800117c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800117e:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001180:	2302      	movs	r3, #2
 8001182:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001184:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001188:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800118c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800118e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8001190:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001192:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8001194:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001196:	433b      	orrs	r3, r7
 8001198:	6967      	ldr	r7, [r4, #20]
 800119a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119c:	69a7      	ldr	r7, [r4, #24]
 800119e:	433b      	orrs	r3, r7
 80011a0:	69e7      	ldr	r7, [r4, #28]
 80011a2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a4:	6a27      	ldr	r7, [r4, #32]
 80011a6:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80011a8:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011aa:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	01db      	lsls	r3, r3, #7
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d00c      	beq.n	80011ce <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011b4:	251c      	movs	r5, #28
 80011b6:	4028      	ands	r0, r5
 80011b8:	3d0d      	subs	r5, #13
 80011ba:	4085      	lsls	r5, r0
 80011bc:	490a      	ldr	r1, [pc, #40]	@ (80011e8 <HAL_DMA_Init+0x84>)
 80011be:	680b      	ldr	r3, [r1, #0]
 80011c0:	43ab      	bics	r3, r5
 80011c2:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	680d      	ldr	r5, [r1, #0]
 80011c8:	4083      	lsls	r3, r0
 80011ca:	432b      	orrs	r3, r5
 80011cc:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ce:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011d0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d2:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011d4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80011d6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80011d8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80011da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011dc:	bffdfff8 	.word	0xbffdfff8
 80011e0:	40020000 	.word	0x40020000
 80011e4:	ffff800f 	.word	0xffff800f
 80011e8:	400200a8 	.word	0x400200a8

080011ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ee:	1d44      	adds	r4, r0, #5
{
 80011f0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80011f2:	7fe5      	ldrb	r5, [r4, #31]
 80011f4:	2d01      	cmp	r5, #1
 80011f6:	d035      	beq.n	8001264 <HAL_DMA_Start_IT+0x78>
 80011f8:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80011fa:	1d87      	adds	r7, r0, #6
  __HAL_LOCK(hdma);
 80011fc:	77e5      	strb	r5, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80011fe:	7ffd      	ldrb	r5, [r7, #31]
 8001200:	2600      	movs	r6, #0
 8001202:	46ac      	mov	ip, r5
 8001204:	4663      	mov	r3, ip
 8001206:	b2ed      	uxtb	r5, r5
 8001208:	2b01      	cmp	r3, #1
 800120a:	d12a      	bne.n	8001262 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800120c:	2402      	movs	r4, #2
 800120e:	77fc      	strb	r4, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001210:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001212:	63c6      	str	r6, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001214:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001216:	331b      	adds	r3, #27
    __HAL_DMA_DISABLE(hdma);
 8001218:	43ae      	bics	r6, r5
 800121a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800121c:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 800121e:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8001220:	401e      	ands	r6, r3
 8001222:	40b5      	lsls	r5, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001224:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001226:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001228:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800122a:	6883      	ldr	r3, [r0, #8]
 800122c:	2b10      	cmp	r3, #16
 800122e:	d10e      	bne.n	800124e <HAL_DMA_Start_IT+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001230:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001232:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001234:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00c      	beq.n	8001254 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123a:	230e      	movs	r3, #14
 800123c:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800123e:	4313      	orrs	r3, r2
 8001240:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001242:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001244:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	4313      	orrs	r3, r2
 800124a:	6023      	str	r3, [r4, #0]
}
 800124c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800124e:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001250:	60e2      	str	r2, [r4, #12]
 8001252:	e7ef      	b.n	8001234 <HAL_DMA_Start_IT+0x48>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001254:	2204      	movs	r2, #4
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	4393      	bics	r3, r2
 800125a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800125c:	6822      	ldr	r2, [r4, #0]
 800125e:	230a      	movs	r3, #10
 8001260:	e7ed      	b.n	800123e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma);
 8001262:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8001264:	2002      	movs	r0, #2
 8001266:	e7f1      	b.n	800124c <HAL_DMA_Start_IT+0x60>

08001268 <HAL_DMA_Abort>:
{
 8001268:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800126a:	1d84      	adds	r4, r0, #6
 800126c:	7fe2      	ldrb	r2, [r4, #31]
{
 800126e:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	2a02      	cmp	r2, #2
 8001272:	d006      	beq.n	8001282 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001274:	2204      	movs	r2, #4
 8001276:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001278:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800127a:	2200      	movs	r2, #0
 800127c:	3305      	adds	r3, #5
 800127e:	77da      	strb	r2, [r3, #31]
}
 8001280:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001282:	6802      	ldr	r2, [r0, #0]
 8001284:	200e      	movs	r0, #14
 8001286:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001288:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128a:	4381      	bics	r1, r0
 800128c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800128e:	2101      	movs	r1, #1
 8001290:	6810      	ldr	r0, [r2, #0]
 8001292:	4388      	bics	r0, r1
 8001294:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001296:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001298:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800129a:	402a      	ands	r2, r5
 800129c:	000d      	movs	r5, r1
 800129e:	4095      	lsls	r5, r2
 80012a0:	6045      	str	r5, [r0, #4]
    return status;
 80012a2:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80012a4:	77e1      	strb	r1, [r4, #31]
    return status;
 80012a6:	e7e8      	b.n	800127a <HAL_DMA_Abort+0x12>

080012a8 <HAL_DMA_Abort_IT>:
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012aa:	1d84      	adds	r4, r0, #6
 80012ac:	7fe3      	ldrb	r3, [r4, #31]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d003      	beq.n	80012ba <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	2304      	movs	r3, #4
 80012b4:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80012b6:	2001      	movs	r0, #1
}
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ba:	210e      	movs	r1, #14
 80012bc:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012be:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80012c6:	2201      	movs	r2, #1
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	4391      	bics	r1, r2
 80012cc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012ce:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80012d0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80012d2:	402b      	ands	r3, r5
 80012d4:	0015      	movs	r5, r2
 80012d6:	409d      	lsls	r5, r3
 80012d8:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80012dc:	2200      	movs	r2, #0
 80012de:	1d43      	adds	r3, r0, #5
 80012e0:	77da      	strb	r2, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80012e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d000      	beq.n	80012ea <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 80012e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012ea:	2000      	movs	r0, #0
 80012ec:	e7e4      	b.n	80012b8 <HAL_DMA_Abort_IT+0x10>

080012ee <HAL_DMA_IRQHandler>:
{
 80012ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80012f0:	261c      	movs	r6, #28
 80012f2:	2704      	movs	r7, #4
 80012f4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80012f8:	4032      	ands	r2, r6
 80012fa:	003e      	movs	r6, r7
 80012fc:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012fe:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001300:	6803      	ldr	r3, [r0, #0]
 8001302:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001304:	4235      	tst	r5, r6
 8001306:	d00d      	beq.n	8001324 <HAL_DMA_IRQHandler+0x36>
 8001308:	423c      	tst	r4, r7
 800130a:	d00b      	beq.n	8001324 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	0692      	lsls	r2, r2, #26
 8001310:	d402      	bmi.n	8001318 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	43ba      	bics	r2, r7
 8001316:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001318:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800131a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800131c:	2b00      	cmp	r3, #0
 800131e:	d019      	beq.n	8001354 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8001320:	4798      	blx	r3
  return;
 8001322:	e017      	b.n	8001354 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001324:	2702      	movs	r7, #2
 8001326:	003e      	movs	r6, r7
 8001328:	4096      	lsls	r6, r2
 800132a:	4235      	tst	r5, r6
 800132c:	d013      	beq.n	8001356 <HAL_DMA_IRQHandler+0x68>
 800132e:	423c      	tst	r4, r7
 8001330:	d011      	beq.n	8001356 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	0692      	lsls	r2, r2, #26
 8001336:	d406      	bmi.n	8001346 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001338:	240a      	movs	r4, #10
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	43a2      	bics	r2, r4
 800133e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001340:	2201      	movs	r2, #1
 8001342:	1d83      	adds	r3, r0, #6
 8001344:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001346:	2200      	movs	r2, #0
 8001348:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800134a:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800134c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800134e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001350:	4293      	cmp	r3, r2
 8001352:	d1e5      	bne.n	8001320 <HAL_DMA_IRQHandler+0x32>
}
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001356:	2608      	movs	r6, #8
 8001358:	0037      	movs	r7, r6
 800135a:	4097      	lsls	r7, r2
 800135c:	423d      	tst	r5, r7
 800135e:	d0f9      	beq.n	8001354 <HAL_DMA_IRQHandler+0x66>
 8001360:	4234      	tst	r4, r6
 8001362:	d0f7      	beq.n	8001354 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001364:	250e      	movs	r5, #14
 8001366:	681c      	ldr	r4, [r3, #0]
 8001368:	43ac      	bics	r4, r5
 800136a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800136c:	2301      	movs	r3, #1
 800136e:	001c      	movs	r4, r3
 8001370:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001374:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001376:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001378:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800137a:	2200      	movs	r2, #0
 800137c:	1d43      	adds	r3, r0, #5
 800137e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001380:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001382:	e7e5      	b.n	8001350 <HAL_DMA_IRQHandler+0x62>

08001384 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8001384:	2300      	movs	r3, #0
{
 8001386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001388:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800138a:	680a      	ldr	r2, [r1, #0]
 800138c:	0014      	movs	r4, r2
 800138e:	40dc      	lsrs	r4, r3
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8001392:	b005      	add	sp, #20
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001396:	2501      	movs	r5, #1
 8001398:	0014      	movs	r4, r2
 800139a:	409d      	lsls	r5, r3
 800139c:	402c      	ands	r4, r5
 800139e:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 80013a0:	422a      	tst	r2, r5
 80013a2:	d100      	bne.n	80013a6 <HAL_GPIO_Init+0x22>
 80013a4:	e094      	b.n	80014d0 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a6:	684a      	ldr	r2, [r1, #4]
 80013a8:	005f      	lsls	r7, r3, #1
 80013aa:	4694      	mov	ip, r2
 80013ac:	2203      	movs	r2, #3
 80013ae:	4664      	mov	r4, ip
 80013b0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013b2:	2403      	movs	r4, #3
 80013b4:	40bc      	lsls	r4, r7
 80013b6:	43e4      	mvns	r4, r4
 80013b8:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ba:	1e54      	subs	r4, r2, #1
 80013bc:	2c01      	cmp	r4, #1
 80013be:	d82e      	bhi.n	800141e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80013c0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013c2:	9c01      	ldr	r4, [sp, #4]
 80013c4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c6:	68cc      	ldr	r4, [r1, #12]
 80013c8:	40bc      	lsls	r4, r7
 80013ca:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80013cc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80013ce:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d2:	43ac      	bics	r4, r5
 80013d4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	4664      	mov	r4, ip
 80013d8:	0924      	lsrs	r4, r4, #4
 80013da:	4034      	ands	r4, r6
 80013dc:	409c      	lsls	r4, r3
 80013de:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80013e0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80013e2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e4:	9c01      	ldr	r4, [sp, #4]
 80013e6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e8:	688c      	ldr	r4, [r1, #8]
 80013ea:	40bc      	lsls	r4, r7
 80013ec:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80013ee:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f0:	2a02      	cmp	r2, #2
 80013f2:	d116      	bne.n	8001422 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013f4:	2507      	movs	r5, #7
 80013f6:	260f      	movs	r6, #15
 80013f8:	401d      	ands	r5, r3
 80013fa:	00ad      	lsls	r5, r5, #2
 80013fc:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 80013fe:	08dc      	lsrs	r4, r3, #3
 8001400:	00a4      	lsls	r4, r4, #2
 8001402:	1904      	adds	r4, r0, r4
 8001404:	9402      	str	r4, [sp, #8]
 8001406:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001408:	9603      	str	r6, [sp, #12]
 800140a:	0026      	movs	r6, r4
 800140c:	9c03      	ldr	r4, [sp, #12]
 800140e:	43a6      	bics	r6, r4
 8001410:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001412:	690e      	ldr	r6, [r1, #16]
 8001414:	40ae      	lsls	r6, r5
 8001416:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001418:	9c02      	ldr	r4, [sp, #8]
 800141a:	6226      	str	r6, [r4, #32]
 800141c:	e001      	b.n	8001422 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141e:	2a03      	cmp	r2, #3
 8001420:	d1df      	bne.n	80013e2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001422:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001424:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001426:	9d01      	ldr	r5, [sp, #4]
 8001428:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800142c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800142e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	4662      	mov	r2, ip
 8001432:	02a4      	lsls	r4, r4, #10
 8001434:	4222      	tst	r2, r4
 8001436:	d04b      	beq.n	80014d0 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001438:	2501      	movs	r5, #1
 800143a:	4c26      	ldr	r4, [pc, #152]	@ (80014d4 <HAL_GPIO_Init+0x150>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800143c:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001440:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	432a      	orrs	r2, r5
 8001444:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a24      	ldr	r2, [pc, #144]	@ (80014d8 <HAL_GPIO_Init+0x154>)
 8001448:	089c      	lsrs	r4, r3, #2
 800144a:	00a4      	lsls	r4, r4, #2
 800144c:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800144e:	220f      	movs	r2, #15
 8001450:	3502      	adds	r5, #2
 8001452:	401d      	ands	r5, r3
 8001454:	00ad      	lsls	r5, r5, #2
 8001456:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8001458:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800145a:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800145c:	2200      	movs	r2, #0
 800145e:	42b8      	cmp	r0, r7
 8001460:	d00c      	beq.n	800147c <HAL_GPIO_Init+0xf8>
 8001462:	4f1e      	ldr	r7, [pc, #120]	@ (80014dc <HAL_GPIO_Init+0x158>)
 8001464:	3201      	adds	r2, #1
 8001466:	42b8      	cmp	r0, r7
 8001468:	d008      	beq.n	800147c <HAL_GPIO_Init+0xf8>
 800146a:	4f1d      	ldr	r7, [pc, #116]	@ (80014e0 <HAL_GPIO_Init+0x15c>)
 800146c:	3201      	adds	r2, #1
 800146e:	42b8      	cmp	r0, r7
 8001470:	d004      	beq.n	800147c <HAL_GPIO_Init+0xf8>
 8001472:	4a1c      	ldr	r2, [pc, #112]	@ (80014e4 <HAL_GPIO_Init+0x160>)
 8001474:	1882      	adds	r2, r0, r2
 8001476:	1e57      	subs	r7, r2, #1
 8001478:	41ba      	sbcs	r2, r7
 800147a:	3205      	adds	r2, #5
 800147c:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001480:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001482:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001484:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <HAL_GPIO_Init+0x164>)
        temp &= ~((uint32_t)iocurrent);
 8001486:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001488:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800148a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800148c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800148e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001490:	02ff      	lsls	r7, r7, #11
 8001492:	d401      	bmi.n	8001498 <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 8001494:	0035      	movs	r5, r6
 8001496:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800149a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800149c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800149e:	9d00      	ldr	r5, [sp, #0]
 80014a0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a2:	02bf      	lsls	r7, r7, #10
 80014a4:	d401      	bmi.n	80014aa <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 80014a6:	0035      	movs	r5, r6
 80014a8:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014aa:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80014ac:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80014ae:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80014b0:	9d00      	ldr	r5, [sp, #0]
 80014b2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b4:	03bf      	lsls	r7, r7, #14
 80014b6:	d401      	bmi.n	80014bc <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 80014b8:	0035      	movs	r5, r6
 80014ba:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014bc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80014be:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80014c0:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80014c2:	9e00      	ldr	r6, [sp, #0]
 80014c4:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c6:	03ff      	lsls	r7, r7, #15
 80014c8:	d401      	bmi.n	80014ce <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 80014ca:	4025      	ands	r5, r4
 80014cc:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80014ce:	6016      	str	r6, [r2, #0]
    position++;
 80014d0:	3301      	adds	r3, #1
 80014d2:	e75a      	b.n	800138a <HAL_GPIO_Init+0x6>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	50000400 	.word	0x50000400
 80014e0:	50000800 	.word	0x50000800
 80014e4:	afffe400 	.word	0xafffe400
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014f2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80014f4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80014f6:	e7fc      	b.n	80014f2 <HAL_GPIO_WritePin+0x6>

080014f8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014f8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80014fe:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001500:	4022      	ands	r2, r4
 8001502:	2a08      	cmp	r2, #8
 8001504:	d034      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x78>
 8001506:	2a0c      	cmp	r2, #12
 8001508:	d00c      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x2c>
 800150a:	2a04      	cmp	r2, #4
 800150c:	d128      	bne.n	8001560 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	2310      	movs	r3, #16
 8001512:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001514:	4243      	negs	r3, r0
 8001516:	4158      	adcs	r0, r3
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x80>)
 800151a:	4240      	negs	r0, r0
 800151c:	4018      	ands	r0, r3
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_RCC_GetSysClockFreq+0x84>)
 8001520:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001522:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001524:	02a2      	lsls	r2, r4, #10
 8001526:	4816      	ldr	r0, [pc, #88]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x88>)
 8001528:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800152a:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152c:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800152e:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001530:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001532:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001534:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001536:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001538:	4211      	tst	r1, r2
 800153a:	d009      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800153c:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_RCC_GetSysClockFreq+0x8c>)
 800153e:	2300      	movs	r3, #0
 8001540:	2100      	movs	r1, #0
 8001542:	f7fe ff89 	bl	8000458 <__aeabi_lmul>
 8001546:	0022      	movs	r2, r4
 8001548:	2300      	movs	r3, #0
 800154a:	f7fe ff65 	bl	8000418 <__aeabi_uldivmod>
 800154e:	e7e8      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2310      	movs	r3, #16
 8001554:	421a      	tst	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_RCC_GetSysClockFreq+0x84>)
 800155a:	e7f0      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_RCC_GetSysClockFreq+0x90>)
 800155e:	e7ee      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001560:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001562:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001564:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800156a:	3301      	adds	r3, #1
 800156c:	4098      	lsls	r0, r3
      break;
 800156e:	e7d8      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001572:	e7d6      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x2a>
 8001574:	40021000 	.word	0x40021000
 8001578:	00b71b00 	.word	0x00b71b00
 800157c:	003d0900 	.word	0x003d0900
 8001580:	08003e7a 	.word	0x08003e7a
 8001584:	007a1200 	.word	0x007a1200
 8001588:	00f42400 	.word	0x00f42400

0800158c <HAL_RCC_OscConfig>:
{
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	0005      	movs	r5, r0
 8001590:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8001592:	2800      	cmp	r0, #0
 8001594:	d055      	beq.n	8001642 <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001596:	230c      	movs	r3, #12
 8001598:	4cc0      	ldr	r4, [pc, #768]	@ (800189c <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	0019      	movs	r1, r3
 80015a8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	07d2      	lsls	r2, r2, #31
 80015ac:	d43d      	bmi.n	800162a <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	079b      	lsls	r3, r3, #30
 80015b2:	d500      	bpl.n	80015b6 <HAL_RCC_OscConfig+0x2a>
 80015b4:	e086      	b.n	80016c4 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	06db      	lsls	r3, r3, #27
 80015ba:	d528      	bpl.n	800160e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015bc:	2e00      	cmp	r6, #0
 80015be:	d000      	beq.n	80015c2 <HAL_RCC_OscConfig+0x36>
 80015c0:	e0df      	b.n	8001782 <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	059b      	lsls	r3, r3, #22
 80015c6:	d502      	bpl.n	80015ce <HAL_RCC_OscConfig+0x42>
 80015c8:	69ab      	ldr	r3, [r5, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d039      	beq.n	8001642 <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ce:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	49b3      	ldr	r1, [pc, #716]	@ (80018a0 <HAL_RCC_OscConfig+0x314>)
 80015d4:	6a2b      	ldr	r3, [r5, #32]
 80015d6:	400a      	ands	r2, r1
 80015d8:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015da:	0b5b      	lsrs	r3, r3, #13
 80015dc:	3301      	adds	r3, #1
 80015de:	023f      	lsls	r7, r7, #8
 80015e0:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e4:	6861      	ldr	r1, [r4, #4]
 80015e6:	69ea      	ldr	r2, [r5, #28]
 80015e8:	0209      	lsls	r1, r1, #8
 80015ea:	0a09      	lsrs	r1, r1, #8
 80015ec:	0612      	lsls	r2, r2, #24
 80015ee:	430a      	orrs	r2, r1
 80015f0:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015f2:	68e1      	ldr	r1, [r4, #12]
 80015f4:	48ab      	ldr	r0, [pc, #684]	@ (80018a4 <HAL_RCC_OscConfig+0x318>)
 80015f6:	060b      	lsls	r3, r1, #24
 80015f8:	0f1b      	lsrs	r3, r3, #28
 80015fa:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015fc:	4aaa      	ldr	r2, [pc, #680]	@ (80018a8 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015fe:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8001600:	4baa      	ldr	r3, [pc, #680]	@ (80018ac <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001602:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f7ff fd01 	bl	800100c <HAL_InitTick>
        if(status != HAL_OK)
 800160a:	2800      	cmp	r0, #0
 800160c:	d130      	bne.n	8001670 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	682b      	ldr	r3, [r5, #0]
 8001610:	071b      	lsls	r3, r3, #28
 8001612:	d500      	bpl.n	8001616 <HAL_RCC_OscConfig+0x8a>
 8001614:	e0ec      	b.n	80017f0 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	075b      	lsls	r3, r3, #29
 800161a:	d500      	bpl.n	800161e <HAL_RCC_OscConfig+0x92>
 800161c:	e10e      	b.n	800183c <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001620:	2b00      	cmp	r3, #0
 8001622:	d000      	beq.n	8001626 <HAL_RCC_OscConfig+0x9a>
 8001624:	e193      	b.n	800194e <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8001626:	2000      	movs	r0, #0
 8001628:	e022      	b.n	8001670 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800162a:	2e08      	cmp	r6, #8
 800162c:	d003      	beq.n	8001636 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800162e:	2e0c      	cmp	r6, #12
 8001630:	d109      	bne.n	8001646 <HAL_RCC_OscConfig+0xba>
 8001632:	2f00      	cmp	r7, #0
 8001634:	d007      	beq.n	8001646 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	039b      	lsls	r3, r3, #14
 800163a:	d5b8      	bpl.n	80015ae <HAL_RCC_OscConfig+0x22>
 800163c:	686b      	ldr	r3, [r5, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1b5      	bne.n	80015ae <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	686a      	ldr	r2, [r5, #4]
 8001648:	428a      	cmp	r2, r1
 800164a:	d113      	bne.n	8001674 <HAL_RCC_OscConfig+0xe8>
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fd1f 	bl	8001094 <HAL_GetTick>
 8001656:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001658:	2280      	movs	r2, #128	@ 0x80
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	0292      	lsls	r2, r2, #10
 800165e:	4213      	tst	r3, r2
 8001660:	d1a5      	bne.n	80015ae <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001662:	f7ff fd17 	bl	8001094 <HAL_GetTick>
 8001666:	9b00      	ldr	r3, [sp, #0]
 8001668:	1ac0      	subs	r0, r0, r3
 800166a:	2864      	cmp	r0, #100	@ 0x64
 800166c:	d9f4      	bls.n	8001658 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
}
 8001670:	b005      	add	sp, #20
 8001672:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001674:	21a0      	movs	r1, #160	@ 0xa0
 8001676:	02c9      	lsls	r1, r1, #11
 8001678:	428a      	cmp	r2, r1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0xfc>
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	6821      	ldr	r1, [r4, #0]
 8001680:	02d2      	lsls	r2, r2, #11
 8001682:	430a      	orrs	r2, r1
 8001684:	6022      	str	r2, [r4, #0]
 8001686:	e7e1      	b.n	800164c <HAL_RCC_OscConfig+0xc0>
 8001688:	6821      	ldr	r1, [r4, #0]
 800168a:	4889      	ldr	r0, [pc, #548]	@ (80018b0 <HAL_RCC_OscConfig+0x324>)
 800168c:	4001      	ands	r1, r0
 800168e:	6021      	str	r1, [r4, #0]
 8001690:	6821      	ldr	r1, [r4, #0]
 8001692:	400b      	ands	r3, r1
 8001694:	9303      	str	r3, [sp, #12]
 8001696:	9b03      	ldr	r3, [sp, #12]
 8001698:	4986      	ldr	r1, [pc, #536]	@ (80018b4 <HAL_RCC_OscConfig+0x328>)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	400b      	ands	r3, r1
 800169e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d1d6      	bne.n	8001652 <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 80016a4:	f7ff fcf6 	bl	8001094 <HAL_GetTick>
 80016a8:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	0292      	lsls	r2, r2, #10
 80016b0:	4213      	tst	r3, r2
 80016b2:	d100      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12a>
 80016b4:	e77b      	b.n	80015ae <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b6:	f7ff fced 	bl	8001094 <HAL_GetTick>
 80016ba:	9b00      	ldr	r3, [sp, #0]
 80016bc:	1ac0      	subs	r0, r0, r3
 80016be:	2864      	cmp	r0, #100	@ 0x64
 80016c0:	d9f3      	bls.n	80016aa <HAL_RCC_OscConfig+0x11e>
 80016c2:	e7d4      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80016c4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80016c6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80016c8:	4213      	tst	r3, r2
 80016ca:	d003      	beq.n	80016d4 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80016cc:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80016ce:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80016d0:	4311      	orrs	r1, r2
 80016d2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d4:	2e04      	cmp	r6, #4
 80016d6:	d003      	beq.n	80016e0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016d8:	2e0c      	cmp	r6, #12
 80016da:	d124      	bne.n	8001726 <HAL_RCC_OscConfig+0x19a>
 80016dc:	2f00      	cmp	r7, #0
 80016de:	d122      	bne.n	8001726 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016e0:	6822      	ldr	r2, [r4, #0]
 80016e2:	0752      	lsls	r2, r2, #29
 80016e4:	d501      	bpl.n	80016ea <HAL_RCC_OscConfig+0x15e>
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0ab      	beq.n	8001642 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	6861      	ldr	r1, [r4, #4]
 80016ec:	692a      	ldr	r2, [r5, #16]
 80016ee:	4872      	ldr	r0, [pc, #456]	@ (80018b8 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	0212      	lsls	r2, r2, #8
 80016f2:	4001      	ands	r1, r0
 80016f4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016f6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	438a      	bics	r2, r1
 80016fe:	4313      	orrs	r3, r2
 8001700:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001702:	f7ff fef9 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8001706:	68e3      	ldr	r3, [r4, #12]
 8001708:	4a66      	ldr	r2, [pc, #408]	@ (80018a4 <HAL_RCC_OscConfig+0x318>)
 800170a:	061b      	lsls	r3, r3, #24
 800170c:	0f1b      	lsrs	r3, r3, #28
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	4965      	ldr	r1, [pc, #404]	@ (80018a8 <HAL_RCC_OscConfig+0x31c>)
 8001712:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001714:	4b65      	ldr	r3, [pc, #404]	@ (80018ac <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001716:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f7ff fc77 	bl	800100c <HAL_InitTick>
      if(status != HAL_OK)
 800171e:	2800      	cmp	r0, #0
 8001720:	d100      	bne.n	8001724 <HAL_RCC_OscConfig+0x198>
 8001722:	e748      	b.n	80015b6 <HAL_RCC_OscConfig+0x2a>
 8001724:	e7a4      	b.n	8001670 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8001726:	2b00      	cmp	r3, #0
 8001728:	d019      	beq.n	800175e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800172a:	2109      	movs	r1, #9
 800172c:	6822      	ldr	r2, [r4, #0]
 800172e:	438a      	bics	r2, r1
 8001730:	4313      	orrs	r3, r2
 8001732:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001734:	f7ff fcae 	bl	8001094 <HAL_GetTick>
 8001738:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800173a:	2204      	movs	r2, #4
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	4213      	tst	r3, r2
 8001740:	d007      	beq.n	8001752 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	6862      	ldr	r2, [r4, #4]
 8001744:	692b      	ldr	r3, [r5, #16]
 8001746:	495c      	ldr	r1, [pc, #368]	@ (80018b8 <HAL_RCC_OscConfig+0x32c>)
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	400a      	ands	r2, r1
 800174c:	4313      	orrs	r3, r2
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	e731      	b.n	80015b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fc9f 	bl	8001094 <HAL_GetTick>
 8001756:	1bc0      	subs	r0, r0, r7
 8001758:	2802      	cmp	r0, #2
 800175a:	d9ee      	bls.n	800173a <HAL_RCC_OscConfig+0x1ae>
 800175c:	e787      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800175e:	2201      	movs	r2, #1
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	4393      	bics	r3, r2
 8001764:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001766:	f7ff fc95 	bl	8001094 <HAL_GetTick>
 800176a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176c:	2204      	movs	r2, #4
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	4213      	tst	r3, r2
 8001772:	d100      	bne.n	8001776 <HAL_RCC_OscConfig+0x1ea>
 8001774:	e71f      	b.n	80015b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fc8d 	bl	8001094 <HAL_GetTick>
 800177a:	1bc0      	subs	r0, r0, r7
 800177c:	2802      	cmp	r0, #2
 800177e:	d9f5      	bls.n	800176c <HAL_RCC_OscConfig+0x1e0>
 8001780:	e775      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001782:	69ab      	ldr	r3, [r5, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	6822      	ldr	r2, [r4, #0]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4313      	orrs	r3, r2
 8001790:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001792:	f7ff fc7f 	bl	8001094 <HAL_GetTick>
 8001796:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001798:	2280      	movs	r2, #128	@ 0x80
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4213      	tst	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a2:	6863      	ldr	r3, [r4, #4]
 80017a4:	4a3e      	ldr	r2, [pc, #248]	@ (80018a0 <HAL_RCC_OscConfig+0x314>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	6a2a      	ldr	r2, [r5, #32]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ae:	6862      	ldr	r2, [r4, #4]
 80017b0:	69eb      	ldr	r3, [r5, #28]
 80017b2:	0212      	lsls	r2, r2, #8
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	0a12      	lsrs	r2, r2, #8
 80017b8:	4313      	orrs	r3, r2
 80017ba:	6063      	str	r3, [r4, #4]
 80017bc:	e727      	b.n	800160e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017be:	f7ff fc69 	bl	8001094 <HAL_GetTick>
 80017c2:	1bc0      	subs	r0, r0, r7
 80017c4:	2802      	cmp	r0, #2
 80017c6:	d9e7      	bls.n	8001798 <HAL_RCC_OscConfig+0x20c>
 80017c8:	e751      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	4a3b      	ldr	r2, [pc, #236]	@ (80018bc <HAL_RCC_OscConfig+0x330>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017d2:	f7ff fc5f 	bl	8001094 <HAL_GetTick>
 80017d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4213      	tst	r3, r2
 80017e0:	d100      	bne.n	80017e4 <HAL_RCC_OscConfig+0x258>
 80017e2:	e714      	b.n	800160e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e4:	f7ff fc56 	bl	8001094 <HAL_GetTick>
 80017e8:	1bc0      	subs	r0, r0, r7
 80017ea:	2802      	cmp	r0, #2
 80017ec:	d9f4      	bls.n	80017d8 <HAL_RCC_OscConfig+0x24c>
 80017ee:	e73e      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f0:	696a      	ldr	r2, [r5, #20]
 80017f2:	2301      	movs	r3, #1
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	d010      	beq.n	800181a <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 80017f8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80017fa:	4313      	orrs	r3, r2
 80017fc:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80017fe:	f7ff fc49 	bl	8001094 <HAL_GetTick>
 8001802:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001804:	2202      	movs	r2, #2
 8001806:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001808:	4213      	tst	r3, r2
 800180a:	d000      	beq.n	800180e <HAL_RCC_OscConfig+0x282>
 800180c:	e703      	b.n	8001616 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fc41 	bl	8001094 <HAL_GetTick>
 8001812:	1bc0      	subs	r0, r0, r7
 8001814:	2802      	cmp	r0, #2
 8001816:	d9f5      	bls.n	8001804 <HAL_RCC_OscConfig+0x278>
 8001818:	e729      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 800181a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800181c:	439a      	bics	r2, r3
 800181e:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001820:	f7ff fc38 	bl	8001094 <HAL_GetTick>
 8001824:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001826:	2202      	movs	r2, #2
 8001828:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800182a:	4213      	tst	r3, r2
 800182c:	d100      	bne.n	8001830 <HAL_RCC_OscConfig+0x2a4>
 800182e:	e6f2      	b.n	8001616 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff fc30 	bl	8001094 <HAL_GetTick>
 8001834:	1bc0      	subs	r0, r0, r7
 8001836:	2802      	cmp	r0, #2
 8001838:	d9f5      	bls.n	8001826 <HAL_RCC_OscConfig+0x29a>
 800183a:	e718      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183c:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001840:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001842:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001844:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	421a      	tst	r2, r3
 8001848:	d104      	bne.n	8001854 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800184c:	4313      	orrs	r3, r2
 800184e:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8001850:	2301      	movs	r3, #1
 8001852:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	2280      	movs	r2, #128	@ 0x80
 8001856:	4f1a      	ldr	r7, [pc, #104]	@ (80018c0 <HAL_RCC_OscConfig+0x334>)
 8001858:	0052      	lsls	r2, r2, #1
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4213      	tst	r3, r2
 800185e:	d008      	beq.n	8001872 <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	68ab      	ldr	r3, [r5, #8]
 8001864:	0052      	lsls	r2, r2, #1
 8001866:	4293      	cmp	r3, r2
 8001868:	d12c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x338>
 800186a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800186c:	4313      	orrs	r3, r2
 800186e:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	e04d      	b.n	800190e <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	2280      	movs	r2, #128	@ 0x80
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	0052      	lsls	r2, r2, #1
 8001878:	4313      	orrs	r3, r2
 800187a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800187c:	f7ff fc0a 	bl	8001094 <HAL_GetTick>
 8001880:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	2280      	movs	r2, #128	@ 0x80
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	0052      	lsls	r2, r2, #1
 8001888:	4213      	tst	r3, r2
 800188a:	d1e9      	bne.n	8001860 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff fc02 	bl	8001094 <HAL_GetTick>
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	1ac0      	subs	r0, r0, r3
 8001894:	2864      	cmp	r0, #100	@ 0x64
 8001896:	d9f4      	bls.n	8001882 <HAL_RCC_OscConfig+0x2f6>
 8001898:	e6e9      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	40021000 	.word	0x40021000
 80018a0:	ffff1fff 	.word	0xffff1fff
 80018a4:	08003e8b 	.word	0x08003e8b
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008
 80018b0:	fffeffff 	.word	0xfffeffff
 80018b4:	fffbffff 	.word	0xfffbffff
 80018b8:	ffffe0ff 	.word	0xffffe0ff
 80018bc:	fffffeff 	.word	0xfffffeff
 80018c0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x36a>
 80018c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80018ca:	4a51      	ldr	r2, [pc, #324]	@ (8001a10 <HAL_RCC_OscConfig+0x484>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	6523      	str	r3, [r4, #80]	@ 0x50
 80018d0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80018d2:	4a50      	ldr	r2, [pc, #320]	@ (8001a14 <HAL_RCC_OscConfig+0x488>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80018d8:	f7ff fbdc 	bl	8001094 <HAL_GetTick>
 80018dc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4213      	tst	r3, r2
 80018e6:	d01a      	beq.n	800191e <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff fbd4 	bl	8001094 <HAL_GetTick>
 80018ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <HAL_RCC_OscConfig+0x48c>)
 80018ee:	1bc0      	subs	r0, r0, r7
 80018f0:	4298      	cmp	r0, r3
 80018f2:	d9f4      	bls.n	80018de <HAL_RCC_OscConfig+0x352>
 80018f4:	e6bb      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	21a0      	movs	r1, #160	@ 0xa0
 80018f8:	00c9      	lsls	r1, r1, #3
 80018fa:	428b      	cmp	r3, r1
 80018fc:	d118      	bne.n	8001930 <HAL_RCC_OscConfig+0x3a4>
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	430b      	orrs	r3, r1
 8001906:	6523      	str	r3, [r4, #80]	@ 0x50
 8001908:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800190a:	431a      	orrs	r2, r3
 800190c:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800190e:	f7ff fbc1 	bl	8001094 <HAL_GetTick>
 8001912:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001914:	2280      	movs	r2, #128	@ 0x80
 8001916:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4213      	tst	r3, r2
 800191c:	d010      	beq.n	8001940 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 800191e:	9b00      	ldr	r3, [sp, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d000      	beq.n	8001926 <HAL_RCC_OscConfig+0x39a>
 8001924:	e67b      	b.n	800161e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001928:	4a3c      	ldr	r2, [pc, #240]	@ (8001a1c <HAL_RCC_OscConfig+0x490>)
 800192a:	4013      	ands	r3, r2
 800192c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800192e:	e676      	b.n	800161e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001932:	4a37      	ldr	r2, [pc, #220]	@ (8001a10 <HAL_RCC_OscConfig+0x484>)
 8001934:	4013      	ands	r3, r2
 8001936:	6523      	str	r3, [r4, #80]	@ 0x50
 8001938:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800193a:	4a36      	ldr	r2, [pc, #216]	@ (8001a14 <HAL_RCC_OscConfig+0x488>)
 800193c:	4013      	ands	r3, r2
 800193e:	e796      	b.n	800186e <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fba8 	bl	8001094 <HAL_GetTick>
 8001944:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <HAL_RCC_OscConfig+0x48c>)
 8001946:	1bc0      	subs	r0, r0, r7
 8001948:	4298      	cmp	r0, r3
 800194a:	d9e3      	bls.n	8001914 <HAL_RCC_OscConfig+0x388>
 800194c:	e68f      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194e:	2e0c      	cmp	r6, #12
 8001950:	d043      	beq.n	80019da <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	4a33      	ldr	r2, [pc, #204]	@ (8001a20 <HAL_RCC_OscConfig+0x494>)
 8001954:	2b02      	cmp	r3, #2
 8001956:	d12e      	bne.n	80019b6 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8001958:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195a:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800195c:	4013      	ands	r3, r2
 800195e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001960:	f7ff fb98 	bl	8001094 <HAL_GetTick>
 8001964:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001966:	04bf      	lsls	r7, r7, #18
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	423b      	tst	r3, r7
 800196c:	d11d      	bne.n	80019aa <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196e:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001970:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001972:	68e2      	ldr	r2, [r4, #12]
 8001974:	430b      	orrs	r3, r1
 8001976:	492b      	ldr	r1, [pc, #172]	@ (8001a24 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001978:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197a:	400a      	ands	r2, r1
 800197c:	4313      	orrs	r3, r2
 800197e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001980:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001982:	4313      	orrs	r3, r2
 8001984:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	045b      	lsls	r3, r3, #17
 800198c:	4313      	orrs	r3, r2
 800198e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001990:	f7ff fb80 	bl	8001094 <HAL_GetTick>
 8001994:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	4233      	tst	r3, r6
 800199a:	d000      	beq.n	800199e <HAL_RCC_OscConfig+0x412>
 800199c:	e643      	b.n	8001626 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fb79 	bl	8001094 <HAL_GetTick>
 80019a2:	1b40      	subs	r0, r0, r5
 80019a4:	2802      	cmp	r0, #2
 80019a6:	d9f6      	bls.n	8001996 <HAL_RCC_OscConfig+0x40a>
 80019a8:	e661      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fb73 	bl	8001094 <HAL_GetTick>
 80019ae:	1b80      	subs	r0, r0, r6
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9d9      	bls.n	8001968 <HAL_RCC_OscConfig+0x3dc>
 80019b4:	e65b      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 80019b6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b8:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4013      	ands	r3, r2
 80019bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019be:	f7ff fb69 	bl	8001094 <HAL_GetTick>
 80019c2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019c4:	04b6      	lsls	r6, r6, #18
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	4233      	tst	r3, r6
 80019ca:	d100      	bne.n	80019ce <HAL_RCC_OscConfig+0x442>
 80019cc:	e62b      	b.n	8001626 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fb61 	bl	8001094 <HAL_GetTick>
 80019d2:	1b40      	subs	r0, r0, r5
 80019d4:	2802      	cmp	r0, #2
 80019d6:	d9f6      	bls.n	80019c6 <HAL_RCC_OscConfig+0x43a>
 80019d8:	e649      	b.n	800166e <HAL_RCC_OscConfig+0xe2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d100      	bne.n	80019e0 <HAL_RCC_OscConfig+0x454>
 80019de:	e630      	b.n	8001642 <HAL_RCC_OscConfig+0xb6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 80019e2:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	4003      	ands	r3, r0
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d000      	beq.n	80019f0 <HAL_RCC_OscConfig+0x464>
 80019ee:	e628      	b.n	8001642 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019f0:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019f4:	039b      	lsls	r3, r3, #14
 80019f6:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d000      	beq.n	80019fe <HAL_RCC_OscConfig+0x472>
 80019fc:	e621      	b.n	8001642 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019fe:	23c0      	movs	r3, #192	@ 0xc0
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a04:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001a06:	1ac0      	subs	r0, r0, r3
 8001a08:	1e43      	subs	r3, r0, #1
 8001a0a:	4198      	sbcs	r0, r3
 8001a0c:	b2c0      	uxtb	r0, r0
 8001a0e:	e62f      	b.n	8001670 <HAL_RCC_OscConfig+0xe4>
 8001a10:	fffffeff 	.word	0xfffffeff
 8001a14:	fffffbff 	.word	0xfffffbff
 8001a18:	00001388 	.word	0x00001388
 8001a1c:	efffffff 	.word	0xefffffff
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	ff02ffff 	.word	0xff02ffff

08001a28 <HAL_RCC_ClockConfig>:
{
 8001a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a2a:	1e04      	subs	r4, r0, #0
 8001a2c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001a30:	2001      	movs	r0, #1
}
 8001a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	2501      	movs	r5, #1
 8001a36:	4e5b      	ldr	r6, [pc, #364]	@ (8001ba4 <HAL_RCC_ClockConfig+0x17c>)
 8001a38:	9a01      	ldr	r2, [sp, #4]
 8001a3a:	6833      	ldr	r3, [r6, #0]
 8001a3c:	402b      	ands	r3, r5
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d331      	bcc.n	8001aa6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	0793      	lsls	r3, r2, #30
 8001a46:	d443      	bmi.n	8001ad0 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a48:	07d2      	lsls	r2, r2, #31
 8001a4a:	d449      	bmi.n	8001ae0 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	2501      	movs	r5, #1
 8001a4e:	6833      	ldr	r3, [r6, #0]
 8001a50:	9a01      	ldr	r2, [sp, #4]
 8001a52:	402b      	ands	r3, r5
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d909      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a58:	6833      	ldr	r3, [r6, #0]
 8001a5a:	43ab      	bics	r3, r5
 8001a5c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a5e:	f7ff fb19 	bl	8001094 <HAL_GetTick>
 8001a62:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a64:	6833      	ldr	r3, [r6, #0]
 8001a66:	422b      	tst	r3, r5
 8001a68:	d000      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x44>
 8001a6a:	e08c      	b.n	8001b86 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	4d4e      	ldr	r5, [pc, #312]	@ (8001ba8 <HAL_RCC_ClockConfig+0x180>)
 8001a70:	0753      	lsls	r3, r2, #29
 8001a72:	d500      	bpl.n	8001a76 <HAL_RCC_ClockConfig+0x4e>
 8001a74:	e08f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	0712      	lsls	r2, r2, #28
 8001a78:	d506      	bpl.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	68ea      	ldr	r2, [r5, #12]
 8001a7c:	6923      	ldr	r3, [r4, #16]
 8001a7e:	494b      	ldr	r1, [pc, #300]	@ (8001bac <HAL_RCC_ClockConfig+0x184>)
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	400a      	ands	r2, r1
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a88:	f7ff fd36 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8001a8c:	68eb      	ldr	r3, [r5, #12]
 8001a8e:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <HAL_RCC_ClockConfig+0x188>)
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	0f1b      	lsrs	r3, r3, #28
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	4947      	ldr	r1, [pc, #284]	@ (8001bb4 <HAL_RCC_ClockConfig+0x18c>)
 8001a98:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9c:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f7ff fab4 	bl	800100c <HAL_InitTick>
  if(status != HAL_OK)
 8001aa4:	e7c5      	b.n	8001a32 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	6833      	ldr	r3, [r6, #0]
 8001aa8:	9a01      	ldr	r2, [sp, #4]
 8001aaa:	43ab      	bics	r3, r5
 8001aac:	4313      	orrs	r3, r2
 8001aae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ab0:	f7ff faf0 	bl	8001094 <HAL_GetTick>
 8001ab4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	6833      	ldr	r3, [r6, #0]
 8001ab8:	9a01      	ldr	r2, [sp, #4]
 8001aba:	402b      	ands	r3, r5
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d0c0      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff fae8 	bl	8001094 <HAL_GetTick>
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bbc <HAL_RCC_ClockConfig+0x194>)
 8001ac6:	1bc0      	subs	r0, r0, r7
 8001ac8:	4298      	cmp	r0, r3
 8001aca:	d9f4      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
 8001ace:	e7b0      	b.n	8001a32 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	20f0      	movs	r0, #240	@ 0xf0
 8001ad2:	4935      	ldr	r1, [pc, #212]	@ (8001ba8 <HAL_RCC_ClockConfig+0x180>)
 8001ad4:	68cb      	ldr	r3, [r1, #12]
 8001ad6:	4383      	bics	r3, r0
 8001ad8:	68a0      	ldr	r0, [r4, #8]
 8001ada:	4303      	orrs	r3, r0
 8001adc:	60cb      	str	r3, [r1, #12]
 8001ade:	e7b3      	b.n	8001a48 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	4d31      	ldr	r5, [pc, #196]	@ (8001ba8 <HAL_RCC_ClockConfig+0x180>)
 8001ae2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	2a02      	cmp	r2, #2
 8001ae8:	d118      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aea:	039b      	lsls	r3, r3, #14
 8001aec:	d5a0      	bpl.n	8001a30 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	2103      	movs	r1, #3
 8001af0:	68eb      	ldr	r3, [r5, #12]
 8001af2:	438b      	bics	r3, r1
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001af8:	f7ff facc 	bl	8001094 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001afe:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d118      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	220c      	movs	r2, #12
 8001b06:	68eb      	ldr	r3, [r5, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d09e      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7ff fac1 	bl	8001094 <HAL_GetTick>
 8001b12:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_RCC_ClockConfig+0x194>)
 8001b14:	1bc0      	subs	r0, r0, r7
 8001b16:	4298      	cmp	r0, r3
 8001b18:	d9f4      	bls.n	8001b04 <HAL_RCC_ClockConfig+0xdc>
 8001b1a:	e7d7      	b.n	8001acc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	2a03      	cmp	r2, #3
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b20:	019b      	lsls	r3, r3, #6
 8001b22:	d4e4      	bmi.n	8001aee <HAL_RCC_ClockConfig+0xc6>
 8001b24:	e784      	b.n	8001a30 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b26:	2a01      	cmp	r2, #1
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	075b      	lsls	r3, r3, #29
 8001b2c:	d4df      	bmi.n	8001aee <HAL_RCC_ClockConfig+0xc6>
 8001b2e:	e77f      	b.n	8001a30 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b30:	059b      	lsls	r3, r3, #22
 8001b32:	d4dc      	bmi.n	8001aee <HAL_RCC_ClockConfig+0xc6>
 8001b34:	e77c      	b.n	8001a30 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	68eb      	ldr	r3, [r5, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d083      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff faa6 	bl	8001094 <HAL_GetTick>
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_RCC_ClockConfig+0x194>)
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	4298      	cmp	r0, r3
 8001b4e:	d9f4      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x112>
 8001b50:	e7bc      	b.n	8001acc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d011      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b56:	220c      	movs	r2, #12
 8001b58:	68eb      	ldr	r3, [r5, #12]
 8001b5a:	4213      	tst	r3, r2
 8001b5c:	d100      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x138>
 8001b5e:	e775      	b.n	8001a4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff fa98 	bl	8001094 <HAL_GetTick>
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_RCC_ClockConfig+0x194>)
 8001b66:	1bc0      	subs	r0, r0, r7
 8001b68:	4298      	cmp	r0, r3
 8001b6a:	d9f4      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x12e>
 8001b6c:	e7ae      	b.n	8001acc <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff fa91 	bl	8001094 <HAL_GetTick>
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_RCC_ClockConfig+0x194>)
 8001b74:	1bc0      	subs	r0, r0, r7
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d8a8      	bhi.n	8001acc <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	68eb      	ldr	r3, [r5, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1f4      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x146>
 8001b84:	e762      	b.n	8001a4c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff fa85 	bl	8001094 <HAL_GetTick>
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_RCC_ClockConfig+0x194>)
 8001b8c:	1bc0      	subs	r0, r0, r7
 8001b8e:	4298      	cmp	r0, r3
 8001b90:	d800      	bhi.n	8001b94 <HAL_RCC_ClockConfig+0x16c>
 8001b92:	e767      	b.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
 8001b94:	e79a      	b.n	8001acc <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b96:	68eb      	ldr	r3, [r5, #12]
 8001b98:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x198>)
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	68e1      	ldr	r1, [r4, #12]
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	60eb      	str	r3, [r5, #12]
 8001ba2:	e768      	b.n	8001a76 <HAL_RCC_ClockConfig+0x4e>
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	ffffc7ff 	.word	0xffffc7ff
 8001bb0:	08003e8b 	.word	0x08003e8b
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	00001388 	.word	0x00001388
 8001bc0:	fffff8ff 	.word	0xfffff8ff

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001bc6:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4905      	ldr	r1, [pc, #20]	@ (8001be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bcc:	055b      	lsls	r3, r3, #21
 8001bce:	0f5b      	lsrs	r3, r3, #29
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	6810      	ldr	r0, [r2, #0]
 8001bd4:	40d8      	lsrs	r0, r3
}
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	08003e83 	.word	0x08003e83

08001be4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001be4:	6803      	ldr	r3, [r0, #0]
{
 8001be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001be8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	d52b      	bpl.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bee:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4c51      	ldr	r4, [pc, #324]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001bf4:	055b      	lsls	r3, r3, #21
 8001bf6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001bf8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	421a      	tst	r2, r3
 8001bfc:	d104      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c00:	4313      	orrs	r3, r2
 8001c02:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	2780      	movs	r7, #128	@ 0x80
 8001c0a:	4e4c      	ldr	r6, [pc, #304]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001c0c:	007f      	lsls	r7, r7, #1
 8001c0e:	6833      	ldr	r3, [r6, #0]
 8001c10:	423b      	tst	r3, r7
 8001c12:	d038      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c14:	20c0      	movs	r0, #192	@ 0xc0
 8001c16:	22c0      	movs	r2, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c18:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c1a:	686b      	ldr	r3, [r5, #4]
 8001c1c:	0380      	lsls	r0, r0, #14
 8001c1e:	4059      	eors	r1, r3
 8001c20:	0292      	lsls	r2, r2, #10
 8001c22:	4201      	tst	r1, r0
 8001c24:	d140      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c26:	6d20      	ldr	r0, [r4, #80]	@ 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c28:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c2a:	0006      	movs	r6, r0
 8001c2c:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c2e:	4210      	tst	r0, r2
 8001c30:	d143      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	069b      	lsls	r3, r3, #26
 8001c36:	d454      	bmi.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c38:	9b00      	ldr	r3, [sp, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d103      	bne.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c40:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c46:	682b      	ldr	r3, [r5, #0]
 8001c48:	079a      	lsls	r2, r3, #30
 8001c4a:	d506      	bpl.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c4c:	200c      	movs	r0, #12
 8001c4e:	493a      	ldr	r1, [pc, #232]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c50:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001c52:	4382      	bics	r2, r0
 8001c54:	68a8      	ldr	r0, [r5, #8]
 8001c56:	4302      	orrs	r2, r0
 8001c58:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c5a:	075a      	lsls	r2, r3, #29
 8001c5c:	d506      	bpl.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c5e:	4936      	ldr	r1, [pc, #216]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c60:	4838      	ldr	r0, [pc, #224]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c62:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001c64:	4002      	ands	r2, r0
 8001c66:	68e8      	ldr	r0, [r5, #12]
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6c:	071a      	lsls	r2, r3, #28
 8001c6e:	d506      	bpl.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c70:	4931      	ldr	r1, [pc, #196]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c72:	4835      	ldr	r0, [pc, #212]	@ (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c74:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001c76:	4002      	ands	r2, r0
 8001c78:	6928      	ldr	r0, [r5, #16]
 8001c7a:	4302      	orrs	r2, r0
 8001c7c:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c7e:	061b      	lsls	r3, r3, #24
 8001c80:	d452      	bmi.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001c82:	2000      	movs	r0, #0
 8001c84:	e00f      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c86:	6833      	ldr	r3, [r6, #0]
 8001c88:	433b      	orrs	r3, r7
 8001c8a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fa02 	bl	8001094 <HAL_GetTick>
 8001c90:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	6833      	ldr	r3, [r6, #0]
 8001c94:	423b      	tst	r3, r7
 8001c96:	d1bd      	bne.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7ff f9fc 	bl	8001094 <HAL_GetTick>
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	1ac0      	subs	r0, r0, r3
 8001ca0:	2864      	cmp	r0, #100	@ 0x64
 8001ca2:	d9f6      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0xae>
          return HAL_TIMEOUT;
 8001ca4:	2003      	movs	r0, #3
}
 8001ca6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ca8:	0019      	movs	r1, r3
 8001caa:	4011      	ands	r1, r2
 8001cac:	4291      	cmp	r1, r2
 8001cae:	d1ba      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001cb0:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001cb4:	0389      	lsls	r1, r1, #14
 8001cb6:	d5b6      	bpl.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001cb8:	e7f5      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cba:	4013      	ands	r3, r2
 8001cbc:	42b3      	cmp	r3, r6
 8001cbe:	d0b8      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cc0:	0689      	lsls	r1, r1, #26
 8001cc2:	d5b9      	bpl.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc4:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cc6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001cca:	0309      	lsls	r1, r1, #12
 8001ccc:	4301      	orrs	r1, r0
 8001cce:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd4:	481e      	ldr	r0, [pc, #120]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cd6:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd8:	4001      	ands	r1, r0
 8001cda:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8001cdc:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	d412      	bmi.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x124>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce2:	6869      	ldr	r1, [r5, #4]
 8001ce4:	23c0      	movs	r3, #192	@ 0xc0
 8001ce6:	000a      	movs	r2, r1
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	401a      	ands	r2, r3
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d107      	bne.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	4818      	ldr	r0, [pc, #96]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001cf4:	4003      	ands	r3, r0
 8001cf6:	20c0      	movs	r0, #192	@ 0xc0
 8001cf8:	0380      	lsls	r0, r0, #14
 8001cfa:	4001      	ands	r1, r0
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6023      	str	r3, [r4, #0]
 8001d00:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6522      	str	r2, [r4, #80]	@ 0x50
 8001d06:	e797      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8001d08:	f7ff f9c4 	bl	8001094 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d0c:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001d0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d10:	00bf      	lsls	r7, r7, #2
 8001d12:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d14:	423b      	tst	r3, r7
 8001d16:	d000      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001d18:	e78b      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f9bb 	bl	8001094 <HAL_GetTick>
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	4298      	cmp	r0, r3
 8001d24:	d9f5      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001d26:	e7bd      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d28:	4a03      	ldr	r2, [pc, #12]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d2a:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001d2c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001d2e:	400b      	ands	r3, r1
 8001d30:	6969      	ldr	r1, [r5, #20]
 8001d32:	430b      	orrs	r3, r1
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	e7a4      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	efffffff 	.word	0xefffffff
 8001d44:	fffff3ff 	.word	0xfffff3ff
 8001d48:	ffffcfff 	.word	0xffffcfff
 8001d4c:	fffcffff 	.word	0xfffcffff
 8001d50:	fff7ffff 	.word	0xfff7ffff
 8001d54:	ffcfffff 	.word	0xffcfffff
 8001d58:	00001388 	.word	0x00001388
 8001d5c:	fff3ffff 	.word	0xfff3ffff

08001d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d60:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d62:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d66:	2201      	movs	r2, #1
 8001d68:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d6c:	6801      	ldr	r1, [r0, #0]
 8001d6e:	4d12      	ldr	r5, [pc, #72]	@ (8001db8 <UART_EndRxTransfer+0x58>)
 8001d70:	680b      	ldr	r3, [r1, #0]
 8001d72:	402b      	ands	r3, r5
 8001d74:	600b      	str	r3, [r1, #0]
 8001d76:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d7e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d82:	6801      	ldr	r1, [r0, #0]
 8001d84:	688b      	ldr	r3, [r1, #8]
 8001d86:	4393      	bics	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
 8001d8a:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d8e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d10a      	bne.n	8001daa <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d98:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d9c:	2410      	movs	r4, #16
 8001d9e:	6802      	ldr	r2, [r0, #0]
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	43a3      	bics	r3, r4
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001daa:	2220      	movs	r2, #32
 8001dac:	1d03      	adds	r3, r0, #4
 8001dae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db0:	2300      	movs	r3, #0
 8001db2:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001db4:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8001db6:	bd30      	pop	{r4, r5, pc}
 8001db8:	fffffedf 	.word	0xfffffedf

08001dbc <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8001dbc:	4770      	bx	lr

08001dbe <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8001dc2:	4770      	bx	lr

08001dc4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001dc6:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001dc8:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001dca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001dcc:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	061b      	lsls	r3, r3, #24
 8001dd4:	d513      	bpl.n	8001dfe <UART_DMAError+0x3a>
 8001dd6:	2a21      	cmp	r2, #33	@ 0x21
 8001dd8:	d111      	bne.n	8001dfe <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8001dda:	0023      	movs	r3, r4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	3352      	adds	r3, #82	@ 0x52
 8001de0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de6:	2301      	movs	r3, #1
 8001de8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001dec:	25c0      	movs	r5, #192	@ 0xc0
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	43ab      	bics	r3, r5
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	67e3      	str	r3, [r4, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	065b      	lsls	r3, r3, #25
 8001e04:	d508      	bpl.n	8001e18 <UART_DMAError+0x54>
 8001e06:	2922      	cmp	r1, #34	@ 0x22
 8001e08:	d106      	bne.n	8001e18 <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8001e0a:	0023      	movs	r3, r4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 8001e10:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8001e12:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8001e14:	f7ff ffa4 	bl	8001d60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e18:	0022      	movs	r2, r4
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e20:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e22:	430b      	orrs	r3, r1
 8001e24:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 8001e26:	f7ff ffcc 	bl	8001dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}

08001e2c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e2c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	0002      	movs	r2, r0
{
 8001e32:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001e34:	325a      	adds	r2, #90	@ 0x5a
 8001e36:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001e38:	3a08      	subs	r2, #8
 8001e3a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e3c:	f7ff ffc1 	bl	8001dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e40:	bd10      	pop	{r4, pc}
	...

08001e44 <HAL_UART_IRQHandler>:
{
 8001e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e46:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e48:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e4a:	4bab      	ldr	r3, [pc, #684]	@ (80020f8 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e4c:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e4e:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e50:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8001e52:	4219      	tst	r1, r3
 8001e54:	d10b      	bne.n	8001e6e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e56:	2320      	movs	r3, #32
 8001e58:	4219      	tst	r1, r3
 8001e5a:	d100      	bne.n	8001e5e <HAL_UART_IRQHandler+0x1a>
 8001e5c:	e080      	b.n	8001f60 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e5e:	421e      	tst	r6, r3
 8001e60:	d100      	bne.n	8001e64 <HAL_UART_IRQHandler+0x20>
 8001e62:	e07d      	b.n	8001f60 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8001e64:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 8001e66:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d16f      	bne.n	8001f4c <HAL_UART_IRQHandler+0x108>
 8001e6c:	e06f      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e6e:	2301      	movs	r3, #1
 8001e70:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e72:	4aa2      	ldr	r2, [pc, #648]	@ (80020fc <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e74:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e76:	4032      	ands	r2, r6
 8001e78:	433a      	orrs	r2, r7
 8001e7a:	d100      	bne.n	8001e7e <HAL_UART_IRQHandler+0x3a>
 8001e7c:	e070      	b.n	8001f60 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e7e:	0025      	movs	r5, r4
 8001e80:	3508      	adds	r5, #8
 8001e82:	4219      	tst	r1, r3
 8001e84:	d005      	beq.n	8001e92 <HAL_UART_IRQHandler+0x4e>
 8001e86:	05f2      	lsls	r2, r6, #23
 8001e88:	d503      	bpl.n	8001e92 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e8a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e8c:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e92:	2302      	movs	r3, #2
 8001e94:	4219      	tst	r1, r3
 8001e96:	d006      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x62>
 8001e98:	2f00      	cmp	r7, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e9c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e9e:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001ea0:	18db      	adds	r3, r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	4219      	tst	r1, r3
 8001eaa:	d006      	beq.n	8001eba <HAL_UART_IRQHandler+0x76>
 8001eac:	2f00      	cmp	r7, #0
 8001eae:	d004      	beq.n	8001eba <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001eb0:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eb2:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001eb4:	3b02      	subs	r3, #2
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001eba:	2308      	movs	r3, #8
 8001ebc:	4219      	tst	r1, r3
 8001ebe:	d007      	beq.n	8001ed0 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	4032      	ands	r2, r6
 8001ec4:	433a      	orrs	r2, r7
 8001ec6:	d003      	beq.n	8001ed0 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ec8:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eca:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4219      	tst	r1, r3
 8001ed6:	d006      	beq.n	8001ee6 <HAL_UART_IRQHandler+0xa2>
 8001ed8:	0172      	lsls	r2, r6, #5
 8001eda:	d504      	bpl.n	8001ee6 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001edc:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ede:	2320      	movs	r3, #32
 8001ee0:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ee6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d030      	beq.n	8001f4e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001eec:	2320      	movs	r3, #32
 8001eee:	4219      	tst	r1, r3
 8001ef0:	d006      	beq.n	8001f00 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ef2:	421e      	tst	r6, r3
 8001ef4:	d004      	beq.n	8001f00 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8001ef6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8001efc:	0020      	movs	r0, r4
 8001efe:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f00:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8001f02:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f04:	2740      	movs	r7, #64	@ 0x40
 8001f06:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f08:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f0a:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f0c:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8001f0e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f10:	431e      	orrs	r6, r3
 8001f12:	d021      	beq.n	8001f58 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8001f14:	f7ff ff24 	bl	8001d60 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	423b      	tst	r3, r7
 8001f1e:	d017      	beq.n	8001f50 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f24:	2301      	movs	r3, #1
 8001f26:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	6893      	ldr	r3, [r2, #8]
 8001f2e:	43bb      	bics	r3, r7
 8001f30:	6093      	str	r3, [r2, #8]
 8001f32:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8001f36:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f3c:	4b70      	ldr	r3, [pc, #448]	@ (8002100 <HAL_UART_IRQHandler+0x2bc>)
 8001f3e:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f40:	f7ff f9b2 	bl	80012a8 <HAL_DMA_Abort_IT>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f48:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8001f4a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001f4c:	4798      	blx	r3
}
 8001f4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001f50:	0020      	movs	r0, r4
 8001f52:	f7ff ff36 	bl	8001dc2 <HAL_UART_ErrorCallback>
 8001f56:	e7fa      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8001f58:	f7ff ff33 	bl	8001dc2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5c:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8001f5e:	e7f6      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f60:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d000      	beq.n	8001f68 <HAL_UART_IRQHandler+0x124>
 8001f66:	e09a      	b.n	800209e <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4211      	tst	r1, r2
 8001f6c:	d100      	bne.n	8001f70 <HAL_UART_IRQHandler+0x12c>
 8001f6e:	e096      	b.n	800209e <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001f70:	4216      	tst	r6, r2
 8001f72:	d100      	bne.n	8001f76 <HAL_UART_IRQHandler+0x132>
 8001f74:	e093      	b.n	800209e <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001f76:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	6881      	ldr	r1, [r0, #8]
 8001f7a:	2640      	movs	r6, #64	@ 0x40
 8001f7c:	000f      	movs	r7, r1
 8001f7e:	4037      	ands	r7, r6
 8001f80:	4231      	tst	r1, r6
 8001f82:	d053      	beq.n	800202c <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f84:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8001f86:	6808      	ldr	r0, [r1, #0]
 8001f88:	6841      	ldr	r1, [r0, #4]
 8001f8a:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8001f8c:	2900      	cmp	r1, #0
 8001f8e:	d0de      	beq.n	8001f4e <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f90:	0025      	movs	r5, r4
 8001f92:	3558      	adds	r5, #88	@ 0x58
 8001f94:	882d      	ldrh	r5, [r5, #0]
 8001f96:	428d      	cmp	r5, r1
 8001f98:	d9d9      	bls.n	8001f4e <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8001f9a:	0025      	movs	r5, r4
 8001f9c:	355a      	adds	r5, #90	@ 0x5a
 8001f9e:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001fa0:	6801      	ldr	r1, [r0, #0]
 8001fa2:	2020      	movs	r0, #32
 8001fa4:	000d      	movs	r5, r1
 8001fa6:	4005      	ands	r5, r0
 8001fa8:	9501      	str	r5, [sp, #4]
 8001faa:	4201      	tst	r1, r0
 8001fac:	d130      	bne.n	8002010 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fae:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fb6:	6825      	ldr	r5, [r4, #0]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	@ (8002104 <HAL_UART_IRQHandler+0x2c0>)
 8001fba:	6829      	ldr	r1, [r5, #0]
 8001fbc:	4011      	ands	r1, r2
 8001fbe:	6029      	str	r1, [r5, #0]
 8001fc0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fcc:	6825      	ldr	r5, [r4, #0]
 8001fce:	68a9      	ldr	r1, [r5, #8]
 8001fd0:	4399      	bics	r1, r3
 8001fd2:	60a9      	str	r1, [r5, #8]
 8001fd4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fdc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fe0:	0021      	movs	r1, r4
 8001fe2:	c980      	ldmia	r1!, {r7}
 8001fe4:	68bd      	ldr	r5, [r7, #8]
 8001fe6:	43b5      	bics	r5, r6
 8001fe8:	60bd      	str	r5, [r7, #8]
 8001fea:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fee:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8001ff0:	67c8      	str	r0, [r1, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff2:	6622      	str	r2, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	6821      	ldr	r1, [r4, #0]
 8002000:	680b      	ldr	r3, [r1, #0]
 8002002:	4393      	bics	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
 8002006:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800200a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800200c:	f7ff f92c 	bl	8001268 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002010:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002012:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002014:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002016:	0023      	movs	r3, r4
 8002018:	3258      	adds	r2, #88	@ 0x58
 800201a:	335a      	adds	r3, #90	@ 0x5a
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	8811      	ldrh	r1, [r2, #0]
 8002020:	1ac9      	subs	r1, r1, r3
 8002022:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002024:	0020      	movs	r0, r4
 8002026:	f7fe ffb1 	bl	8000f8c <HAL_UARTEx_RxEventCallback>
 800202a:	e790      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800202c:	0025      	movs	r5, r4
 800202e:	0021      	movs	r1, r4
 8002030:	355a      	adds	r5, #90	@ 0x5a
 8002032:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8002034:	882d      	ldrh	r5, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002036:	3158      	adds	r1, #88	@ 0x58
 8002038:	8809      	ldrh	r1, [r1, #0]
 800203a:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800203c:	2d00      	cmp	r5, #0
 800203e:	d100      	bne.n	8002042 <HAL_UART_IRQHandler+0x1fe>
 8002040:	e785      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002042:	1a09      	subs	r1, r1, r0
 8002044:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002046:	2900      	cmp	r1, #0
 8002048:	d100      	bne.n	800204c <HAL_UART_IRQHandler+0x208>
 800204a:	e780      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002050:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002054:	6825      	ldr	r5, [r4, #0]
 8002056:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <HAL_UART_IRQHandler+0x2c4>)
 8002058:	6828      	ldr	r0, [r5, #0]
 800205a:	4010      	ands	r0, r2
 800205c:	6028      	str	r0, [r5, #0]
 800205e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002062:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002066:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206a:	0020      	movs	r0, r4
 800206c:	c840      	ldmia	r0!, {r6}
 800206e:	68b5      	ldr	r5, [r6, #8]
 8002070:	439d      	bics	r5, r3
 8002072:	60b5      	str	r5, [r6, #8]
 8002074:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8002078:	2520      	movs	r5, #32
 800207a:	67c5      	str	r5, [r0, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800207c:	6627      	str	r7, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 800207e:	66a7      	str	r7, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002080:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002084:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	3232      	adds	r2, #50	@ 0x32
 800208c:	6803      	ldr	r3, [r0, #0]
 800208e:	32ff      	adds	r2, #255	@ 0xff
 8002090:	4393      	bics	r3, r2
 8002092:	6003      	str	r3, [r0, #0]
 8002094:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002098:	2302      	movs	r3, #2
 800209a:	6663      	str	r3, [r4, #100]	@ 0x64
 800209c:	e7c2      	b.n	8002024 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	035b      	lsls	r3, r3, #13
 80020a2:	4219      	tst	r1, r3
 80020a4:	d006      	beq.n	80020b4 <HAL_UART_IRQHandler+0x270>
 80020a6:	026d      	lsls	r5, r5, #9
 80020a8:	d504      	bpl.n	80020b4 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80020aa:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80020ac:	0020      	movs	r0, r4
 80020ae:	f000 fb69 	bl	8002784 <HAL_UARTEx_WakeupCallback>
    return;
 80020b2:	e74c      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	4219      	tst	r1, r3
 80020b8:	d003      	beq.n	80020c2 <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80020ba:	421e      	tst	r6, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 80020be:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80020c0:	e6d1      	b.n	8001e66 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80020c2:	2240      	movs	r2, #64	@ 0x40
 80020c4:	4211      	tst	r1, r2
 80020c6:	d100      	bne.n	80020ca <HAL_UART_IRQHandler+0x286>
 80020c8:	e741      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
 80020ca:	4216      	tst	r6, r2
 80020cc:	d100      	bne.n	80020d0 <HAL_UART_IRQHandler+0x28c>
 80020ce:	e73e      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d4:	2301      	movs	r3, #1
 80020d6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020da:	6821      	ldr	r1, [r4, #0]
 80020dc:	680b      	ldr	r3, [r1, #0]
 80020de:	4393      	bics	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
 80020e2:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020e6:	2320      	movs	r3, #32
 80020e8:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80020ea:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020ec:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80020ee:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 80020f0:	f7ff fe64 	bl	8001dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020f4:	e72b      	b.n	8001f4e <HAL_UART_IRQHandler+0x10a>
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	0000080f 	.word	0x0000080f
 80020fc:	04000120 	.word	0x04000120
 8002100:	08001e2d 	.word	0x08001e2d
 8002104:	fffffeff 	.word	0xfffffeff
 8002108:	fffffedf 	.word	0xfffffedf

0800210c <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800210c:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800210e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002110:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002112:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002114:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800211a:	0003      	movs	r3, r0
 800211c:	3358      	adds	r3, #88	@ 0x58
 800211e:	8819      	ldrh	r1, [r3, #0]
 8002120:	0849      	lsrs	r1, r1, #1
 8002122:	f7fe ff33 	bl	8000f8c <HAL_UARTEx_RxEventCallback>
}
 8002126:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8002128:	f7ff fe4a 	bl	8001dc0 <HAL_UART_RxHalfCpltCallback>
}
 800212c:	e7fb      	b.n	8002126 <UART_DMARxHalfCplt+0x1a>
	...

08002130 <UART_DMAReceiveCplt>:
{
 8002130:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2220      	movs	r2, #32
 8002136:	681b      	ldr	r3, [r3, #0]
{
 8002138:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800213a:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800213c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800213e:	4011      	ands	r1, r2
 8002140:	4213      	tst	r3, r2
 8002142:	d134      	bne.n	80021ae <UART_DMAReceiveCplt+0x7e>
    huart->RxXferCount = 0U;
 8002144:	0003      	movs	r3, r0
 8002146:	335a      	adds	r3, #90	@ 0x5a
 8002148:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214e:	2301      	movs	r3, #1
 8002150:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002154:	6804      	ldr	r4, [r0, #0]
 8002156:	4e1d      	ldr	r6, [pc, #116]	@ (80021cc <UART_DMAReceiveCplt+0x9c>)
 8002158:	6821      	ldr	r1, [r4, #0]
 800215a:	4031      	ands	r1, r6
 800215c:	6021      	str	r1, [r4, #0]
 800215e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002162:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002166:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216a:	6804      	ldr	r4, [r0, #0]
 800216c:	68a1      	ldr	r1, [r4, #8]
 800216e:	4399      	bics	r1, r3
 8002170:	60a1      	str	r1, [r4, #8]
 8002172:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002176:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800217e:	0003      	movs	r3, r0
 8002180:	cb10      	ldmia	r3!, {r4}
 8002182:	3642      	adds	r6, #66	@ 0x42
 8002184:	68a1      	ldr	r1, [r4, #8]
 8002186:	36ff      	adds	r6, #255	@ 0xff
 8002188:	43b1      	bics	r1, r6
 800218a:	60a1      	str	r1, [r4, #8]
 800218c:	f385 8810 	msr	PRIMASK, r5
    huart->RxState = HAL_UART_STATE_READY;
 8002190:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002192:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10a      	bne.n	80021ae <UART_DMAReceiveCplt+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002198:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a0:	2410      	movs	r4, #16
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	43a3      	bics	r3, r4
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ae:	2300      	movs	r3, #0
 80021b0:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <UART_DMAReceiveCplt+0x94>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021b8:	0003      	movs	r3, r0
 80021ba:	3358      	adds	r3, #88	@ 0x58
 80021bc:	8819      	ldrh	r1, [r3, #0]
 80021be:	f7fe fee5 	bl	8000f8c <HAL_UARTEx_RxEventCallback>
}
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 80021c4:	f7ff fdfb 	bl	8001dbe <HAL_UART_RxCpltCallback>
}
 80021c8:	e7fb      	b.n	80021c2 <UART_DMAReceiveCplt+0x92>
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	fffffeff 	.word	0xfffffeff

080021d0 <UART_SetConfig>:
{
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021d4:	6925      	ldr	r5, [r4, #16]
 80021d6:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80021d8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021da:	4329      	orrs	r1, r5
 80021dc:	6965      	ldr	r5, [r4, #20]
 80021de:	69c3      	ldr	r3, [r0, #28]
 80021e0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e2:	6810      	ldr	r0, [r2, #0]
 80021e4:	4d60      	ldr	r5, [pc, #384]	@ (8002368 <UART_SetConfig+0x198>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021e6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e8:	4028      	ands	r0, r5
 80021ea:	4301      	orrs	r1, r0
 80021ec:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ee:	6851      	ldr	r1, [r2, #4]
 80021f0:	485e      	ldr	r0, [pc, #376]	@ (800236c <UART_SetConfig+0x19c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021f2:	4d5f      	ldr	r5, [pc, #380]	@ (8002370 <UART_SetConfig+0x1a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f4:	4001      	ands	r1, r0
 80021f6:	68e0      	ldr	r0, [r4, #12]
 80021f8:	4301      	orrs	r1, r0
 80021fa:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021fc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021fe:	42aa      	cmp	r2, r5
 8002200:	d001      	beq.n	8002206 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002202:	6a21      	ldr	r1, [r4, #32]
 8002204:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002206:	6891      	ldr	r1, [r2, #8]
 8002208:	4e5a      	ldr	r6, [pc, #360]	@ (8002374 <UART_SetConfig+0x1a4>)
 800220a:	4031      	ands	r1, r6
 800220c:	4301      	orrs	r1, r0
 800220e:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002210:	4959      	ldr	r1, [pc, #356]	@ (8002378 <UART_SetConfig+0x1a8>)
 8002212:	428a      	cmp	r2, r1
 8002214:	d116      	bne.n	8002244 <UART_SetConfig+0x74>
 8002216:	200c      	movs	r0, #12
 8002218:	4958      	ldr	r1, [pc, #352]	@ (800237c <UART_SetConfig+0x1ac>)
 800221a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800221c:	4002      	ands	r2, r0
 800221e:	2a08      	cmp	r2, #8
 8002220:	d100      	bne.n	8002224 <UART_SetConfig+0x54>
 8002222:	e08a      	b.n	800233a <UART_SetConfig+0x16a>
 8002224:	d807      	bhi.n	8002236 <UART_SetConfig+0x66>
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <UART_SetConfig+0x5c>
 800222a:	e07d      	b.n	8002328 <UART_SetConfig+0x158>
 800222c:	2a04      	cmp	r2, #4
 800222e:	d100      	bne.n	8002232 <UART_SetConfig+0x62>
 8002230:	e073      	b.n	800231a <UART_SetConfig+0x14a>
          pclk = (uint32_t) HSI_VALUE;
 8002232:	2001      	movs	r0, #1
 8002234:	e047      	b.n	80022c6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002236:	2a0c      	cmp	r2, #12
 8002238:	d1fb      	bne.n	8002232 <UART_SetConfig+0x62>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800223a:	2080      	movs	r0, #128	@ 0x80
 800223c:	0200      	lsls	r0, r0, #8
 800223e:	4283      	cmp	r3, r0
 8002240:	d049      	beq.n	80022d6 <UART_SetConfig+0x106>
 8002242:	e088      	b.n	8002356 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002244:	42aa      	cmp	r2, r5
 8002246:	d1f4      	bne.n	8002232 <UART_SetConfig+0x62>
 8002248:	21c0      	movs	r1, #192	@ 0xc0
 800224a:	2080      	movs	r0, #128	@ 0x80
 800224c:	4a4b      	ldr	r2, [pc, #300]	@ (800237c <UART_SetConfig+0x1ac>)
 800224e:	0109      	lsls	r1, r1, #4
 8002250:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002252:	0100      	lsls	r0, r0, #4
 8002254:	400b      	ands	r3, r1
 8002256:	4283      	cmp	r3, r0
 8002258:	d00e      	beq.n	8002278 <UART_SetConfig+0xa8>
 800225a:	d808      	bhi.n	800226e <UART_SetConfig+0x9e>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d02d      	beq.n	80022bc <UART_SetConfig+0xec>
 8002260:	2280      	movs	r2, #128	@ 0x80
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	4293      	cmp	r3, r2
 8002266:	d1e4      	bne.n	8002232 <UART_SetConfig+0x62>
        pclk = HAL_RCC_GetSysClockFreq();
 8002268:	f7ff f946 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
        break;
 800226c:	e028      	b.n	80022c0 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800226e:	428b      	cmp	r3, r1
 8002270:	d1df      	bne.n	8002232 <UART_SetConfig+0x62>
 8002272:	2080      	movs	r0, #128	@ 0x80
 8002274:	0200      	lsls	r0, r0, #8
 8002276:	e006      	b.n	8002286 <UART_SetConfig+0xb6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002278:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 800227a:	4b41      	ldr	r3, [pc, #260]	@ (8002380 <UART_SetConfig+0x1b0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800227c:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800227e:	17c0      	asrs	r0, r0, #31
 8002280:	4018      	ands	r0, r3
 8002282:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <UART_SetConfig+0x1b4>)
 8002284:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002286:	2303      	movs	r3, #3
 8002288:	6862      	ldr	r2, [r4, #4]
 800228a:	4353      	muls	r3, r2
 800228c:	4283      	cmp	r3, r0
 800228e:	d8d0      	bhi.n	8002232 <UART_SetConfig+0x62>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002290:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002292:	4283      	cmp	r3, r0
 8002294:	d3cd      	bcc.n	8002232 <UART_SetConfig+0x62>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002296:	2100      	movs	r1, #0
 8002298:	0e07      	lsrs	r7, r0, #24
 800229a:	0206      	lsls	r6, r0, #8
 800229c:	0850      	lsrs	r0, r2, #1
 800229e:	1836      	adds	r6, r6, r0
 80022a0:	414f      	adcs	r7, r1
 80022a2:	000b      	movs	r3, r1
 80022a4:	0030      	movs	r0, r6
 80022a6:	0039      	movs	r1, r7
 80022a8:	f7fe f8b6 	bl	8000418 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <UART_SetConfig+0x1b8>)
 80022ae:	18c2      	adds	r2, r0, r3
 80022b0:	4b36      	ldr	r3, [pc, #216]	@ (800238c <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d8bd      	bhi.n	8002232 <UART_SetConfig+0x62>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	60d8      	str	r0, [r3, #12]
 80022ba:	e003      	b.n	80022c4 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022bc:	f7ff fc82 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d1e0      	bne.n	8002286 <UART_SetConfig+0xb6>
          pclk = (uint32_t) HSI_VALUE;
 80022c4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80022ca:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80022cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80022ce:	f7ff fc79 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80022d2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80022d4:	d0f6      	beq.n	80022c4 <UART_SetConfig+0xf4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022d6:	6861      	ldr	r1, [r4, #4]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	0848      	lsrs	r0, r1, #1
 80022dc:	1818      	adds	r0, r3, r0
 80022de:	f7fd ff25 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022e2:	0002      	movs	r2, r0
 80022e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <UART_SetConfig+0x1c0>)
 80022e6:	3a10      	subs	r2, #16
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8a2      	bhi.n	8002232 <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022ec:	230f      	movs	r3, #15
 80022ee:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022f0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022f2:	439a      	bics	r2, r3
 80022f4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022f6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	4303      	orrs	r3, r0
 80022fc:	60d3      	str	r3, [r2, #12]
 80022fe:	e7e1      	b.n	80022c4 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002300:	f7ff f8fa 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8002304:	e7e5      	b.n	80022d2 <UART_SetConfig+0x102>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002306:	680b      	ldr	r3, [r1, #0]
 8002308:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 800230a:	1e5a      	subs	r2, r3, #1
 800230c:	4193      	sbcs	r3, r2
 800230e:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <UART_SetConfig+0x1b0>)
 8002310:	425b      	negs	r3, r3
 8002312:	4013      	ands	r3, r2
 8002314:	4a1b      	ldr	r2, [pc, #108]	@ (8002384 <UART_SetConfig+0x1b4>)
 8002316:	189b      	adds	r3, r3, r2
 8002318:	e7dd      	b.n	80022d6 <UART_SetConfig+0x106>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	0212      	lsls	r2, r2, #8
 800231e:	4293      	cmp	r3, r2
 8002320:	d0ee      	beq.n	8002300 <UART_SetConfig+0x130>
        pclk = HAL_RCC_GetSysClockFreq();
 8002322:	f7ff f8e9 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
        break;
 8002326:	e005      	b.n	8002334 <UART_SetConfig+0x164>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002328:	2280      	movs	r2, #128	@ 0x80
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	4293      	cmp	r3, r2
 800232e:	d0ce      	beq.n	80022ce <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002330:	f7ff fc48 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002334:	2800      	cmp	r0, #0
 8002336:	d0c5      	beq.n	80022c4 <UART_SetConfig+0xf4>
 8002338:	e00d      	b.n	8002356 <UART_SetConfig+0x186>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800233a:	2080      	movs	r0, #128	@ 0x80
 800233c:	2210      	movs	r2, #16
 800233e:	0200      	lsls	r0, r0, #8
 8002340:	4283      	cmp	r3, r0
 8002342:	d0e0      	beq.n	8002306 <UART_SetConfig+0x136>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002344:	6808      	ldr	r0, [r1, #0]
 8002346:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 8002348:	1e43      	subs	r3, r0, #1
 800234a:	4198      	sbcs	r0, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <UART_SetConfig+0x1b0>)
 800234e:	4240      	negs	r0, r0
 8002350:	4018      	ands	r0, r3
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <UART_SetConfig+0x1b4>)
 8002354:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002356:	6861      	ldr	r1, [r4, #4]
 8002358:	084b      	lsrs	r3, r1, #1
 800235a:	1818      	adds	r0, r3, r0
 800235c:	f7fd fee6 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002360:	0002      	movs	r2, r0
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <UART_SetConfig+0x1c0>)
 8002364:	3a10      	subs	r2, #16
 8002366:	e7a4      	b.n	80022b2 <UART_SetConfig+0xe2>
 8002368:	efff69f3 	.word	0xefff69f3
 800236c:	ffffcfff 	.word	0xffffcfff
 8002370:	40004800 	.word	0x40004800
 8002374:	fffff4ff 	.word	0xfffff4ff
 8002378:	40004400 	.word	0x40004400
 800237c:	40021000 	.word	0x40021000
 8002380:	ff48e500 	.word	0xff48e500
 8002384:	00f42400 	.word	0x00f42400
 8002388:	fffffd00 	.word	0xfffffd00
 800238c:	000ffcff 	.word	0x000ffcff
 8002390:	0000ffef 	.word	0x0000ffef

08002394 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002394:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002396:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002398:	07da      	lsls	r2, r3, #31
 800239a:	d506      	bpl.n	80023aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800239c:	6801      	ldr	r1, [r0, #0]
 800239e:	4c28      	ldr	r4, [pc, #160]	@ (8002440 <UART_AdvFeatureConfig+0xac>)
 80023a0:	684a      	ldr	r2, [r1, #4]
 80023a2:	4022      	ands	r2, r4
 80023a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80023a6:	4322      	orrs	r2, r4
 80023a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023aa:	079a      	lsls	r2, r3, #30
 80023ac:	d506      	bpl.n	80023bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023ae:	6801      	ldr	r1, [r0, #0]
 80023b0:	4c24      	ldr	r4, [pc, #144]	@ (8002444 <UART_AdvFeatureConfig+0xb0>)
 80023b2:	684a      	ldr	r2, [r1, #4]
 80023b4:	4022      	ands	r2, r4
 80023b6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80023b8:	4322      	orrs	r2, r4
 80023ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023bc:	075a      	lsls	r2, r3, #29
 80023be:	d506      	bpl.n	80023ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c0:	6801      	ldr	r1, [r0, #0]
 80023c2:	4c21      	ldr	r4, [pc, #132]	@ (8002448 <UART_AdvFeatureConfig+0xb4>)
 80023c4:	684a      	ldr	r2, [r1, #4]
 80023c6:	4022      	ands	r2, r4
 80023c8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80023ca:	4322      	orrs	r2, r4
 80023cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ce:	071a      	lsls	r2, r3, #28
 80023d0:	d506      	bpl.n	80023e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023d2:	6801      	ldr	r1, [r0, #0]
 80023d4:	4c1d      	ldr	r4, [pc, #116]	@ (800244c <UART_AdvFeatureConfig+0xb8>)
 80023d6:	684a      	ldr	r2, [r1, #4]
 80023d8:	4022      	ands	r2, r4
 80023da:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80023dc:	4322      	orrs	r2, r4
 80023de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023e0:	06da      	lsls	r2, r3, #27
 80023e2:	d506      	bpl.n	80023f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e4:	6801      	ldr	r1, [r0, #0]
 80023e6:	4c1a      	ldr	r4, [pc, #104]	@ (8002450 <UART_AdvFeatureConfig+0xbc>)
 80023e8:	688a      	ldr	r2, [r1, #8]
 80023ea:	4022      	ands	r2, r4
 80023ec:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80023ee:	4322      	orrs	r2, r4
 80023f0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023f2:	069a      	lsls	r2, r3, #26
 80023f4:	d506      	bpl.n	8002404 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023f6:	6801      	ldr	r1, [r0, #0]
 80023f8:	4c16      	ldr	r4, [pc, #88]	@ (8002454 <UART_AdvFeatureConfig+0xc0>)
 80023fa:	688a      	ldr	r2, [r1, #8]
 80023fc:	4022      	ands	r2, r4
 80023fe:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002400:	4322      	orrs	r2, r4
 8002402:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002404:	065a      	lsls	r2, r3, #25
 8002406:	d510      	bpl.n	800242a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002408:	6801      	ldr	r1, [r0, #0]
 800240a:	4d13      	ldr	r5, [pc, #76]	@ (8002458 <UART_AdvFeatureConfig+0xc4>)
 800240c:	684a      	ldr	r2, [r1, #4]
 800240e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002410:	402a      	ands	r2, r5
 8002412:	4322      	orrs	r2, r4
 8002414:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	0352      	lsls	r2, r2, #13
 800241a:	4294      	cmp	r4, r2
 800241c:	d105      	bne.n	800242a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800241e:	684a      	ldr	r2, [r1, #4]
 8002420:	4c0e      	ldr	r4, [pc, #56]	@ (800245c <UART_AdvFeatureConfig+0xc8>)
 8002422:	4022      	ands	r2, r4
 8002424:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002426:	4322      	orrs	r2, r4
 8002428:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	d506      	bpl.n	800243c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800242e:	6802      	ldr	r2, [r0, #0]
 8002430:	490b      	ldr	r1, [pc, #44]	@ (8002460 <UART_AdvFeatureConfig+0xcc>)
 8002432:	6853      	ldr	r3, [r2, #4]
 8002434:	400b      	ands	r3, r1
 8002436:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002438:	430b      	orrs	r3, r1
 800243a:	6053      	str	r3, [r2, #4]
}
 800243c:	bd30      	pop	{r4, r5, pc}
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	fffdffff 	.word	0xfffdffff
 8002444:	fffeffff 	.word	0xfffeffff
 8002448:	fffbffff 	.word	0xfffbffff
 800244c:	ffff7fff 	.word	0xffff7fff
 8002450:	ffffefff 	.word	0xffffefff
 8002454:	ffffdfff 	.word	0xffffdfff
 8002458:	ffefffff 	.word	0xffefffff
 800245c:	ff9fffff 	.word	0xff9fffff
 8002460:	fff7ffff 	.word	0xfff7ffff

08002464 <UART_WaitOnFlagUntilTimeout>:
{
 8002464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002466:	0004      	movs	r4, r0
 8002468:	000d      	movs	r5, r1
 800246a:	0017      	movs	r7, r2
 800246c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	69d3      	ldr	r3, [r2, #28]
 8002472:	402b      	ands	r3, r5
 8002474:	1b5b      	subs	r3, r3, r5
 8002476:	4259      	negs	r1, r3
 8002478:	414b      	adcs	r3, r1
 800247a:	42bb      	cmp	r3, r7
 800247c:	d001      	beq.n	8002482 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800247e:	2000      	movs	r0, #0
 8002480:	e020      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002482:	9b08      	ldr	r3, [sp, #32]
 8002484:	3301      	adds	r3, #1
 8002486:	d0f3      	beq.n	8002470 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002488:	f7fe fe04 	bl	8001094 <HAL_GetTick>
 800248c:	9b00      	ldr	r3, [sp, #0]
 800248e:	1ac0      	subs	r0, r0, r3
 8002490:	9b08      	ldr	r3, [sp, #32]
 8002492:	4298      	cmp	r0, r3
 8002494:	d827      	bhi.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x82>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d025      	beq.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x82>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	0752      	lsls	r2, r2, #29
 80024a0:	d5e5      	bpl.n	800246e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	2608      	movs	r6, #8
 80024a6:	0011      	movs	r1, r2
 80024a8:	4031      	ands	r1, r6
 80024aa:	9101      	str	r1, [sp, #4]
 80024ac:	4232      	tst	r2, r6
 80024ae:	d00a      	beq.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x62>
           UART_EndRxTransfer(huart);
 80024b0:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024b2:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80024b4:	f7ff fc54 	bl	8001d60 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024b8:	19a3      	adds	r3, r4, r6
 80024ba:	67de      	str	r6, [r3, #124]	@ 0x7c
           __HAL_UNLOCK(huart);
 80024bc:	2300      	movs	r3, #0
           return HAL_ERROR;
 80024be:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80024c0:	3478      	adds	r4, #120	@ 0x78
 80024c2:	7023      	strb	r3, [r4, #0]
}
 80024c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	69d9      	ldr	r1, [r3, #28]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	4211      	tst	r1, r2
 80024ce:	d0ce      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024d0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80024d2:	0020      	movs	r0, r4
 80024d4:	f7ff fc44 	bl	8001d60 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024d8:	0023      	movs	r3, r4
 80024da:	2220      	movs	r2, #32
 80024dc:	3308      	adds	r3, #8
 80024de:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80024e0:	9b01      	ldr	r3, [sp, #4]
 80024e2:	3478      	adds	r4, #120	@ 0x78
 80024e4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80024e6:	2003      	movs	r0, #3
 80024e8:	e7ec      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x60>

080024ea <HAL_UART_Transmit>:
{
 80024ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ec:	b087      	sub	sp, #28
 80024ee:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80024f0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80024f2:	0004      	movs	r4, r0
 80024f4:	000d      	movs	r5, r1
 80024f6:	0017      	movs	r7, r2
    return HAL_BUSY;
 80024f8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d138      	bne.n	8002570 <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 80024fe:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002500:	2900      	cmp	r1, #0
 8002502:	d035      	beq.n	8002570 <HAL_UART_Transmit+0x86>
 8002504:	2a00      	cmp	r2, #0
 8002506:	d033      	beq.n	8002570 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	68a2      	ldr	r2, [r4, #8]
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	429a      	cmp	r2, r3
 8002510:	d104      	bne.n	800251c <HAL_UART_Transmit+0x32>
 8002512:	6923      	ldr	r3, [r4, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002518:	4201      	tst	r1, r0
 800251a:	d129      	bne.n	8002570 <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	0023      	movs	r3, r4
 800251e:	2600      	movs	r6, #0
 8002520:	3308      	adds	r3, #8
 8002522:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002524:	2321      	movs	r3, #33	@ 0x21
 8002526:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002528:	f7fe fdb4 	bl	8001094 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800252c:	0023      	movs	r3, r4
 800252e:	3350      	adds	r3, #80	@ 0x50
 8002530:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002532:	3302      	adds	r3, #2
 8002534:	9303      	str	r3, [sp, #12]
 8002536:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800253c:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253e:	015b      	lsls	r3, r3, #5
 8002540:	429a      	cmp	r2, r3
 8002542:	d104      	bne.n	800254e <HAL_UART_Transmit+0x64>
 8002544:	6923      	ldr	r3, [r4, #16]
 8002546:	42b3      	cmp	r3, r6
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x64>
 800254a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800254c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800254e:	0023      	movs	r3, r4
 8002550:	3352      	adds	r3, #82	@ 0x52
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29a      	uxth	r2, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800255a:	9b05      	ldr	r3, [sp, #20]
 800255c:	2140      	movs	r1, #64	@ 0x40
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	0020      	movs	r0, r4
 8002562:	9b04      	ldr	r3, [sp, #16]
 8002564:	f7ff ff7e 	bl	8002464 <UART_WaitOnFlagUntilTimeout>
 8002568:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800256a:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256c:	2800      	cmp	r0, #0
 800256e:	d10d      	bne.n	800258c <HAL_UART_Transmit+0xa2>
}
 8002570:	b007      	add	sp, #28
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2180      	movs	r1, #128	@ 0x80
 800257c:	0020      	movs	r0, r4
 800257e:	9b04      	ldr	r3, [sp, #16]
 8002580:	f7ff ff70 	bl	8002464 <UART_WaitOnFlagUntilTimeout>
 8002584:	2800      	cmp	r0, #0
 8002586:	d003      	beq.n	8002590 <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8002588:	2320      	movs	r3, #32
 800258a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800258c:	2003      	movs	r0, #3
 800258e:	e7ef      	b.n	8002570 <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002590:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002592:	2d00      	cmp	r5, #0
 8002594:	d10b      	bne.n	80025ae <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002596:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002598:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259a:	05db      	lsls	r3, r3, #23
 800259c:	0ddb      	lsrs	r3, r3, #23
 800259e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80025a0:	9b03      	ldr	r3, [sp, #12]
 80025a2:	9a03      	ldr	r2, [sp, #12]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
 80025ac:	e7cf      	b.n	800254e <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ae:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80025b0:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b2:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80025b4:	e7f4      	b.n	80025a0 <HAL_UART_Transmit+0xb6>
	...

080025b8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	0003      	movs	r3, r0
{
 80025ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025bc:	2500      	movs	r5, #0
{
 80025be:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	3308      	adds	r3, #8
 80025c2:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80025c4:	f7fe fd66 	bl	8001094 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025c8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80025ca:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	071b      	lsls	r3, r3, #28
 80025d0:	d51d      	bpl.n	800260e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <UART_CheckIdleState+0xb8>)
 80025d6:	002a      	movs	r2, r5
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	0389      	lsls	r1, r1, #14
 80025dc:	0003      	movs	r3, r0
 80025de:	0020      	movs	r0, r4
 80025e0:	f7ff ff40 	bl	8002464 <UART_WaitOnFlagUntilTimeout>
 80025e4:	42a8      	cmp	r0, r5
 80025e6:	d012      	beq.n	800260e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	2301      	movs	r3, #1
 80025ee:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025f2:	2080      	movs	r0, #128	@ 0x80
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	4383      	bics	r3, r0
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002600:	2320      	movs	r3, #32
 8002602:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002606:	2300      	movs	r3, #0
 8002608:	3478      	adds	r4, #120	@ 0x78
 800260a:	7023      	strb	r3, [r4, #0]
}
 800260c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800260e:	0025      	movs	r5, r4
 8002610:	cd08      	ldmia	r5!, {r3}
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	075b      	lsls	r3, r3, #29
 8002616:	d523      	bpl.n	8002660 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <UART_CheckIdleState+0xb8>)
 800261c:	2200      	movs	r2, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	0020      	movs	r0, r4
 8002622:	0033      	movs	r3, r6
 8002624:	03c9      	lsls	r1, r1, #15
 8002626:	f7ff ff1d 	bl	8002464 <UART_WaitOnFlagUntilTimeout>
 800262a:	2800      	cmp	r0, #0
 800262c:	d018      	beq.n	8002660 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002632:	2201      	movs	r2, #1
 8002634:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002638:	6821      	ldr	r1, [r4, #0]
 800263a:	4e0e      	ldr	r6, [pc, #56]	@ (8002674 <UART_CheckIdleState+0xbc>)
 800263c:	680b      	ldr	r3, [r1, #0]
 800263e:	4033      	ands	r3, r6
 8002640:	600b      	str	r3, [r1, #0]
 8002642:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002646:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264e:	6821      	ldr	r1, [r4, #0]
 8002650:	688b      	ldr	r3, [r1, #8]
 8002652:	4393      	bics	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
 8002656:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800265a:	2320      	movs	r3, #32
 800265c:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800265e:	e7d1      	b.n	8002604 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002660:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002662:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002664:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002666:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002668:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800266a:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800266c:	e7cb      	b.n	8002606 <UART_CheckIdleState+0x4e>
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	01ffffff 	.word	0x01ffffff
 8002674:	fffffedf 	.word	0xfffffedf

08002678 <HAL_UART_Init>:
{
 8002678:	b510      	push	{r4, lr}
 800267a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
}
 8002680:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d104      	bne.n	8002692 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002688:	0002      	movs	r2, r0
 800268a:	3278      	adds	r2, #120	@ 0x78
 800268c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800268e:	f7fe fba5 	bl	8000ddc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002692:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002694:	2101      	movs	r1, #1
 8002696:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800269a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800269c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800269e:	438b      	bics	r3, r1
 80026a0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a2:	f7ff fd95 	bl	80021d0 <UART_SetConfig>
 80026a6:	2801      	cmp	r0, #1
 80026a8:	d0e9      	beq.n	800267e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80026b0:	0020      	movs	r0, r4
 80026b2:	f7ff fe6f 	bl	8002394 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	4907      	ldr	r1, [pc, #28]	@ (80026d8 <HAL_UART_Init+0x60>)
 80026ba:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80026bc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c0:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	438a      	bics	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026ca:	2201      	movs	r2, #1
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026d2:	f7ff ff71 	bl	80025b8 <UART_CheckIdleState>
 80026d6:	e7d3      	b.n	8002680 <HAL_UART_Init+0x8>
 80026d8:	ffffb7ff 	.word	0xffffb7ff

080026dc <UART_Start_Receive_DMA>:
{
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80026e0:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	0006      	movs	r6, r0
  huart->RxXferSize = Size;
 80026e4:	3258      	adds	r2, #88	@ 0x58
  huart->pRxBuffPtr = pData;
 80026e6:	6541      	str	r1, [r0, #84]	@ 0x54
{
 80026e8:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 80026ea:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ec:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026f0:	1d05      	adds	r5, r0, #4
{
 80026f2:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 80026f4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	3608      	adds	r6, #8
 80026f8:	67f2      	str	r2, [r6, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fa:	67e9      	str	r1, [r5, #124]	@ 0x7c
  if (huart->hdmarx != NULL)
 80026fc:	4290      	cmp	r0, r2
 80026fe:	d013      	beq.n	8002728 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002700:	491d      	ldr	r1, [pc, #116]	@ (8002778 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8002702:	6382      	str	r2, [r0, #56]	@ 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002704:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002706:	491d      	ldr	r1, [pc, #116]	@ (800277c <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002708:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800270a:	6301      	str	r1, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800270c:	491c      	ldr	r1, [pc, #112]	@ (8002780 <UART_Start_Receive_DMA+0xa4>)
 800270e:	6341      	str	r1, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002710:	6821      	ldr	r1, [r4, #0]
 8002712:	3124      	adds	r1, #36	@ 0x24
 8002714:	f7fe fd6a 	bl	80011ec <HAL_DMA_Start_IT>
 8002718:	2800      	cmp	r0, #0
 800271a:	d005      	beq.n	8002728 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800271c:	2310      	movs	r3, #16
      return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002720:	67f3      	str	r3, [r6, #124]	@ 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 8002722:	18db      	adds	r3, r3, r3
 8002724:	67eb      	str	r3, [r5, #124]	@ 0x7c
}
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002728:	6923      	ldr	r3, [r4, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <UART_Start_Receive_DMA+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	2301      	movs	r3, #1
 8002734:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	33ff      	adds	r3, #255	@ 0xff
 800273c:	6810      	ldr	r0, [r2, #0]
 800273e:	4303      	orrs	r3, r0
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	2301      	movs	r3, #1
 800274c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	6821      	ldr	r1, [r4, #0]
 8002752:	688a      	ldr	r2, [r1, #8]
 8002754:	431a      	orrs	r2, r3
 8002756:	608a      	str	r2, [r1, #8]
 8002758:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	333f      	adds	r3, #63	@ 0x3f
 8002768:	6890      	ldr	r0, [r2, #8]
 800276a:	4303      	orrs	r3, r0
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8002772:	2000      	movs	r0, #0
 8002774:	e7d7      	b.n	8002726 <UART_Start_Receive_DMA+0x4a>
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	08002131 	.word	0x08002131
 800277c:	0800210d 	.word	0x0800210d
 8002780:	08001dc5 	.word	0x08001dc5

08002784 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002784:	4770      	bx	lr

08002786 <HAL_UARTEx_ReceiveToIdle_DMA>:
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002786:	1d03      	adds	r3, r0, #4
 8002788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
{
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	0004      	movs	r4, r0

    return status;
  }
  else
  {
    return HAL_BUSY;
 800278e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002790:	2b20      	cmp	r3, #32
 8002792:	d102      	bne.n	800279a <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    if ((pData == NULL) || (Size == 0U))
 8002794:	2900      	cmp	r1, #0
 8002796:	d101      	bne.n	800279c <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 8002798:	2001      	movs	r0, #1
  }
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 800279c:	2a00      	cmp	r2, #0
 800279e:	d0fb      	beq.n	8002798 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a0:	2080      	movs	r0, #128	@ 0x80
 80027a2:	68a5      	ldr	r5, [r4, #8]
 80027a4:	2301      	movs	r3, #1
 80027a6:	0140      	lsls	r0, r0, #5
 80027a8:	4285      	cmp	r5, r0
 80027aa:	d104      	bne.n	80027b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
 80027ac:	6920      	ldr	r0, [r4, #16]
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 80027b2:	4219      	tst	r1, r3
 80027b4:	d1f0      	bne.n	8002798 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80027b6:	6623      	str	r3, [r4, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b8:	2300      	movs	r3, #0
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80027ba:	0020      	movs	r0, r4
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027bc:	6663      	str	r3, [r4, #100]	@ 0x64
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80027be:	f7ff ff8d 	bl	80026dc <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d1e9      	bne.n	800279a <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	d1e5      	bne.n	8002798 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027cc:	2310      	movs	r3, #16
 80027ce:	6821      	ldr	r1, [r4, #0]
 80027d0:	620b      	str	r3, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027da:	6822      	ldr	r2, [r4, #0]
 80027dc:	6814      	ldr	r4, [r2, #0]
 80027de:	4323      	orrs	r3, r4
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	f381 8810 	msr	PRIMASK, r1
}
 80027e6:	e7d8      	b.n	800279a <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

080027e8 <atoi>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	220a      	movs	r2, #10
 80027ec:	2100      	movs	r1, #0
 80027ee:	f000 f947 	bl	8002a80 <strtol>
 80027f2:	bd10      	pop	{r4, pc}

080027f4 <malloc>:
 80027f4:	b510      	push	{r4, lr}
 80027f6:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <malloc+0x10>)
 80027f8:	0001      	movs	r1, r0
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	f000 f826 	bl	800284c <_malloc_r>
 8002800:	bd10      	pop	{r4, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	20000018 	.word	0x20000018

08002808 <sbrk_aligned>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	4e0f      	ldr	r6, [pc, #60]	@ (8002848 <sbrk_aligned+0x40>)
 800280c:	000d      	movs	r5, r1
 800280e:	6831      	ldr	r1, [r6, #0]
 8002810:	0004      	movs	r4, r0
 8002812:	2900      	cmp	r1, #0
 8002814:	d102      	bne.n	800281c <sbrk_aligned+0x14>
 8002816:	f000 fb47 	bl	8002ea8 <_sbrk_r>
 800281a:	6030      	str	r0, [r6, #0]
 800281c:	0029      	movs	r1, r5
 800281e:	0020      	movs	r0, r4
 8002820:	f000 fb42 	bl	8002ea8 <_sbrk_r>
 8002824:	1c43      	adds	r3, r0, #1
 8002826:	d103      	bne.n	8002830 <sbrk_aligned+0x28>
 8002828:	2501      	movs	r5, #1
 800282a:	426d      	negs	r5, r5
 800282c:	0028      	movs	r0, r5
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	2303      	movs	r3, #3
 8002832:	1cc5      	adds	r5, r0, #3
 8002834:	439d      	bics	r5, r3
 8002836:	42a8      	cmp	r0, r5
 8002838:	d0f8      	beq.n	800282c <sbrk_aligned+0x24>
 800283a:	1a29      	subs	r1, r5, r0
 800283c:	0020      	movs	r0, r4
 800283e:	f000 fb33 	bl	8002ea8 <_sbrk_r>
 8002842:	3001      	adds	r0, #1
 8002844:	d1f2      	bne.n	800282c <sbrk_aligned+0x24>
 8002846:	e7ef      	b.n	8002828 <sbrk_aligned+0x20>
 8002848:	200003c8 	.word	0x200003c8

0800284c <_malloc_r>:
 800284c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800284e:	2203      	movs	r2, #3
 8002850:	1ccb      	adds	r3, r1, #3
 8002852:	4393      	bics	r3, r2
 8002854:	3308      	adds	r3, #8
 8002856:	0005      	movs	r5, r0
 8002858:	001f      	movs	r7, r3
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d234      	bcs.n	80028c8 <_malloc_r+0x7c>
 800285e:	270c      	movs	r7, #12
 8002860:	42b9      	cmp	r1, r7
 8002862:	d833      	bhi.n	80028cc <_malloc_r+0x80>
 8002864:	0028      	movs	r0, r5
 8002866:	f000 f871 	bl	800294c <__malloc_lock>
 800286a:	4e37      	ldr	r6, [pc, #220]	@ (8002948 <_malloc_r+0xfc>)
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	001c      	movs	r4, r3
 8002870:	2c00      	cmp	r4, #0
 8002872:	d12f      	bne.n	80028d4 <_malloc_r+0x88>
 8002874:	0039      	movs	r1, r7
 8002876:	0028      	movs	r0, r5
 8002878:	f7ff ffc6 	bl	8002808 <sbrk_aligned>
 800287c:	0004      	movs	r4, r0
 800287e:	1c43      	adds	r3, r0, #1
 8002880:	d15f      	bne.n	8002942 <_malloc_r+0xf6>
 8002882:	6834      	ldr	r4, [r6, #0]
 8002884:	9400      	str	r4, [sp, #0]
 8002886:	9b00      	ldr	r3, [sp, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d14a      	bne.n	8002922 <_malloc_r+0xd6>
 800288c:	2c00      	cmp	r4, #0
 800288e:	d052      	beq.n	8002936 <_malloc_r+0xea>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	0028      	movs	r0, r5
 8002894:	18e3      	adds	r3, r4, r3
 8002896:	9900      	ldr	r1, [sp, #0]
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	f000 fb05 	bl	8002ea8 <_sbrk_r>
 800289e:	9b01      	ldr	r3, [sp, #4]
 80028a0:	4283      	cmp	r3, r0
 80028a2:	d148      	bne.n	8002936 <_malloc_r+0xea>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	0028      	movs	r0, r5
 80028a8:	1aff      	subs	r7, r7, r3
 80028aa:	0039      	movs	r1, r7
 80028ac:	f7ff ffac 	bl	8002808 <sbrk_aligned>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d040      	beq.n	8002936 <_malloc_r+0xea>
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	19db      	adds	r3, r3, r7
 80028b8:	6023      	str	r3, [r4, #0]
 80028ba:	6833      	ldr	r3, [r6, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	2a00      	cmp	r2, #0
 80028c0:	d133      	bne.n	800292a <_malloc_r+0xde>
 80028c2:	9b00      	ldr	r3, [sp, #0]
 80028c4:	6033      	str	r3, [r6, #0]
 80028c6:	e019      	b.n	80028fc <_malloc_r+0xb0>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	dac9      	bge.n	8002860 <_malloc_r+0x14>
 80028cc:	230c      	movs	r3, #12
 80028ce:	602b      	str	r3, [r5, #0]
 80028d0:	2000      	movs	r0, #0
 80028d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028d4:	6821      	ldr	r1, [r4, #0]
 80028d6:	1bc9      	subs	r1, r1, r7
 80028d8:	d420      	bmi.n	800291c <_malloc_r+0xd0>
 80028da:	290b      	cmp	r1, #11
 80028dc:	d90a      	bls.n	80028f4 <_malloc_r+0xa8>
 80028de:	19e2      	adds	r2, r4, r7
 80028e0:	6027      	str	r7, [r4, #0]
 80028e2:	42a3      	cmp	r3, r4
 80028e4:	d104      	bne.n	80028f0 <_malloc_r+0xa4>
 80028e6:	6032      	str	r2, [r6, #0]
 80028e8:	6863      	ldr	r3, [r4, #4]
 80028ea:	6011      	str	r1, [r2, #0]
 80028ec:	6053      	str	r3, [r2, #4]
 80028ee:	e005      	b.n	80028fc <_malloc_r+0xb0>
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e7f9      	b.n	80028e8 <_malloc_r+0x9c>
 80028f4:	6862      	ldr	r2, [r4, #4]
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	d10e      	bne.n	8002918 <_malloc_r+0xcc>
 80028fa:	6032      	str	r2, [r6, #0]
 80028fc:	0028      	movs	r0, r5
 80028fe:	f000 f82d 	bl	800295c <__malloc_unlock>
 8002902:	0020      	movs	r0, r4
 8002904:	2207      	movs	r2, #7
 8002906:	300b      	adds	r0, #11
 8002908:	1d23      	adds	r3, r4, #4
 800290a:	4390      	bics	r0, r2
 800290c:	1ac2      	subs	r2, r0, r3
 800290e:	4298      	cmp	r0, r3
 8002910:	d0df      	beq.n	80028d2 <_malloc_r+0x86>
 8002912:	1a1b      	subs	r3, r3, r0
 8002914:	50a3      	str	r3, [r4, r2]
 8002916:	e7dc      	b.n	80028d2 <_malloc_r+0x86>
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e7ef      	b.n	80028fc <_malloc_r+0xb0>
 800291c:	0023      	movs	r3, r4
 800291e:	6864      	ldr	r4, [r4, #4]
 8002920:	e7a6      	b.n	8002870 <_malloc_r+0x24>
 8002922:	9c00      	ldr	r4, [sp, #0]
 8002924:	6863      	ldr	r3, [r4, #4]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	e7ad      	b.n	8002886 <_malloc_r+0x3a>
 800292a:	001a      	movs	r2, r3
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	42a3      	cmp	r3, r4
 8002930:	d1fb      	bne.n	800292a <_malloc_r+0xde>
 8002932:	2300      	movs	r3, #0
 8002934:	e7da      	b.n	80028ec <_malloc_r+0xa0>
 8002936:	230c      	movs	r3, #12
 8002938:	0028      	movs	r0, r5
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	f000 f80e 	bl	800295c <__malloc_unlock>
 8002940:	e7c6      	b.n	80028d0 <_malloc_r+0x84>
 8002942:	6007      	str	r7, [r0, #0]
 8002944:	e7da      	b.n	80028fc <_malloc_r+0xb0>
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	200003cc 	.word	0x200003cc

0800294c <__malloc_lock>:
 800294c:	b510      	push	{r4, lr}
 800294e:	4802      	ldr	r0, [pc, #8]	@ (8002958 <__malloc_lock+0xc>)
 8002950:	f000 fafb 	bl	8002f4a <__retarget_lock_acquire_recursive>
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	20000510 	.word	0x20000510

0800295c <__malloc_unlock>:
 800295c:	b510      	push	{r4, lr}
 800295e:	4802      	ldr	r0, [pc, #8]	@ (8002968 <__malloc_unlock+0xc>)
 8002960:	f000 faf4 	bl	8002f4c <__retarget_lock_release_recursive>
 8002964:	bd10      	pop	{r4, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	20000510 	.word	0x20000510

0800296c <_strtol_l.constprop.0>:
 800296c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296e:	b085      	sub	sp, #20
 8002970:	0017      	movs	r7, r2
 8002972:	001e      	movs	r6, r3
 8002974:	9003      	str	r0, [sp, #12]
 8002976:	9101      	str	r1, [sp, #4]
 8002978:	2b24      	cmp	r3, #36	@ 0x24
 800297a:	d844      	bhi.n	8002a06 <_strtol_l.constprop.0+0x9a>
 800297c:	000c      	movs	r4, r1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d041      	beq.n	8002a06 <_strtol_l.constprop.0+0x9a>
 8002982:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <_strtol_l.constprop.0+0x10c>)
 8002984:	2208      	movs	r2, #8
 8002986:	469c      	mov	ip, r3
 8002988:	0023      	movs	r3, r4
 800298a:	4661      	mov	r1, ip
 800298c:	781d      	ldrb	r5, [r3, #0]
 800298e:	3401      	adds	r4, #1
 8002990:	5d48      	ldrb	r0, [r1, r5]
 8002992:	0001      	movs	r1, r0
 8002994:	4011      	ands	r1, r2
 8002996:	4210      	tst	r0, r2
 8002998:	d1f6      	bne.n	8002988 <_strtol_l.constprop.0+0x1c>
 800299a:	2d2d      	cmp	r5, #45	@ 0x2d
 800299c:	d13a      	bne.n	8002a14 <_strtol_l.constprop.0+0xa8>
 800299e:	7825      	ldrb	r5, [r4, #0]
 80029a0:	1c9c      	adds	r4, r3, #2
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	0033      	movs	r3, r6
 80029aa:	4393      	bics	r3, r2
 80029ac:	d109      	bne.n	80029c2 <_strtol_l.constprop.0+0x56>
 80029ae:	2d30      	cmp	r5, #48	@ 0x30
 80029b0:	d136      	bne.n	8002a20 <_strtol_l.constprop.0+0xb4>
 80029b2:	2120      	movs	r1, #32
 80029b4:	7823      	ldrb	r3, [r4, #0]
 80029b6:	438b      	bics	r3, r1
 80029b8:	2b58      	cmp	r3, #88	@ 0x58
 80029ba:	d131      	bne.n	8002a20 <_strtol_l.constprop.0+0xb4>
 80029bc:	0016      	movs	r6, r2
 80029be:	7865      	ldrb	r5, [r4, #1]
 80029c0:	3402      	adds	r4, #2
 80029c2:	4a2e      	ldr	r2, [pc, #184]	@ (8002a7c <_strtol_l.constprop.0+0x110>)
 80029c4:	9b00      	ldr	r3, [sp, #0]
 80029c6:	4694      	mov	ip, r2
 80029c8:	4463      	add	r3, ip
 80029ca:	0031      	movs	r1, r6
 80029cc:	0018      	movs	r0, r3
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	f7fd fc32 	bl	8000238 <__aeabi_uidivmod>
 80029d4:	2200      	movs	r2, #0
 80029d6:	4684      	mov	ip, r0
 80029d8:	0010      	movs	r0, r2
 80029da:	002b      	movs	r3, r5
 80029dc:	3b30      	subs	r3, #48	@ 0x30
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d825      	bhi.n	8002a2e <_strtol_l.constprop.0+0xc2>
 80029e2:	001d      	movs	r5, r3
 80029e4:	42ae      	cmp	r6, r5
 80029e6:	dd31      	ble.n	8002a4c <_strtol_l.constprop.0+0xe0>
 80029e8:	1c53      	adds	r3, r2, #1
 80029ea:	d009      	beq.n	8002a00 <_strtol_l.constprop.0+0x94>
 80029ec:	2201      	movs	r2, #1
 80029ee:	4252      	negs	r2, r2
 80029f0:	4584      	cmp	ip, r0
 80029f2:	d305      	bcc.n	8002a00 <_strtol_l.constprop.0+0x94>
 80029f4:	d101      	bne.n	80029fa <_strtol_l.constprop.0+0x8e>
 80029f6:	42a9      	cmp	r1, r5
 80029f8:	db25      	blt.n	8002a46 <_strtol_l.constprop.0+0xda>
 80029fa:	2201      	movs	r2, #1
 80029fc:	4370      	muls	r0, r6
 80029fe:	1828      	adds	r0, r5, r0
 8002a00:	7825      	ldrb	r5, [r4, #0]
 8002a02:	3401      	adds	r4, #1
 8002a04:	e7e9      	b.n	80029da <_strtol_l.constprop.0+0x6e>
 8002a06:	f000 fa75 	bl	8002ef4 <__errno>
 8002a0a:	2316      	movs	r3, #22
 8002a0c:	6003      	str	r3, [r0, #0]
 8002a0e:	2000      	movs	r0, #0
 8002a10:	b005      	add	sp, #20
 8002a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a14:	9100      	str	r1, [sp, #0]
 8002a16:	2d2b      	cmp	r5, #43	@ 0x2b
 8002a18:	d1c5      	bne.n	80029a6 <_strtol_l.constprop.0+0x3a>
 8002a1a:	7825      	ldrb	r5, [r4, #0]
 8002a1c:	1c9c      	adds	r4, r3, #2
 8002a1e:	e7c2      	b.n	80029a6 <_strtol_l.constprop.0+0x3a>
 8002a20:	2e00      	cmp	r6, #0
 8002a22:	d1ce      	bne.n	80029c2 <_strtol_l.constprop.0+0x56>
 8002a24:	3608      	adds	r6, #8
 8002a26:	2d30      	cmp	r5, #48	@ 0x30
 8002a28:	d0cb      	beq.n	80029c2 <_strtol_l.constprop.0+0x56>
 8002a2a:	3602      	adds	r6, #2
 8002a2c:	e7c9      	b.n	80029c2 <_strtol_l.constprop.0+0x56>
 8002a2e:	002b      	movs	r3, r5
 8002a30:	3b41      	subs	r3, #65	@ 0x41
 8002a32:	2b19      	cmp	r3, #25
 8002a34:	d801      	bhi.n	8002a3a <_strtol_l.constprop.0+0xce>
 8002a36:	3d37      	subs	r5, #55	@ 0x37
 8002a38:	e7d4      	b.n	80029e4 <_strtol_l.constprop.0+0x78>
 8002a3a:	002b      	movs	r3, r5
 8002a3c:	3b61      	subs	r3, #97	@ 0x61
 8002a3e:	2b19      	cmp	r3, #25
 8002a40:	d804      	bhi.n	8002a4c <_strtol_l.constprop.0+0xe0>
 8002a42:	3d57      	subs	r5, #87	@ 0x57
 8002a44:	e7ce      	b.n	80029e4 <_strtol_l.constprop.0+0x78>
 8002a46:	2201      	movs	r2, #1
 8002a48:	4252      	negs	r2, r2
 8002a4a:	e7d9      	b.n	8002a00 <_strtol_l.constprop.0+0x94>
 8002a4c:	1c53      	adds	r3, r2, #1
 8002a4e:	d108      	bne.n	8002a62 <_strtol_l.constprop.0+0xf6>
 8002a50:	2322      	movs	r3, #34	@ 0x22
 8002a52:	9a03      	ldr	r2, [sp, #12]
 8002a54:	9802      	ldr	r0, [sp, #8]
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	2f00      	cmp	r7, #0
 8002a5a:	d0d9      	beq.n	8002a10 <_strtol_l.constprop.0+0xa4>
 8002a5c:	1e63      	subs	r3, r4, #1
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	e007      	b.n	8002a72 <_strtol_l.constprop.0+0x106>
 8002a62:	9b00      	ldr	r3, [sp, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d000      	beq.n	8002a6a <_strtol_l.constprop.0+0xfe>
 8002a68:	4240      	negs	r0, r0
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d0d0      	beq.n	8002a10 <_strtol_l.constprop.0+0xa4>
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	d1f4      	bne.n	8002a5c <_strtol_l.constprop.0+0xf0>
 8002a72:	9b01      	ldr	r3, [sp, #4]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	e7cb      	b.n	8002a10 <_strtol_l.constprop.0+0xa4>
 8002a78:	08003e9c 	.word	0x08003e9c
 8002a7c:	7fffffff 	.word	0x7fffffff

08002a80 <strtol>:
 8002a80:	b510      	push	{r4, lr}
 8002a82:	4c04      	ldr	r4, [pc, #16]	@ (8002a94 <strtol+0x14>)
 8002a84:	0013      	movs	r3, r2
 8002a86:	000a      	movs	r2, r1
 8002a88:	0001      	movs	r1, r0
 8002a8a:	6820      	ldr	r0, [r4, #0]
 8002a8c:	f7ff ff6e 	bl	800296c <_strtol_l.constprop.0>
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	20000018 	.word	0x20000018

08002a98 <std>:
 8002a98:	2300      	movs	r3, #0
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	0004      	movs	r4, r0
 8002a9e:	6003      	str	r3, [r0, #0]
 8002aa0:	6043      	str	r3, [r0, #4]
 8002aa2:	6083      	str	r3, [r0, #8]
 8002aa4:	8181      	strh	r1, [r0, #12]
 8002aa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002aa8:	81c2      	strh	r2, [r0, #14]
 8002aaa:	6103      	str	r3, [r0, #16]
 8002aac:	6143      	str	r3, [r0, #20]
 8002aae:	6183      	str	r3, [r0, #24]
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	305c      	adds	r0, #92	@ 0x5c
 8002ab6:	f000 f941 	bl	8002d3c <memset>
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <std+0x50>)
 8002abc:	6224      	str	r4, [r4, #32]
 8002abe:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <std+0x54>)
 8002ac2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <std+0x58>)
 8002ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <std+0x5c>)
 8002aca:	6323      	str	r3, [r4, #48]	@ 0x30
 8002acc:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <std+0x60>)
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d005      	beq.n	8002ade <std+0x46>
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <std+0x64>)
 8002ad4:	429c      	cmp	r4, r3
 8002ad6:	d002      	beq.n	8002ade <std+0x46>
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <std+0x68>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d103      	bne.n	8002ae6 <std+0x4e>
 8002ade:	0020      	movs	r0, r4
 8002ae0:	3058      	adds	r0, #88	@ 0x58
 8002ae2:	f000 fa31 	bl	8002f48 <__retarget_lock_init_recursive>
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	08002c89 	.word	0x08002c89
 8002aec:	08002cb1 	.word	0x08002cb1
 8002af0:	08002ce9 	.word	0x08002ce9
 8002af4:	08002d15 	.word	0x08002d15
 8002af8:	200003d0 	.word	0x200003d0
 8002afc:	20000438 	.word	0x20000438
 8002b00:	200004a0 	.word	0x200004a0

08002b04 <stdio_exit_handler>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	4a03      	ldr	r2, [pc, #12]	@ (8002b14 <stdio_exit_handler+0x10>)
 8002b08:	4903      	ldr	r1, [pc, #12]	@ (8002b18 <stdio_exit_handler+0x14>)
 8002b0a:	4804      	ldr	r0, [pc, #16]	@ (8002b1c <stdio_exit_handler+0x18>)
 8002b0c:	f000 f86c 	bl	8002be8 <_fwalk_sglue>
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	08003705 	.word	0x08003705
 8002b1c:	2000001c 	.word	0x2000001c

08002b20 <cleanup_stdio>:
 8002b20:	6841      	ldr	r1, [r0, #4]
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <cleanup_stdio+0x30>)
 8002b24:	b510      	push	{r4, lr}
 8002b26:	0004      	movs	r4, r0
 8002b28:	4299      	cmp	r1, r3
 8002b2a:	d001      	beq.n	8002b30 <cleanup_stdio+0x10>
 8002b2c:	f000 fdea 	bl	8003704 <_fflush_r>
 8002b30:	68a1      	ldr	r1, [r4, #8]
 8002b32:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <cleanup_stdio+0x34>)
 8002b34:	4299      	cmp	r1, r3
 8002b36:	d002      	beq.n	8002b3e <cleanup_stdio+0x1e>
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f000 fde3 	bl	8003704 <_fflush_r>
 8002b3e:	68e1      	ldr	r1, [r4, #12]
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <cleanup_stdio+0x38>)
 8002b42:	4299      	cmp	r1, r3
 8002b44:	d002      	beq.n	8002b4c <cleanup_stdio+0x2c>
 8002b46:	0020      	movs	r0, r4
 8002b48:	f000 fddc 	bl	8003704 <_fflush_r>
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	200003d0 	.word	0x200003d0
 8002b54:	20000438 	.word	0x20000438
 8002b58:	200004a0 	.word	0x200004a0

08002b5c <global_stdio_init.part.0>:
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <global_stdio_init.part.0+0x28>)
 8002b60:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <global_stdio_init.part.0+0x2c>)
 8002b62:	2104      	movs	r1, #4
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	4809      	ldr	r0, [pc, #36]	@ (8002b8c <global_stdio_init.part.0+0x30>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f7ff ff95 	bl	8002a98 <std>
 8002b6e:	2201      	movs	r2, #1
 8002b70:	2109      	movs	r1, #9
 8002b72:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <global_stdio_init.part.0+0x34>)
 8002b74:	f7ff ff90 	bl	8002a98 <std>
 8002b78:	2202      	movs	r2, #2
 8002b7a:	2112      	movs	r1, #18
 8002b7c:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <global_stdio_init.part.0+0x38>)
 8002b7e:	f7ff ff8b 	bl	8002a98 <std>
 8002b82:	bd10      	pop	{r4, pc}
 8002b84:	20000508 	.word	0x20000508
 8002b88:	08002b05 	.word	0x08002b05
 8002b8c:	200003d0 	.word	0x200003d0
 8002b90:	20000438 	.word	0x20000438
 8002b94:	200004a0 	.word	0x200004a0

08002b98 <__sfp_lock_acquire>:
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <__sfp_lock_acquire+0xc>)
 8002b9c:	f000 f9d5 	bl	8002f4a <__retarget_lock_acquire_recursive>
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	20000511 	.word	0x20000511

08002ba8 <__sfp_lock_release>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <__sfp_lock_release+0xc>)
 8002bac:	f000 f9ce 	bl	8002f4c <__retarget_lock_release_recursive>
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	20000511 	.word	0x20000511

08002bb8 <__sinit>:
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	0004      	movs	r4, r0
 8002bbc:	f7ff ffec 	bl	8002b98 <__sfp_lock_acquire>
 8002bc0:	6a23      	ldr	r3, [r4, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <__sinit+0x14>
 8002bc6:	f7ff ffef 	bl	8002ba8 <__sfp_lock_release>
 8002bca:	bd10      	pop	{r4, pc}
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__sinit+0x28>)
 8002bce:	6223      	str	r3, [r4, #32]
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <__sinit+0x2c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f6      	bne.n	8002bc6 <__sinit+0xe>
 8002bd8:	f7ff ffc0 	bl	8002b5c <global_stdio_init.part.0>
 8002bdc:	e7f3      	b.n	8002bc6 <__sinit+0xe>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	08002b21 	.word	0x08002b21
 8002be4:	20000508 	.word	0x20000508

08002be8 <_fwalk_sglue>:
 8002be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bea:	0014      	movs	r4, r2
 8002bec:	2600      	movs	r6, #0
 8002bee:	9000      	str	r0, [sp, #0]
 8002bf0:	9101      	str	r1, [sp, #4]
 8002bf2:	68a5      	ldr	r5, [r4, #8]
 8002bf4:	6867      	ldr	r7, [r4, #4]
 8002bf6:	3f01      	subs	r7, #1
 8002bf8:	d504      	bpl.n	8002c04 <_fwalk_sglue+0x1c>
 8002bfa:	6824      	ldr	r4, [r4, #0]
 8002bfc:	2c00      	cmp	r4, #0
 8002bfe:	d1f8      	bne.n	8002bf2 <_fwalk_sglue+0xa>
 8002c00:	0030      	movs	r0, r6
 8002c02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c04:	89ab      	ldrh	r3, [r5, #12]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d908      	bls.n	8002c1c <_fwalk_sglue+0x34>
 8002c0a:	220e      	movs	r2, #14
 8002c0c:	5eab      	ldrsh	r3, [r5, r2]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	d004      	beq.n	8002c1c <_fwalk_sglue+0x34>
 8002c12:	0029      	movs	r1, r5
 8002c14:	9800      	ldr	r0, [sp, #0]
 8002c16:	9b01      	ldr	r3, [sp, #4]
 8002c18:	4798      	blx	r3
 8002c1a:	4306      	orrs	r6, r0
 8002c1c:	3568      	adds	r5, #104	@ 0x68
 8002c1e:	e7ea      	b.n	8002bf6 <_fwalk_sglue+0xe>

08002c20 <sniprintf>:
 8002c20:	b40c      	push	{r2, r3}
 8002c22:	b530      	push	{r4, r5, lr}
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <sniprintf+0x64>)
 8002c26:	000c      	movs	r4, r1
 8002c28:	681d      	ldr	r5, [r3, #0]
 8002c2a:	b09d      	sub	sp, #116	@ 0x74
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	da08      	bge.n	8002c42 <sniprintf+0x22>
 8002c30:	238b      	movs	r3, #139	@ 0x8b
 8002c32:	2001      	movs	r0, #1
 8002c34:	602b      	str	r3, [r5, #0]
 8002c36:	4240      	negs	r0, r0
 8002c38:	b01d      	add	sp, #116	@ 0x74
 8002c3a:	bc30      	pop	{r4, r5}
 8002c3c:	bc08      	pop	{r3}
 8002c3e:	b002      	add	sp, #8
 8002c40:	4718      	bx	r3
 8002c42:	2382      	movs	r3, #130	@ 0x82
 8002c44:	466a      	mov	r2, sp
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	8293      	strh	r3, [r2, #20]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9002      	str	r0, [sp, #8]
 8002c4e:	9006      	str	r0, [sp, #24]
 8002c50:	4299      	cmp	r1, r3
 8002c52:	d000      	beq.n	8002c56 <sniprintf+0x36>
 8002c54:	1e4b      	subs	r3, r1, #1
 8002c56:	9304      	str	r3, [sp, #16]
 8002c58:	9307      	str	r3, [sp, #28]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	466a      	mov	r2, sp
 8002c5e:	425b      	negs	r3, r3
 8002c60:	82d3      	strh	r3, [r2, #22]
 8002c62:	0028      	movs	r0, r5
 8002c64:	ab21      	add	r3, sp, #132	@ 0x84
 8002c66:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002c68:	a902      	add	r1, sp, #8
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	f000 fa48 	bl	8003100 <_svfiprintf_r>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	da01      	bge.n	8002c78 <sniprintf+0x58>
 8002c74:	238b      	movs	r3, #139	@ 0x8b
 8002c76:	602b      	str	r3, [r5, #0]
 8002c78:	2c00      	cmp	r4, #0
 8002c7a:	d0dd      	beq.n	8002c38 <sniprintf+0x18>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	9b02      	ldr	r3, [sp, #8]
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e7d9      	b.n	8002c38 <sniprintf+0x18>
 8002c84:	20000018 	.word	0x20000018

08002c88 <__sread>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	000c      	movs	r4, r1
 8002c8c:	250e      	movs	r5, #14
 8002c8e:	5f49      	ldrsh	r1, [r1, r5]
 8002c90:	f000 f8f6 	bl	8002e80 <_read_r>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	db03      	blt.n	8002ca0 <__sread+0x18>
 8002c98:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002c9a:	181b      	adds	r3, r3, r0
 8002c9c:	6563      	str	r3, [r4, #84]	@ 0x54
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	4a02      	ldr	r2, [pc, #8]	@ (8002cac <__sread+0x24>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	e7f9      	b.n	8002c9e <__sread+0x16>
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	ffffefff 	.word	0xffffefff

08002cb0 <__swrite>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	001f      	movs	r7, r3
 8002cb4:	898b      	ldrh	r3, [r1, #12]
 8002cb6:	0005      	movs	r5, r0
 8002cb8:	000c      	movs	r4, r1
 8002cba:	0016      	movs	r6, r2
 8002cbc:	05db      	lsls	r3, r3, #23
 8002cbe:	d505      	bpl.n	8002ccc <__swrite+0x1c>
 8002cc0:	230e      	movs	r3, #14
 8002cc2:	5ec9      	ldrsh	r1, [r1, r3]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f000 f8c6 	bl	8002e58 <_lseek_r>
 8002ccc:	89a3      	ldrh	r3, [r4, #12]
 8002cce:	4a05      	ldr	r2, [pc, #20]	@ (8002ce4 <__swrite+0x34>)
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	81a3      	strh	r3, [r4, #12]
 8002cd6:	0032      	movs	r2, r6
 8002cd8:	230e      	movs	r3, #14
 8002cda:	5ee1      	ldrsh	r1, [r4, r3]
 8002cdc:	003b      	movs	r3, r7
 8002cde:	f000 f8f5 	bl	8002ecc <_write_r>
 8002ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce4:	ffffefff 	.word	0xffffefff

08002ce8 <__sseek>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	000c      	movs	r4, r1
 8002cec:	250e      	movs	r5, #14
 8002cee:	5f49      	ldrsh	r1, [r1, r5]
 8002cf0:	f000 f8b2 	bl	8002e58 <_lseek_r>
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	1c42      	adds	r2, r0, #1
 8002cf8:	d103      	bne.n	8002d02 <__sseek+0x1a>
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <__sseek+0x28>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	0152      	lsls	r2, r2, #5
 8002d06:	4313      	orrs	r3, r2
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d0c:	e7f8      	b.n	8002d00 <__sseek+0x18>
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	ffffefff 	.word	0xffffefff

08002d14 <__sclose>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	230e      	movs	r3, #14
 8002d18:	5ec9      	ldrsh	r1, [r1, r3]
 8002d1a:	f000 f88b 	bl	8002e34 <_close_r>
 8002d1e:	bd10      	pop	{r4, pc}

08002d20 <memcmp>:
 8002d20:	b530      	push	{r4, r5, lr}
 8002d22:	2400      	movs	r4, #0
 8002d24:	3901      	subs	r1, #1
 8002d26:	42a2      	cmp	r2, r4
 8002d28:	d101      	bne.n	8002d2e <memcmp+0xe>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e005      	b.n	8002d3a <memcmp+0x1a>
 8002d2e:	5d03      	ldrb	r3, [r0, r4]
 8002d30:	3401      	adds	r4, #1
 8002d32:	5d0d      	ldrb	r5, [r1, r4]
 8002d34:	42ab      	cmp	r3, r5
 8002d36:	d0f6      	beq.n	8002d26 <memcmp+0x6>
 8002d38:	1b58      	subs	r0, r3, r5
 8002d3a:	bd30      	pop	{r4, r5, pc}

08002d3c <memset>:
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	1882      	adds	r2, r0, r2
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	7019      	strb	r1, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <strncpy>:
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	b530      	push	{r4, r5, lr}
 8002d50:	001d      	movs	r5, r3
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d006      	beq.n	8002d64 <strncpy+0x18>
 8002d56:	780c      	ldrb	r4, [r1, #0]
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	702c      	strb	r4, [r5, #0]
 8002d5e:	3101      	adds	r1, #1
 8002d60:	2c00      	cmp	r4, #0
 8002d62:	d1f5      	bne.n	8002d50 <strncpy+0x4>
 8002d64:	2100      	movs	r1, #0
 8002d66:	189a      	adds	r2, r3, r2
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <strncpy+0x22>
 8002d6c:	bd30      	pop	{r4, r5, pc}
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e7f9      	b.n	8002d68 <strncpy+0x1c>

08002d74 <strtok>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <strtok+0x5c>)
 8002d78:	0005      	movs	r5, r0
 8002d7a:	681f      	ldr	r7, [r3, #0]
 8002d7c:	000e      	movs	r6, r1
 8002d7e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002d80:	2c00      	cmp	r4, #0
 8002d82:	d11d      	bne.n	8002dc0 <strtok+0x4c>
 8002d84:	2050      	movs	r0, #80	@ 0x50
 8002d86:	f7ff fd35 	bl	80027f4 <malloc>
 8002d8a:	1e02      	subs	r2, r0, #0
 8002d8c:	6478      	str	r0, [r7, #68]	@ 0x44
 8002d8e:	d104      	bne.n	8002d9a <strtok+0x26>
 8002d90:	215b      	movs	r1, #91	@ 0x5b
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <strtok+0x60>)
 8002d94:	4810      	ldr	r0, [pc, #64]	@ (8002dd8 <strtok+0x64>)
 8002d96:	f000 f8eb 	bl	8002f70 <__assert_func>
 8002d9a:	6004      	str	r4, [r0, #0]
 8002d9c:	6044      	str	r4, [r0, #4]
 8002d9e:	6084      	str	r4, [r0, #8]
 8002da0:	60c4      	str	r4, [r0, #12]
 8002da2:	6104      	str	r4, [r0, #16]
 8002da4:	6144      	str	r4, [r0, #20]
 8002da6:	6184      	str	r4, [r0, #24]
 8002da8:	6284      	str	r4, [r0, #40]	@ 0x28
 8002daa:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8002dac:	6304      	str	r4, [r0, #48]	@ 0x30
 8002dae:	6344      	str	r4, [r0, #52]	@ 0x34
 8002db0:	6384      	str	r4, [r0, #56]	@ 0x38
 8002db2:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8002db4:	6404      	str	r4, [r0, #64]	@ 0x40
 8002db6:	6444      	str	r4, [r0, #68]	@ 0x44
 8002db8:	6484      	str	r4, [r0, #72]	@ 0x48
 8002dba:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8002dbc:	7704      	strb	r4, [r0, #28]
 8002dbe:	6244      	str	r4, [r0, #36]	@ 0x24
 8002dc0:	0031      	movs	r1, r6
 8002dc2:	0028      	movs	r0, r5
 8002dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f000 f808 	bl	8002ddc <__strtok_r>
 8002dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	20000018 	.word	0x20000018
 8002dd4:	08003f9c 	.word	0x08003f9c
 8002dd8:	08003fb3 	.word	0x08003fb3

08002ddc <__strtok_r>:
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	1e04      	subs	r4, r0, #0
 8002de0:	d102      	bne.n	8002de8 <__strtok_r+0xc>
 8002de2:	6814      	ldr	r4, [r2, #0]
 8002de4:	2c00      	cmp	r4, #0
 8002de6:	d009      	beq.n	8002dfc <__strtok_r+0x20>
 8002de8:	0020      	movs	r0, r4
 8002dea:	000e      	movs	r6, r1
 8002dec:	7805      	ldrb	r5, [r0, #0]
 8002dee:	3401      	adds	r4, #1
 8002df0:	7837      	ldrb	r7, [r6, #0]
 8002df2:	2f00      	cmp	r7, #0
 8002df4:	d104      	bne.n	8002e00 <__strtok_r+0x24>
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d10d      	bne.n	8002e16 <__strtok_r+0x3a>
 8002dfa:	6015      	str	r5, [r2, #0]
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e006      	b.n	8002e0e <__strtok_r+0x32>
 8002e00:	3601      	adds	r6, #1
 8002e02:	42bd      	cmp	r5, r7
 8002e04:	d1f4      	bne.n	8002df0 <__strtok_r+0x14>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ee      	bne.n	8002de8 <__strtok_r+0xc>
 8002e0a:	6014      	str	r4, [r2, #0]
 8002e0c:	7003      	strb	r3, [r0, #0]
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e10:	3301      	adds	r3, #1
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	d102      	bne.n	8002e1c <__strtok_r+0x40>
 8002e16:	000b      	movs	r3, r1
 8002e18:	7826      	ldrb	r6, [r4, #0]
 8002e1a:	3401      	adds	r4, #1
 8002e1c:	781d      	ldrb	r5, [r3, #0]
 8002e1e:	42ae      	cmp	r6, r5
 8002e20:	d1f6      	bne.n	8002e10 <__strtok_r+0x34>
 8002e22:	2300      	movs	r3, #0
 8002e24:	001d      	movs	r5, r3
 8002e26:	429e      	cmp	r6, r3
 8002e28:	d002      	beq.n	8002e30 <__strtok_r+0x54>
 8002e2a:	0023      	movs	r3, r4
 8002e2c:	1e61      	subs	r1, r4, #1
 8002e2e:	700d      	strb	r5, [r1, #0]
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e7ec      	b.n	8002e0e <__strtok_r+0x32>

08002e34 <_close_r>:
 8002e34:	2300      	movs	r3, #0
 8002e36:	b570      	push	{r4, r5, r6, lr}
 8002e38:	4d06      	ldr	r5, [pc, #24]	@ (8002e54 <_close_r+0x20>)
 8002e3a:	0004      	movs	r4, r0
 8002e3c:	0008      	movs	r0, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	f7fd ff66 	bl	8000d10 <_close>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d103      	bne.n	8002e50 <_close_r+0x1c>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d000      	beq.n	8002e50 <_close_r+0x1c>
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	2000050c 	.word	0x2000050c

08002e58 <_lseek_r>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	0004      	movs	r4, r0
 8002e5c:	0008      	movs	r0, r1
 8002e5e:	0011      	movs	r1, r2
 8002e60:	001a      	movs	r2, r3
 8002e62:	2300      	movs	r3, #0
 8002e64:	4d05      	ldr	r5, [pc, #20]	@ (8002e7c <_lseek_r+0x24>)
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	f7fd ff5c 	bl	8000d24 <_lseek>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d103      	bne.n	8002e78 <_lseek_r+0x20>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d000      	beq.n	8002e78 <_lseek_r+0x20>
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	2000050c 	.word	0x2000050c

08002e80 <_read_r>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	0004      	movs	r4, r0
 8002e84:	0008      	movs	r0, r1
 8002e86:	0011      	movs	r1, r2
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	4d05      	ldr	r5, [pc, #20]	@ (8002ea4 <_read_r+0x24>)
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	f7fd ff24 	bl	8000cdc <_read>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d103      	bne.n	8002ea0 <_read_r+0x20>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d000      	beq.n	8002ea0 <_read_r+0x20>
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	2000050c 	.word	0x2000050c

08002ea8 <_sbrk_r>:
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	b570      	push	{r4, r5, r6, lr}
 8002eac:	4d06      	ldr	r5, [pc, #24]	@ (8002ec8 <_sbrk_r+0x20>)
 8002eae:	0004      	movs	r4, r0
 8002eb0:	0008      	movs	r0, r1
 8002eb2:	602b      	str	r3, [r5, #0]
 8002eb4:	f7fd ff38 	bl	8000d28 <_sbrk>
 8002eb8:	1c43      	adds	r3, r0, #1
 8002eba:	d103      	bne.n	8002ec4 <_sbrk_r+0x1c>
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d000      	beq.n	8002ec4 <_sbrk_r+0x1c>
 8002ec2:	6023      	str	r3, [r4, #0]
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	2000050c 	.word	0x2000050c

08002ecc <_write_r>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	0004      	movs	r4, r0
 8002ed0:	0008      	movs	r0, r1
 8002ed2:	0011      	movs	r1, r2
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	4d05      	ldr	r5, [pc, #20]	@ (8002ef0 <_write_r+0x24>)
 8002eda:	602b      	str	r3, [r5, #0]
 8002edc:	f7fd ff0b 	bl	8000cf6 <_write>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d103      	bne.n	8002eec <_write_r+0x20>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d000      	beq.n	8002eec <_write_r+0x20>
 8002eea:	6023      	str	r3, [r4, #0]
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	2000050c 	.word	0x2000050c

08002ef4 <__errno>:
 8002ef4:	4b01      	ldr	r3, [pc, #4]	@ (8002efc <__errno+0x8>)
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	4770      	bx	lr
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	20000018 	.word	0x20000018

08002f00 <__libc_init_array>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	2600      	movs	r6, #0
 8002f04:	4c0c      	ldr	r4, [pc, #48]	@ (8002f38 <__libc_init_array+0x38>)
 8002f06:	4d0d      	ldr	r5, [pc, #52]	@ (8002f3c <__libc_init_array+0x3c>)
 8002f08:	1b64      	subs	r4, r4, r5
 8002f0a:	10a4      	asrs	r4, r4, #2
 8002f0c:	42a6      	cmp	r6, r4
 8002f0e:	d109      	bne.n	8002f24 <__libc_init_array+0x24>
 8002f10:	2600      	movs	r6, #0
 8002f12:	f000 ff4d 	bl	8003db0 <_init>
 8002f16:	4c0a      	ldr	r4, [pc, #40]	@ (8002f40 <__libc_init_array+0x40>)
 8002f18:	4d0a      	ldr	r5, [pc, #40]	@ (8002f44 <__libc_init_array+0x44>)
 8002f1a:	1b64      	subs	r4, r4, r5
 8002f1c:	10a4      	asrs	r4, r4, #2
 8002f1e:	42a6      	cmp	r6, r4
 8002f20:	d105      	bne.n	8002f2e <__libc_init_array+0x2e>
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	00b3      	lsls	r3, r6, #2
 8002f26:	58eb      	ldr	r3, [r5, r3]
 8002f28:	4798      	blx	r3
 8002f2a:	3601      	adds	r6, #1
 8002f2c:	e7ee      	b.n	8002f0c <__libc_init_array+0xc>
 8002f2e:	00b3      	lsls	r3, r6, #2
 8002f30:	58eb      	ldr	r3, [r5, r3]
 8002f32:	4798      	blx	r3
 8002f34:	3601      	adds	r6, #1
 8002f36:	e7f2      	b.n	8002f1e <__libc_init_array+0x1e>
 8002f38:	08004084 	.word	0x08004084
 8002f3c:	08004084 	.word	0x08004084
 8002f40:	08004088 	.word	0x08004088
 8002f44:	08004084 	.word	0x08004084

08002f48 <__retarget_lock_init_recursive>:
 8002f48:	4770      	bx	lr

08002f4a <__retarget_lock_acquire_recursive>:
 8002f4a:	4770      	bx	lr

08002f4c <__retarget_lock_release_recursive>:
 8002f4c:	4770      	bx	lr

08002f4e <strcpy>:
 8002f4e:	0003      	movs	r3, r0
 8002f50:	780a      	ldrb	r2, [r1, #0]
 8002f52:	3101      	adds	r1, #1
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d1f9      	bne.n	8002f50 <strcpy+0x2>
 8002f5c:	4770      	bx	lr

08002f5e <memcpy>:
 8002f5e:	2300      	movs	r3, #0
 8002f60:	b510      	push	{r4, lr}
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d100      	bne.n	8002f68 <memcpy+0xa>
 8002f66:	bd10      	pop	{r4, pc}
 8002f68:	5ccc      	ldrb	r4, [r1, r3]
 8002f6a:	54c4      	strb	r4, [r0, r3]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	e7f8      	b.n	8002f62 <memcpy+0x4>

08002f70 <__assert_func>:
 8002f70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002f72:	0014      	movs	r4, r2
 8002f74:	001a      	movs	r2, r3
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <__assert_func+0x2c>)
 8002f78:	0005      	movs	r5, r0
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	000e      	movs	r6, r1
 8002f7e:	68d8      	ldr	r0, [r3, #12]
 8002f80:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <__assert_func+0x30>)
 8002f82:	2c00      	cmp	r4, #0
 8002f84:	d101      	bne.n	8002f8a <__assert_func+0x1a>
 8002f86:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <__assert_func+0x34>)
 8002f88:	001c      	movs	r4, r3
 8002f8a:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <__assert_func+0x38>)
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	9402      	str	r4, [sp, #8]
 8002f90:	002b      	movs	r3, r5
 8002f92:	9600      	str	r6, [sp, #0]
 8002f94:	f000 fbe2 	bl	800375c <fiprintf>
 8002f98:	f000 fc0e 	bl	80037b8 <abort>
 8002f9c:	20000018 	.word	0x20000018
 8002fa0:	0800400d 	.word	0x0800400d
 8002fa4:	08003e63 	.word	0x08003e63
 8002fa8:	0800401a 	.word	0x0800401a

08002fac <_free_r>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	0005      	movs	r5, r0
 8002fb0:	1e0c      	subs	r4, r1, #0
 8002fb2:	d010      	beq.n	8002fd6 <_free_r+0x2a>
 8002fb4:	3c04      	subs	r4, #4
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da00      	bge.n	8002fbe <_free_r+0x12>
 8002fbc:	18e4      	adds	r4, r4, r3
 8002fbe:	0028      	movs	r0, r5
 8002fc0:	f7ff fcc4 	bl	800294c <__malloc_lock>
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <_free_r+0x90>)
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <_free_r+0x2c>
 8002fcc:	6063      	str	r3, [r4, #4]
 8002fce:	6014      	str	r4, [r2, #0]
 8002fd0:	0028      	movs	r0, r5
 8002fd2:	f7ff fcc3 	bl	800295c <__malloc_unlock>
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d908      	bls.n	8002fee <_free_r+0x42>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	1821      	adds	r1, r4, r0
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d1f3      	bne.n	8002fcc <_free_r+0x20>
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	1809      	adds	r1, r1, r0
 8002fea:	6021      	str	r1, [r4, #0]
 8002fec:	e7ee      	b.n	8002fcc <_free_r+0x20>
 8002fee:	001a      	movs	r2, r3
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <_free_r+0x4e>
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	d9f9      	bls.n	8002fee <_free_r+0x42>
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	1850      	adds	r0, r2, r1
 8002ffe:	42a0      	cmp	r0, r4
 8003000:	d10b      	bne.n	800301a <_free_r+0x6e>
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	1809      	adds	r1, r1, r0
 8003006:	1850      	adds	r0, r2, r1
 8003008:	6011      	str	r1, [r2, #0]
 800300a:	4283      	cmp	r3, r0
 800300c:	d1e0      	bne.n	8002fd0 <_free_r+0x24>
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	1841      	adds	r1, r0, r1
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	6053      	str	r3, [r2, #4]
 8003018:	e7da      	b.n	8002fd0 <_free_r+0x24>
 800301a:	42a0      	cmp	r0, r4
 800301c:	d902      	bls.n	8003024 <_free_r+0x78>
 800301e:	230c      	movs	r3, #12
 8003020:	602b      	str	r3, [r5, #0]
 8003022:	e7d5      	b.n	8002fd0 <_free_r+0x24>
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	1821      	adds	r1, r4, r0
 8003028:	428b      	cmp	r3, r1
 800302a:	d103      	bne.n	8003034 <_free_r+0x88>
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	1809      	adds	r1, r1, r0
 8003032:	6021      	str	r1, [r4, #0]
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	6054      	str	r4, [r2, #4]
 8003038:	e7ca      	b.n	8002fd0 <_free_r+0x24>
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	200003cc 	.word	0x200003cc

08003040 <__ssputs_r>:
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	688e      	ldr	r6, [r1, #8]
 8003044:	b085      	sub	sp, #20
 8003046:	001f      	movs	r7, r3
 8003048:	000c      	movs	r4, r1
 800304a:	680b      	ldr	r3, [r1, #0]
 800304c:	9002      	str	r0, [sp, #8]
 800304e:	9203      	str	r2, [sp, #12]
 8003050:	42be      	cmp	r6, r7
 8003052:	d830      	bhi.n	80030b6 <__ssputs_r+0x76>
 8003054:	210c      	movs	r1, #12
 8003056:	5e62      	ldrsh	r2, [r4, r1]
 8003058:	2190      	movs	r1, #144	@ 0x90
 800305a:	00c9      	lsls	r1, r1, #3
 800305c:	420a      	tst	r2, r1
 800305e:	d028      	beq.n	80030b2 <__ssputs_r+0x72>
 8003060:	2003      	movs	r0, #3
 8003062:	6921      	ldr	r1, [r4, #16]
 8003064:	1a5b      	subs	r3, r3, r1
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	6963      	ldr	r3, [r4, #20]
 800306a:	4343      	muls	r3, r0
 800306c:	9801      	ldr	r0, [sp, #4]
 800306e:	0fdd      	lsrs	r5, r3, #31
 8003070:	18ed      	adds	r5, r5, r3
 8003072:	1c7b      	adds	r3, r7, #1
 8003074:	181b      	adds	r3, r3, r0
 8003076:	106d      	asrs	r5, r5, #1
 8003078:	42ab      	cmp	r3, r5
 800307a:	d900      	bls.n	800307e <__ssputs_r+0x3e>
 800307c:	001d      	movs	r5, r3
 800307e:	0552      	lsls	r2, r2, #21
 8003080:	d528      	bpl.n	80030d4 <__ssputs_r+0x94>
 8003082:	0029      	movs	r1, r5
 8003084:	9802      	ldr	r0, [sp, #8]
 8003086:	f7ff fbe1 	bl	800284c <_malloc_r>
 800308a:	1e06      	subs	r6, r0, #0
 800308c:	d02c      	beq.n	80030e8 <__ssputs_r+0xa8>
 800308e:	9a01      	ldr	r2, [sp, #4]
 8003090:	6921      	ldr	r1, [r4, #16]
 8003092:	f7ff ff64 	bl	8002f5e <memcpy>
 8003096:	89a2      	ldrh	r2, [r4, #12]
 8003098:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <__ssputs_r+0xbc>)
 800309a:	401a      	ands	r2, r3
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	4313      	orrs	r3, r2
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	6126      	str	r6, [r4, #16]
 80030a6:	18f6      	adds	r6, r6, r3
 80030a8:	6026      	str	r6, [r4, #0]
 80030aa:	003e      	movs	r6, r7
 80030ac:	6165      	str	r5, [r4, #20]
 80030ae:	1aed      	subs	r5, r5, r3
 80030b0:	60a5      	str	r5, [r4, #8]
 80030b2:	42be      	cmp	r6, r7
 80030b4:	d900      	bls.n	80030b8 <__ssputs_r+0x78>
 80030b6:	003e      	movs	r6, r7
 80030b8:	0032      	movs	r2, r6
 80030ba:	9903      	ldr	r1, [sp, #12]
 80030bc:	6820      	ldr	r0, [r4, #0]
 80030be:	f000 fb5d 	bl	800377c <memmove>
 80030c2:	2000      	movs	r0, #0
 80030c4:	68a3      	ldr	r3, [r4, #8]
 80030c6:	1b9b      	subs	r3, r3, r6
 80030c8:	60a3      	str	r3, [r4, #8]
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	199b      	adds	r3, r3, r6
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	b005      	add	sp, #20
 80030d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d4:	002a      	movs	r2, r5
 80030d6:	9802      	ldr	r0, [sp, #8]
 80030d8:	f000 fb75 	bl	80037c6 <_realloc_r>
 80030dc:	1e06      	subs	r6, r0, #0
 80030de:	d1e0      	bne.n	80030a2 <__ssputs_r+0x62>
 80030e0:	6921      	ldr	r1, [r4, #16]
 80030e2:	9802      	ldr	r0, [sp, #8]
 80030e4:	f7ff ff62 	bl	8002fac <_free_r>
 80030e8:	230c      	movs	r3, #12
 80030ea:	2001      	movs	r0, #1
 80030ec:	9a02      	ldr	r2, [sp, #8]
 80030ee:	4240      	negs	r0, r0
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	89a2      	ldrh	r2, [r4, #12]
 80030f4:	3334      	adds	r3, #52	@ 0x34
 80030f6:	4313      	orrs	r3, r2
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	e7e9      	b.n	80030d0 <__ssputs_r+0x90>
 80030fc:	fffffb7f 	.word	0xfffffb7f

08003100 <_svfiprintf_r>:
 8003100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003102:	b0a1      	sub	sp, #132	@ 0x84
 8003104:	9003      	str	r0, [sp, #12]
 8003106:	001d      	movs	r5, r3
 8003108:	898b      	ldrh	r3, [r1, #12]
 800310a:	000f      	movs	r7, r1
 800310c:	0016      	movs	r6, r2
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	d511      	bpl.n	8003136 <_svfiprintf_r+0x36>
 8003112:	690b      	ldr	r3, [r1, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10e      	bne.n	8003136 <_svfiprintf_r+0x36>
 8003118:	2140      	movs	r1, #64	@ 0x40
 800311a:	f7ff fb97 	bl	800284c <_malloc_r>
 800311e:	6038      	str	r0, [r7, #0]
 8003120:	6138      	str	r0, [r7, #16]
 8003122:	2800      	cmp	r0, #0
 8003124:	d105      	bne.n	8003132 <_svfiprintf_r+0x32>
 8003126:	230c      	movs	r3, #12
 8003128:	9a03      	ldr	r2, [sp, #12]
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	2001      	movs	r0, #1
 800312e:	4240      	negs	r0, r0
 8003130:	e0cf      	b.n	80032d2 <_svfiprintf_r+0x1d2>
 8003132:	2340      	movs	r3, #64	@ 0x40
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	2300      	movs	r3, #0
 8003138:	ac08      	add	r4, sp, #32
 800313a:	6163      	str	r3, [r4, #20]
 800313c:	3320      	adds	r3, #32
 800313e:	7663      	strb	r3, [r4, #25]
 8003140:	3310      	adds	r3, #16
 8003142:	76a3      	strb	r3, [r4, #26]
 8003144:	9507      	str	r5, [sp, #28]
 8003146:	0035      	movs	r5, r6
 8003148:	782b      	ldrb	r3, [r5, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <_svfiprintf_r+0x52>
 800314e:	2b25      	cmp	r3, #37	@ 0x25
 8003150:	d148      	bne.n	80031e4 <_svfiprintf_r+0xe4>
 8003152:	1bab      	subs	r3, r5, r6
 8003154:	9305      	str	r3, [sp, #20]
 8003156:	42b5      	cmp	r5, r6
 8003158:	d00b      	beq.n	8003172 <_svfiprintf_r+0x72>
 800315a:	0032      	movs	r2, r6
 800315c:	0039      	movs	r1, r7
 800315e:	9803      	ldr	r0, [sp, #12]
 8003160:	f7ff ff6e 	bl	8003040 <__ssputs_r>
 8003164:	3001      	adds	r0, #1
 8003166:	d100      	bne.n	800316a <_svfiprintf_r+0x6a>
 8003168:	e0ae      	b.n	80032c8 <_svfiprintf_r+0x1c8>
 800316a:	6963      	ldr	r3, [r4, #20]
 800316c:	9a05      	ldr	r2, [sp, #20]
 800316e:	189b      	adds	r3, r3, r2
 8003170:	6163      	str	r3, [r4, #20]
 8003172:	782b      	ldrb	r3, [r5, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d100      	bne.n	800317a <_svfiprintf_r+0x7a>
 8003178:	e0a6      	b.n	80032c8 <_svfiprintf_r+0x1c8>
 800317a:	2201      	movs	r2, #1
 800317c:	2300      	movs	r3, #0
 800317e:	4252      	negs	r2, r2
 8003180:	6062      	str	r2, [r4, #4]
 8003182:	a904      	add	r1, sp, #16
 8003184:	3254      	adds	r2, #84	@ 0x54
 8003186:	1852      	adds	r2, r2, r1
 8003188:	1c6e      	adds	r6, r5, #1
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	60e3      	str	r3, [r4, #12]
 800318e:	60a3      	str	r3, [r4, #8]
 8003190:	7013      	strb	r3, [r2, #0]
 8003192:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003194:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <_svfiprintf_r+0x1e8>)
 8003196:	2205      	movs	r2, #5
 8003198:	0018      	movs	r0, r3
 800319a:	7831      	ldrb	r1, [r6, #0]
 800319c:	9305      	str	r3, [sp, #20]
 800319e:	f000 fb00 	bl	80037a2 <memchr>
 80031a2:	1c75      	adds	r5, r6, #1
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d11f      	bne.n	80031e8 <_svfiprintf_r+0xe8>
 80031a8:	6822      	ldr	r2, [r4, #0]
 80031aa:	06d3      	lsls	r3, r2, #27
 80031ac:	d504      	bpl.n	80031b8 <_svfiprintf_r+0xb8>
 80031ae:	2353      	movs	r3, #83	@ 0x53
 80031b0:	a904      	add	r1, sp, #16
 80031b2:	185b      	adds	r3, r3, r1
 80031b4:	2120      	movs	r1, #32
 80031b6:	7019      	strb	r1, [r3, #0]
 80031b8:	0713      	lsls	r3, r2, #28
 80031ba:	d504      	bpl.n	80031c6 <_svfiprintf_r+0xc6>
 80031bc:	2353      	movs	r3, #83	@ 0x53
 80031be:	a904      	add	r1, sp, #16
 80031c0:	185b      	adds	r3, r3, r1
 80031c2:	212b      	movs	r1, #43	@ 0x2b
 80031c4:	7019      	strb	r1, [r3, #0]
 80031c6:	7833      	ldrb	r3, [r6, #0]
 80031c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031ca:	d016      	beq.n	80031fa <_svfiprintf_r+0xfa>
 80031cc:	0035      	movs	r5, r6
 80031ce:	2100      	movs	r1, #0
 80031d0:	200a      	movs	r0, #10
 80031d2:	68e3      	ldr	r3, [r4, #12]
 80031d4:	782a      	ldrb	r2, [r5, #0]
 80031d6:	1c6e      	adds	r6, r5, #1
 80031d8:	3a30      	subs	r2, #48	@ 0x30
 80031da:	2a09      	cmp	r2, #9
 80031dc:	d950      	bls.n	8003280 <_svfiprintf_r+0x180>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d111      	bne.n	8003206 <_svfiprintf_r+0x106>
 80031e2:	e017      	b.n	8003214 <_svfiprintf_r+0x114>
 80031e4:	3501      	adds	r5, #1
 80031e6:	e7af      	b.n	8003148 <_svfiprintf_r+0x48>
 80031e8:	9b05      	ldr	r3, [sp, #20]
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	1ac0      	subs	r0, r0, r3
 80031ee:	2301      	movs	r3, #1
 80031f0:	4083      	lsls	r3, r0
 80031f2:	4313      	orrs	r3, r2
 80031f4:	002e      	movs	r6, r5
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	e7cc      	b.n	8003194 <_svfiprintf_r+0x94>
 80031fa:	9b07      	ldr	r3, [sp, #28]
 80031fc:	1d19      	adds	r1, r3, #4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	9107      	str	r1, [sp, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db01      	blt.n	800320a <_svfiprintf_r+0x10a>
 8003206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003208:	e004      	b.n	8003214 <_svfiprintf_r+0x114>
 800320a:	425b      	negs	r3, r3
 800320c:	60e3      	str	r3, [r4, #12]
 800320e:	2302      	movs	r3, #2
 8003210:	4313      	orrs	r3, r2
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	782b      	ldrb	r3, [r5, #0]
 8003216:	2b2e      	cmp	r3, #46	@ 0x2e
 8003218:	d10c      	bne.n	8003234 <_svfiprintf_r+0x134>
 800321a:	786b      	ldrb	r3, [r5, #1]
 800321c:	2b2a      	cmp	r3, #42	@ 0x2a
 800321e:	d134      	bne.n	800328a <_svfiprintf_r+0x18a>
 8003220:	9b07      	ldr	r3, [sp, #28]
 8003222:	3502      	adds	r5, #2
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	9207      	str	r2, [sp, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	da01      	bge.n	8003232 <_svfiprintf_r+0x132>
 800322e:	2301      	movs	r3, #1
 8003230:	425b      	negs	r3, r3
 8003232:	9309      	str	r3, [sp, #36]	@ 0x24
 8003234:	4e2d      	ldr	r6, [pc, #180]	@ (80032ec <_svfiprintf_r+0x1ec>)
 8003236:	2203      	movs	r2, #3
 8003238:	0030      	movs	r0, r6
 800323a:	7829      	ldrb	r1, [r5, #0]
 800323c:	f000 fab1 	bl	80037a2 <memchr>
 8003240:	2800      	cmp	r0, #0
 8003242:	d006      	beq.n	8003252 <_svfiprintf_r+0x152>
 8003244:	2340      	movs	r3, #64	@ 0x40
 8003246:	1b80      	subs	r0, r0, r6
 8003248:	4083      	lsls	r3, r0
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	3501      	adds	r5, #1
 800324e:	4313      	orrs	r3, r2
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	7829      	ldrb	r1, [r5, #0]
 8003254:	2206      	movs	r2, #6
 8003256:	4826      	ldr	r0, [pc, #152]	@ (80032f0 <_svfiprintf_r+0x1f0>)
 8003258:	1c6e      	adds	r6, r5, #1
 800325a:	7621      	strb	r1, [r4, #24]
 800325c:	f000 faa1 	bl	80037a2 <memchr>
 8003260:	2800      	cmp	r0, #0
 8003262:	d038      	beq.n	80032d6 <_svfiprintf_r+0x1d6>
 8003264:	4b23      	ldr	r3, [pc, #140]	@ (80032f4 <_svfiprintf_r+0x1f4>)
 8003266:	2b00      	cmp	r3, #0
 8003268:	d122      	bne.n	80032b0 <_svfiprintf_r+0x1b0>
 800326a:	2207      	movs	r2, #7
 800326c:	9b07      	ldr	r3, [sp, #28]
 800326e:	3307      	adds	r3, #7
 8003270:	4393      	bics	r3, r2
 8003272:	3308      	adds	r3, #8
 8003274:	9307      	str	r3, [sp, #28]
 8003276:	6963      	ldr	r3, [r4, #20]
 8003278:	9a04      	ldr	r2, [sp, #16]
 800327a:	189b      	adds	r3, r3, r2
 800327c:	6163      	str	r3, [r4, #20]
 800327e:	e762      	b.n	8003146 <_svfiprintf_r+0x46>
 8003280:	4343      	muls	r3, r0
 8003282:	0035      	movs	r5, r6
 8003284:	2101      	movs	r1, #1
 8003286:	189b      	adds	r3, r3, r2
 8003288:	e7a4      	b.n	80031d4 <_svfiprintf_r+0xd4>
 800328a:	2300      	movs	r3, #0
 800328c:	200a      	movs	r0, #10
 800328e:	0019      	movs	r1, r3
 8003290:	3501      	adds	r5, #1
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	782a      	ldrb	r2, [r5, #0]
 8003296:	1c6e      	adds	r6, r5, #1
 8003298:	3a30      	subs	r2, #48	@ 0x30
 800329a:	2a09      	cmp	r2, #9
 800329c:	d903      	bls.n	80032a6 <_svfiprintf_r+0x1a6>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0c8      	beq.n	8003234 <_svfiprintf_r+0x134>
 80032a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80032a4:	e7c6      	b.n	8003234 <_svfiprintf_r+0x134>
 80032a6:	4341      	muls	r1, r0
 80032a8:	0035      	movs	r5, r6
 80032aa:	2301      	movs	r3, #1
 80032ac:	1889      	adds	r1, r1, r2
 80032ae:	e7f1      	b.n	8003294 <_svfiprintf_r+0x194>
 80032b0:	aa07      	add	r2, sp, #28
 80032b2:	9200      	str	r2, [sp, #0]
 80032b4:	0021      	movs	r1, r4
 80032b6:	003a      	movs	r2, r7
 80032b8:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <_svfiprintf_r+0x1f8>)
 80032ba:	9803      	ldr	r0, [sp, #12]
 80032bc:	e000      	b.n	80032c0 <_svfiprintf_r+0x1c0>
 80032be:	bf00      	nop
 80032c0:	9004      	str	r0, [sp, #16]
 80032c2:	9b04      	ldr	r3, [sp, #16]
 80032c4:	3301      	adds	r3, #1
 80032c6:	d1d6      	bne.n	8003276 <_svfiprintf_r+0x176>
 80032c8:	89bb      	ldrh	r3, [r7, #12]
 80032ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80032cc:	065b      	lsls	r3, r3, #25
 80032ce:	d500      	bpl.n	80032d2 <_svfiprintf_r+0x1d2>
 80032d0:	e72c      	b.n	800312c <_svfiprintf_r+0x2c>
 80032d2:	b021      	add	sp, #132	@ 0x84
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d6:	aa07      	add	r2, sp, #28
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	0021      	movs	r1, r4
 80032dc:	003a      	movs	r2, r7
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <_svfiprintf_r+0x1f8>)
 80032e0:	9803      	ldr	r0, [sp, #12]
 80032e2:	f000 f87b 	bl	80033dc <_printf_i>
 80032e6:	e7eb      	b.n	80032c0 <_svfiprintf_r+0x1c0>
 80032e8:	08004049 	.word	0x08004049
 80032ec:	0800404f 	.word	0x0800404f
 80032f0:	08004053 	.word	0x08004053
 80032f4:	00000000 	.word	0x00000000
 80032f8:	08003041 	.word	0x08003041

080032fc <_printf_common>:
 80032fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032fe:	0016      	movs	r6, r2
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	688a      	ldr	r2, [r1, #8]
 8003304:	690b      	ldr	r3, [r1, #16]
 8003306:	000c      	movs	r4, r1
 8003308:	9000      	str	r0, [sp, #0]
 800330a:	4293      	cmp	r3, r2
 800330c:	da00      	bge.n	8003310 <_printf_common+0x14>
 800330e:	0013      	movs	r3, r2
 8003310:	0022      	movs	r2, r4
 8003312:	6033      	str	r3, [r6, #0]
 8003314:	3243      	adds	r2, #67	@ 0x43
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	2a00      	cmp	r2, #0
 800331a:	d001      	beq.n	8003320 <_printf_common+0x24>
 800331c:	3301      	adds	r3, #1
 800331e:	6033      	str	r3, [r6, #0]
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	069b      	lsls	r3, r3, #26
 8003324:	d502      	bpl.n	800332c <_printf_common+0x30>
 8003326:	6833      	ldr	r3, [r6, #0]
 8003328:	3302      	adds	r3, #2
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	2306      	movs	r3, #6
 8003330:	0015      	movs	r5, r2
 8003332:	401d      	ands	r5, r3
 8003334:	421a      	tst	r2, r3
 8003336:	d027      	beq.n	8003388 <_printf_common+0x8c>
 8003338:	0023      	movs	r3, r4
 800333a:	3343      	adds	r3, #67	@ 0x43
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	4193      	sbcs	r3, r2
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	0692      	lsls	r2, r2, #26
 8003346:	d430      	bmi.n	80033aa <_printf_common+0xae>
 8003348:	0022      	movs	r2, r4
 800334a:	9901      	ldr	r1, [sp, #4]
 800334c:	9800      	ldr	r0, [sp, #0]
 800334e:	9d08      	ldr	r5, [sp, #32]
 8003350:	3243      	adds	r2, #67	@ 0x43
 8003352:	47a8      	blx	r5
 8003354:	3001      	adds	r0, #1
 8003356:	d025      	beq.n	80033a4 <_printf_common+0xa8>
 8003358:	2206      	movs	r2, #6
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	2500      	movs	r5, #0
 800335e:	4013      	ands	r3, r2
 8003360:	2b04      	cmp	r3, #4
 8003362:	d105      	bne.n	8003370 <_printf_common+0x74>
 8003364:	6833      	ldr	r3, [r6, #0]
 8003366:	68e5      	ldr	r5, [r4, #12]
 8003368:	1aed      	subs	r5, r5, r3
 800336a:	43eb      	mvns	r3, r5
 800336c:	17db      	asrs	r3, r3, #31
 800336e:	401d      	ands	r5, r3
 8003370:	68a3      	ldr	r3, [r4, #8]
 8003372:	6922      	ldr	r2, [r4, #16]
 8003374:	4293      	cmp	r3, r2
 8003376:	dd01      	ble.n	800337c <_printf_common+0x80>
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	18ed      	adds	r5, r5, r3
 800337c:	2600      	movs	r6, #0
 800337e:	42b5      	cmp	r5, r6
 8003380:	d120      	bne.n	80033c4 <_printf_common+0xc8>
 8003382:	2000      	movs	r0, #0
 8003384:	e010      	b.n	80033a8 <_printf_common+0xac>
 8003386:	3501      	adds	r5, #1
 8003388:	68e3      	ldr	r3, [r4, #12]
 800338a:	6832      	ldr	r2, [r6, #0]
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	42ab      	cmp	r3, r5
 8003390:	ddd2      	ble.n	8003338 <_printf_common+0x3c>
 8003392:	0022      	movs	r2, r4
 8003394:	2301      	movs	r3, #1
 8003396:	9901      	ldr	r1, [sp, #4]
 8003398:	9800      	ldr	r0, [sp, #0]
 800339a:	9f08      	ldr	r7, [sp, #32]
 800339c:	3219      	adds	r2, #25
 800339e:	47b8      	blx	r7
 80033a0:	3001      	adds	r0, #1
 80033a2:	d1f0      	bne.n	8003386 <_printf_common+0x8a>
 80033a4:	2001      	movs	r0, #1
 80033a6:	4240      	negs	r0, r0
 80033a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033aa:	2030      	movs	r0, #48	@ 0x30
 80033ac:	18e1      	adds	r1, r4, r3
 80033ae:	3143      	adds	r1, #67	@ 0x43
 80033b0:	7008      	strb	r0, [r1, #0]
 80033b2:	0021      	movs	r1, r4
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	3145      	adds	r1, #69	@ 0x45
 80033b8:	7809      	ldrb	r1, [r1, #0]
 80033ba:	18a2      	adds	r2, r4, r2
 80033bc:	3243      	adds	r2, #67	@ 0x43
 80033be:	3302      	adds	r3, #2
 80033c0:	7011      	strb	r1, [r2, #0]
 80033c2:	e7c1      	b.n	8003348 <_printf_common+0x4c>
 80033c4:	0022      	movs	r2, r4
 80033c6:	2301      	movs	r3, #1
 80033c8:	9901      	ldr	r1, [sp, #4]
 80033ca:	9800      	ldr	r0, [sp, #0]
 80033cc:	9f08      	ldr	r7, [sp, #32]
 80033ce:	321a      	adds	r2, #26
 80033d0:	47b8      	blx	r7
 80033d2:	3001      	adds	r0, #1
 80033d4:	d0e6      	beq.n	80033a4 <_printf_common+0xa8>
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7d1      	b.n	800337e <_printf_common+0x82>
	...

080033dc <_printf_i>:
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	b08b      	sub	sp, #44	@ 0x2c
 80033e0:	9206      	str	r2, [sp, #24]
 80033e2:	000a      	movs	r2, r1
 80033e4:	3243      	adds	r2, #67	@ 0x43
 80033e6:	9307      	str	r3, [sp, #28]
 80033e8:	9005      	str	r0, [sp, #20]
 80033ea:	9203      	str	r2, [sp, #12]
 80033ec:	7e0a      	ldrb	r2, [r1, #24]
 80033ee:	000c      	movs	r4, r1
 80033f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80033f2:	2a78      	cmp	r2, #120	@ 0x78
 80033f4:	d809      	bhi.n	800340a <_printf_i+0x2e>
 80033f6:	2a62      	cmp	r2, #98	@ 0x62
 80033f8:	d80b      	bhi.n	8003412 <_printf_i+0x36>
 80033fa:	2a00      	cmp	r2, #0
 80033fc:	d100      	bne.n	8003400 <_printf_i+0x24>
 80033fe:	e0bc      	b.n	800357a <_printf_i+0x19e>
 8003400:	497b      	ldr	r1, [pc, #492]	@ (80035f0 <_printf_i+0x214>)
 8003402:	9104      	str	r1, [sp, #16]
 8003404:	2a58      	cmp	r2, #88	@ 0x58
 8003406:	d100      	bne.n	800340a <_printf_i+0x2e>
 8003408:	e090      	b.n	800352c <_printf_i+0x150>
 800340a:	0025      	movs	r5, r4
 800340c:	3542      	adds	r5, #66	@ 0x42
 800340e:	702a      	strb	r2, [r5, #0]
 8003410:	e022      	b.n	8003458 <_printf_i+0x7c>
 8003412:	0010      	movs	r0, r2
 8003414:	3863      	subs	r0, #99	@ 0x63
 8003416:	2815      	cmp	r0, #21
 8003418:	d8f7      	bhi.n	800340a <_printf_i+0x2e>
 800341a:	f7fc fe7d 	bl	8000118 <__gnu_thumb1_case_shi>
 800341e:	0016      	.short	0x0016
 8003420:	fff6001f 	.word	0xfff6001f
 8003424:	fff6fff6 	.word	0xfff6fff6
 8003428:	001ffff6 	.word	0x001ffff6
 800342c:	fff6fff6 	.word	0xfff6fff6
 8003430:	fff6fff6 	.word	0xfff6fff6
 8003434:	003600a1 	.word	0x003600a1
 8003438:	fff60080 	.word	0xfff60080
 800343c:	00b2fff6 	.word	0x00b2fff6
 8003440:	0036fff6 	.word	0x0036fff6
 8003444:	fff6fff6 	.word	0xfff6fff6
 8003448:	0084      	.short	0x0084
 800344a:	0025      	movs	r5, r4
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	3542      	adds	r5, #66	@ 0x42
 8003450:	1d11      	adds	r1, r2, #4
 8003452:	6019      	str	r1, [r3, #0]
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	702b      	strb	r3, [r5, #0]
 8003458:	2301      	movs	r3, #1
 800345a:	e0a0      	b.n	800359e <_printf_i+0x1c2>
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	6809      	ldr	r1, [r1, #0]
 8003460:	1d02      	adds	r2, r0, #4
 8003462:	060d      	lsls	r5, r1, #24
 8003464:	d50b      	bpl.n	800347e <_printf_i+0xa2>
 8003466:	6806      	ldr	r6, [r0, #0]
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	2e00      	cmp	r6, #0
 800346c:	da03      	bge.n	8003476 <_printf_i+0x9a>
 800346e:	232d      	movs	r3, #45	@ 0x2d
 8003470:	9a03      	ldr	r2, [sp, #12]
 8003472:	4276      	negs	r6, r6
 8003474:	7013      	strb	r3, [r2, #0]
 8003476:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <_printf_i+0x214>)
 8003478:	270a      	movs	r7, #10
 800347a:	9304      	str	r3, [sp, #16]
 800347c:	e018      	b.n	80034b0 <_printf_i+0xd4>
 800347e:	6806      	ldr	r6, [r0, #0]
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	0649      	lsls	r1, r1, #25
 8003484:	d5f1      	bpl.n	800346a <_printf_i+0x8e>
 8003486:	b236      	sxth	r6, r6
 8003488:	e7ef      	b.n	800346a <_printf_i+0x8e>
 800348a:	6808      	ldr	r0, [r1, #0]
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	c940      	ldmia	r1!, {r6}
 8003490:	0605      	lsls	r5, r0, #24
 8003492:	d402      	bmi.n	800349a <_printf_i+0xbe>
 8003494:	0640      	lsls	r0, r0, #25
 8003496:	d500      	bpl.n	800349a <_printf_i+0xbe>
 8003498:	b2b6      	uxth	r6, r6
 800349a:	6019      	str	r1, [r3, #0]
 800349c:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <_printf_i+0x214>)
 800349e:	270a      	movs	r7, #10
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	2a6f      	cmp	r2, #111	@ 0x6f
 80034a4:	d100      	bne.n	80034a8 <_printf_i+0xcc>
 80034a6:	3f02      	subs	r7, #2
 80034a8:	0023      	movs	r3, r4
 80034aa:	2200      	movs	r2, #0
 80034ac:	3343      	adds	r3, #67	@ 0x43
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	6863      	ldr	r3, [r4, #4]
 80034b2:	60a3      	str	r3, [r4, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db03      	blt.n	80034c0 <_printf_i+0xe4>
 80034b8:	2104      	movs	r1, #4
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	438a      	bics	r2, r1
 80034be:	6022      	str	r2, [r4, #0]
 80034c0:	2e00      	cmp	r6, #0
 80034c2:	d102      	bne.n	80034ca <_printf_i+0xee>
 80034c4:	9d03      	ldr	r5, [sp, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <_printf_i+0x108>
 80034ca:	9d03      	ldr	r5, [sp, #12]
 80034cc:	0030      	movs	r0, r6
 80034ce:	0039      	movs	r1, r7
 80034d0:	f7fc feb2 	bl	8000238 <__aeabi_uidivmod>
 80034d4:	9b04      	ldr	r3, [sp, #16]
 80034d6:	3d01      	subs	r5, #1
 80034d8:	5c5b      	ldrb	r3, [r3, r1]
 80034da:	702b      	strb	r3, [r5, #0]
 80034dc:	0033      	movs	r3, r6
 80034de:	0006      	movs	r6, r0
 80034e0:	429f      	cmp	r7, r3
 80034e2:	d9f3      	bls.n	80034cc <_printf_i+0xf0>
 80034e4:	2f08      	cmp	r7, #8
 80034e6:	d109      	bne.n	80034fc <_printf_i+0x120>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	07db      	lsls	r3, r3, #31
 80034ec:	d506      	bpl.n	80034fc <_printf_i+0x120>
 80034ee:	6862      	ldr	r2, [r4, #4]
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	dc02      	bgt.n	80034fc <_printf_i+0x120>
 80034f6:	2330      	movs	r3, #48	@ 0x30
 80034f8:	3d01      	subs	r5, #1
 80034fa:	702b      	strb	r3, [r5, #0]
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	1b5b      	subs	r3, r3, r5
 8003500:	6123      	str	r3, [r4, #16]
 8003502:	9b07      	ldr	r3, [sp, #28]
 8003504:	0021      	movs	r1, r4
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	9805      	ldr	r0, [sp, #20]
 800350a:	9b06      	ldr	r3, [sp, #24]
 800350c:	aa09      	add	r2, sp, #36	@ 0x24
 800350e:	f7ff fef5 	bl	80032fc <_printf_common>
 8003512:	3001      	adds	r0, #1
 8003514:	d148      	bne.n	80035a8 <_printf_i+0x1cc>
 8003516:	2001      	movs	r0, #1
 8003518:	4240      	negs	r0, r0
 800351a:	b00b      	add	sp, #44	@ 0x2c
 800351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351e:	2220      	movs	r2, #32
 8003520:	6809      	ldr	r1, [r1, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	6022      	str	r2, [r4, #0]
 8003526:	2278      	movs	r2, #120	@ 0x78
 8003528:	4932      	ldr	r1, [pc, #200]	@ (80035f4 <_printf_i+0x218>)
 800352a:	9104      	str	r1, [sp, #16]
 800352c:	0021      	movs	r1, r4
 800352e:	3145      	adds	r1, #69	@ 0x45
 8003530:	700a      	strb	r2, [r1, #0]
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	c940      	ldmia	r1!, {r6}
 8003538:	0610      	lsls	r0, r2, #24
 800353a:	d402      	bmi.n	8003542 <_printf_i+0x166>
 800353c:	0650      	lsls	r0, r2, #25
 800353e:	d500      	bpl.n	8003542 <_printf_i+0x166>
 8003540:	b2b6      	uxth	r6, r6
 8003542:	6019      	str	r1, [r3, #0]
 8003544:	07d3      	lsls	r3, r2, #31
 8003546:	d502      	bpl.n	800354e <_printf_i+0x172>
 8003548:	2320      	movs	r3, #32
 800354a:	4313      	orrs	r3, r2
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	2e00      	cmp	r6, #0
 8003550:	d001      	beq.n	8003556 <_printf_i+0x17a>
 8003552:	2710      	movs	r7, #16
 8003554:	e7a8      	b.n	80034a8 <_printf_i+0xcc>
 8003556:	2220      	movs	r2, #32
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	4393      	bics	r3, r2
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	e7f8      	b.n	8003552 <_printf_i+0x176>
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	680d      	ldr	r5, [r1, #0]
 8003564:	1d10      	adds	r0, r2, #4
 8003566:	6949      	ldr	r1, [r1, #20]
 8003568:	6018      	str	r0, [r3, #0]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	062e      	lsls	r6, r5, #24
 800356e:	d501      	bpl.n	8003574 <_printf_i+0x198>
 8003570:	6019      	str	r1, [r3, #0]
 8003572:	e002      	b.n	800357a <_printf_i+0x19e>
 8003574:	066d      	lsls	r5, r5, #25
 8003576:	d5fb      	bpl.n	8003570 <_printf_i+0x194>
 8003578:	8019      	strh	r1, [r3, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	9d03      	ldr	r5, [sp, #12]
 800357e:	6123      	str	r3, [r4, #16]
 8003580:	e7bf      	b.n	8003502 <_printf_i+0x126>
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	1d11      	adds	r1, r2, #4
 8003586:	6019      	str	r1, [r3, #0]
 8003588:	6815      	ldr	r5, [r2, #0]
 800358a:	2100      	movs	r1, #0
 800358c:	0028      	movs	r0, r5
 800358e:	6862      	ldr	r2, [r4, #4]
 8003590:	f000 f907 	bl	80037a2 <memchr>
 8003594:	2800      	cmp	r0, #0
 8003596:	d001      	beq.n	800359c <_printf_i+0x1c0>
 8003598:	1b40      	subs	r0, r0, r5
 800359a:	6060      	str	r0, [r4, #4]
 800359c:	6863      	ldr	r3, [r4, #4]
 800359e:	6123      	str	r3, [r4, #16]
 80035a0:	2300      	movs	r3, #0
 80035a2:	9a03      	ldr	r2, [sp, #12]
 80035a4:	7013      	strb	r3, [r2, #0]
 80035a6:	e7ac      	b.n	8003502 <_printf_i+0x126>
 80035a8:	002a      	movs	r2, r5
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	9906      	ldr	r1, [sp, #24]
 80035ae:	9805      	ldr	r0, [sp, #20]
 80035b0:	9d07      	ldr	r5, [sp, #28]
 80035b2:	47a8      	blx	r5
 80035b4:	3001      	adds	r0, #1
 80035b6:	d0ae      	beq.n	8003516 <_printf_i+0x13a>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	079b      	lsls	r3, r3, #30
 80035bc:	d415      	bmi.n	80035ea <_printf_i+0x20e>
 80035be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035c0:	68e0      	ldr	r0, [r4, #12]
 80035c2:	4298      	cmp	r0, r3
 80035c4:	daa9      	bge.n	800351a <_printf_i+0x13e>
 80035c6:	0018      	movs	r0, r3
 80035c8:	e7a7      	b.n	800351a <_printf_i+0x13e>
 80035ca:	0022      	movs	r2, r4
 80035cc:	2301      	movs	r3, #1
 80035ce:	9906      	ldr	r1, [sp, #24]
 80035d0:	9805      	ldr	r0, [sp, #20]
 80035d2:	9e07      	ldr	r6, [sp, #28]
 80035d4:	3219      	adds	r2, #25
 80035d6:	47b0      	blx	r6
 80035d8:	3001      	adds	r0, #1
 80035da:	d09c      	beq.n	8003516 <_printf_i+0x13a>
 80035dc:	3501      	adds	r5, #1
 80035de:	68e3      	ldr	r3, [r4, #12]
 80035e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	42ab      	cmp	r3, r5
 80035e6:	dcf0      	bgt.n	80035ca <_printf_i+0x1ee>
 80035e8:	e7e9      	b.n	80035be <_printf_i+0x1e2>
 80035ea:	2500      	movs	r5, #0
 80035ec:	e7f7      	b.n	80035de <_printf_i+0x202>
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	0800405a 	.word	0x0800405a
 80035f4:	0800406b 	.word	0x0800406b

080035f8 <__sflush_r>:
 80035f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035fa:	220c      	movs	r2, #12
 80035fc:	5e8b      	ldrsh	r3, [r1, r2]
 80035fe:	0005      	movs	r5, r0
 8003600:	000c      	movs	r4, r1
 8003602:	071a      	lsls	r2, r3, #28
 8003604:	d456      	bmi.n	80036b4 <__sflush_r+0xbc>
 8003606:	684a      	ldr	r2, [r1, #4]
 8003608:	2a00      	cmp	r2, #0
 800360a:	dc02      	bgt.n	8003612 <__sflush_r+0x1a>
 800360c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800360e:	2a00      	cmp	r2, #0
 8003610:	dd4e      	ble.n	80036b0 <__sflush_r+0xb8>
 8003612:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003614:	2f00      	cmp	r7, #0
 8003616:	d04b      	beq.n	80036b0 <__sflush_r+0xb8>
 8003618:	2200      	movs	r2, #0
 800361a:	2080      	movs	r0, #128	@ 0x80
 800361c:	682e      	ldr	r6, [r5, #0]
 800361e:	602a      	str	r2, [r5, #0]
 8003620:	001a      	movs	r2, r3
 8003622:	0140      	lsls	r0, r0, #5
 8003624:	6a21      	ldr	r1, [r4, #32]
 8003626:	4002      	ands	r2, r0
 8003628:	4203      	tst	r3, r0
 800362a:	d033      	beq.n	8003694 <__sflush_r+0x9c>
 800362c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	075b      	lsls	r3, r3, #29
 8003632:	d506      	bpl.n	8003642 <__sflush_r+0x4a>
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	1ad2      	subs	r2, r2, r3
 8003638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <__sflush_r+0x4a>
 800363e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	2300      	movs	r3, #0
 8003644:	0028      	movs	r0, r5
 8003646:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003648:	6a21      	ldr	r1, [r4, #32]
 800364a:	47b8      	blx	r7
 800364c:	89a2      	ldrh	r2, [r4, #12]
 800364e:	1c43      	adds	r3, r0, #1
 8003650:	d106      	bne.n	8003660 <__sflush_r+0x68>
 8003652:	6829      	ldr	r1, [r5, #0]
 8003654:	291d      	cmp	r1, #29
 8003656:	d846      	bhi.n	80036e6 <__sflush_r+0xee>
 8003658:	4b29      	ldr	r3, [pc, #164]	@ (8003700 <__sflush_r+0x108>)
 800365a:	410b      	asrs	r3, r1
 800365c:	07db      	lsls	r3, r3, #31
 800365e:	d442      	bmi.n	80036e6 <__sflush_r+0xee>
 8003660:	2300      	movs	r3, #0
 8003662:	6063      	str	r3, [r4, #4]
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	04d2      	lsls	r2, r2, #19
 800366a:	d505      	bpl.n	8003678 <__sflush_r+0x80>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d102      	bne.n	8003676 <__sflush_r+0x7e>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d100      	bne.n	8003678 <__sflush_r+0x80>
 8003676:	6560      	str	r0, [r4, #84]	@ 0x54
 8003678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800367a:	602e      	str	r6, [r5, #0]
 800367c:	2900      	cmp	r1, #0
 800367e:	d017      	beq.n	80036b0 <__sflush_r+0xb8>
 8003680:	0023      	movs	r3, r4
 8003682:	3344      	adds	r3, #68	@ 0x44
 8003684:	4299      	cmp	r1, r3
 8003686:	d002      	beq.n	800368e <__sflush_r+0x96>
 8003688:	0028      	movs	r0, r5
 800368a:	f7ff fc8f 	bl	8002fac <_free_r>
 800368e:	2300      	movs	r3, #0
 8003690:	6363      	str	r3, [r4, #52]	@ 0x34
 8003692:	e00d      	b.n	80036b0 <__sflush_r+0xb8>
 8003694:	2301      	movs	r3, #1
 8003696:	0028      	movs	r0, r5
 8003698:	47b8      	blx	r7
 800369a:	0002      	movs	r2, r0
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d1c6      	bne.n	800362e <__sflush_r+0x36>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0c3      	beq.n	800362e <__sflush_r+0x36>
 80036a6:	2b1d      	cmp	r3, #29
 80036a8:	d001      	beq.n	80036ae <__sflush_r+0xb6>
 80036aa:	2b16      	cmp	r3, #22
 80036ac:	d11a      	bne.n	80036e4 <__sflush_r+0xec>
 80036ae:	602e      	str	r6, [r5, #0]
 80036b0:	2000      	movs	r0, #0
 80036b2:	e01e      	b.n	80036f2 <__sflush_r+0xfa>
 80036b4:	690e      	ldr	r6, [r1, #16]
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	d0fa      	beq.n	80036b0 <__sflush_r+0xb8>
 80036ba:	680f      	ldr	r7, [r1, #0]
 80036bc:	600e      	str	r6, [r1, #0]
 80036be:	1bba      	subs	r2, r7, r6
 80036c0:	9201      	str	r2, [sp, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	079b      	lsls	r3, r3, #30
 80036c6:	d100      	bne.n	80036ca <__sflush_r+0xd2>
 80036c8:	694a      	ldr	r2, [r1, #20]
 80036ca:	60a2      	str	r2, [r4, #8]
 80036cc:	9b01      	ldr	r3, [sp, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	ddee      	ble.n	80036b0 <__sflush_r+0xb8>
 80036d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036d4:	0032      	movs	r2, r6
 80036d6:	001f      	movs	r7, r3
 80036d8:	0028      	movs	r0, r5
 80036da:	9b01      	ldr	r3, [sp, #4]
 80036dc:	6a21      	ldr	r1, [r4, #32]
 80036de:	47b8      	blx	r7
 80036e0:	2800      	cmp	r0, #0
 80036e2:	dc07      	bgt.n	80036f4 <__sflush_r+0xfc>
 80036e4:	89a2      	ldrh	r2, [r4, #12]
 80036e6:	2340      	movs	r3, #64	@ 0x40
 80036e8:	2001      	movs	r0, #1
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	4240      	negs	r0, r0
 80036f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036f4:	9b01      	ldr	r3, [sp, #4]
 80036f6:	1836      	adds	r6, r6, r0
 80036f8:	1a1b      	subs	r3, r3, r0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	e7e6      	b.n	80036cc <__sflush_r+0xd4>
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	dfbffffe 	.word	0xdfbffffe

08003704 <_fflush_r>:
 8003704:	690b      	ldr	r3, [r1, #16]
 8003706:	b570      	push	{r4, r5, r6, lr}
 8003708:	0005      	movs	r5, r0
 800370a:	000c      	movs	r4, r1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <_fflush_r+0x12>
 8003710:	2500      	movs	r5, #0
 8003712:	0028      	movs	r0, r5
 8003714:	bd70      	pop	{r4, r5, r6, pc}
 8003716:	2800      	cmp	r0, #0
 8003718:	d004      	beq.n	8003724 <_fflush_r+0x20>
 800371a:	6a03      	ldr	r3, [r0, #32]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <_fflush_r+0x20>
 8003720:	f7ff fa4a 	bl	8002bb8 <__sinit>
 8003724:	220c      	movs	r2, #12
 8003726:	5ea3      	ldrsh	r3, [r4, r2]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f1      	beq.n	8003710 <_fflush_r+0xc>
 800372c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800372e:	07d2      	lsls	r2, r2, #31
 8003730:	d404      	bmi.n	800373c <_fflush_r+0x38>
 8003732:	059b      	lsls	r3, r3, #22
 8003734:	d402      	bmi.n	800373c <_fflush_r+0x38>
 8003736:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003738:	f7ff fc07 	bl	8002f4a <__retarget_lock_acquire_recursive>
 800373c:	0028      	movs	r0, r5
 800373e:	0021      	movs	r1, r4
 8003740:	f7ff ff5a 	bl	80035f8 <__sflush_r>
 8003744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003746:	0005      	movs	r5, r0
 8003748:	07db      	lsls	r3, r3, #31
 800374a:	d4e2      	bmi.n	8003712 <_fflush_r+0xe>
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	059b      	lsls	r3, r3, #22
 8003750:	d4df      	bmi.n	8003712 <_fflush_r+0xe>
 8003752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003754:	f7ff fbfa 	bl	8002f4c <__retarget_lock_release_recursive>
 8003758:	e7db      	b.n	8003712 <_fflush_r+0xe>
	...

0800375c <fiprintf>:
 800375c:	b40e      	push	{r1, r2, r3}
 800375e:	b517      	push	{r0, r1, r2, r4, lr}
 8003760:	4c05      	ldr	r4, [pc, #20]	@ (8003778 <fiprintf+0x1c>)
 8003762:	ab05      	add	r3, sp, #20
 8003764:	cb04      	ldmia	r3!, {r2}
 8003766:	0001      	movs	r1, r0
 8003768:	6820      	ldr	r0, [r4, #0]
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	f000 f882 	bl	8003874 <_vfiprintf_r>
 8003770:	bc1e      	pop	{r1, r2, r3, r4}
 8003772:	bc08      	pop	{r3}
 8003774:	b003      	add	sp, #12
 8003776:	4718      	bx	r3
 8003778:	20000018 	.word	0x20000018

0800377c <memmove>:
 800377c:	b510      	push	{r4, lr}
 800377e:	4288      	cmp	r0, r1
 8003780:	d806      	bhi.n	8003790 <memmove+0x14>
 8003782:	2300      	movs	r3, #0
 8003784:	429a      	cmp	r2, r3
 8003786:	d008      	beq.n	800379a <memmove+0x1e>
 8003788:	5ccc      	ldrb	r4, [r1, r3]
 800378a:	54c4      	strb	r4, [r0, r3]
 800378c:	3301      	adds	r3, #1
 800378e:	e7f9      	b.n	8003784 <memmove+0x8>
 8003790:	188b      	adds	r3, r1, r2
 8003792:	4298      	cmp	r0, r3
 8003794:	d2f5      	bcs.n	8003782 <memmove+0x6>
 8003796:	3a01      	subs	r2, #1
 8003798:	d200      	bcs.n	800379c <memmove+0x20>
 800379a:	bd10      	pop	{r4, pc}
 800379c:	5c8b      	ldrb	r3, [r1, r2]
 800379e:	5483      	strb	r3, [r0, r2]
 80037a0:	e7f9      	b.n	8003796 <memmove+0x1a>

080037a2 <memchr>:
 80037a2:	b2c9      	uxtb	r1, r1
 80037a4:	1882      	adds	r2, r0, r2
 80037a6:	4290      	cmp	r0, r2
 80037a8:	d101      	bne.n	80037ae <memchr+0xc>
 80037aa:	2000      	movs	r0, #0
 80037ac:	4770      	bx	lr
 80037ae:	7803      	ldrb	r3, [r0, #0]
 80037b0:	428b      	cmp	r3, r1
 80037b2:	d0fb      	beq.n	80037ac <memchr+0xa>
 80037b4:	3001      	adds	r0, #1
 80037b6:	e7f6      	b.n	80037a6 <memchr+0x4>

080037b8 <abort>:
 80037b8:	2006      	movs	r0, #6
 80037ba:	b510      	push	{r4, lr}
 80037bc:	f000 fa40 	bl	8003c40 <raise>
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7fd fa85 	bl	8000cd0 <_exit>

080037c6 <_realloc_r>:
 80037c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c8:	0006      	movs	r6, r0
 80037ca:	000c      	movs	r4, r1
 80037cc:	0015      	movs	r5, r2
 80037ce:	2900      	cmp	r1, #0
 80037d0:	d105      	bne.n	80037de <_realloc_r+0x18>
 80037d2:	0011      	movs	r1, r2
 80037d4:	f7ff f83a 	bl	800284c <_malloc_r>
 80037d8:	0004      	movs	r4, r0
 80037da:	0020      	movs	r0, r4
 80037dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037de:	2a00      	cmp	r2, #0
 80037e0:	d103      	bne.n	80037ea <_realloc_r+0x24>
 80037e2:	f7ff fbe3 	bl	8002fac <_free_r>
 80037e6:	2400      	movs	r4, #0
 80037e8:	e7f7      	b.n	80037da <_realloc_r+0x14>
 80037ea:	f000 fa49 	bl	8003c80 <_malloc_usable_size_r>
 80037ee:	0007      	movs	r7, r0
 80037f0:	4285      	cmp	r5, r0
 80037f2:	d802      	bhi.n	80037fa <_realloc_r+0x34>
 80037f4:	0843      	lsrs	r3, r0, #1
 80037f6:	42ab      	cmp	r3, r5
 80037f8:	d3ef      	bcc.n	80037da <_realloc_r+0x14>
 80037fa:	0029      	movs	r1, r5
 80037fc:	0030      	movs	r0, r6
 80037fe:	f7ff f825 	bl	800284c <_malloc_r>
 8003802:	9001      	str	r0, [sp, #4]
 8003804:	2800      	cmp	r0, #0
 8003806:	d0ee      	beq.n	80037e6 <_realloc_r+0x20>
 8003808:	002a      	movs	r2, r5
 800380a:	42bd      	cmp	r5, r7
 800380c:	d900      	bls.n	8003810 <_realloc_r+0x4a>
 800380e:	003a      	movs	r2, r7
 8003810:	0021      	movs	r1, r4
 8003812:	9801      	ldr	r0, [sp, #4]
 8003814:	f7ff fba3 	bl	8002f5e <memcpy>
 8003818:	0021      	movs	r1, r4
 800381a:	0030      	movs	r0, r6
 800381c:	f7ff fbc6 	bl	8002fac <_free_r>
 8003820:	9c01      	ldr	r4, [sp, #4]
 8003822:	e7da      	b.n	80037da <_realloc_r+0x14>

08003824 <__sfputc_r>:
 8003824:	6893      	ldr	r3, [r2, #8]
 8003826:	b510      	push	{r4, lr}
 8003828:	3b01      	subs	r3, #1
 800382a:	6093      	str	r3, [r2, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	da04      	bge.n	800383a <__sfputc_r+0x16>
 8003830:	6994      	ldr	r4, [r2, #24]
 8003832:	42a3      	cmp	r3, r4
 8003834:	db07      	blt.n	8003846 <__sfputc_r+0x22>
 8003836:	290a      	cmp	r1, #10
 8003838:	d005      	beq.n	8003846 <__sfputc_r+0x22>
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	1c58      	adds	r0, r3, #1
 800383e:	6010      	str	r0, [r2, #0]
 8003840:	7019      	strb	r1, [r3, #0]
 8003842:	0008      	movs	r0, r1
 8003844:	bd10      	pop	{r4, pc}
 8003846:	f000 f931 	bl	8003aac <__swbuf_r>
 800384a:	0001      	movs	r1, r0
 800384c:	e7f9      	b.n	8003842 <__sfputc_r+0x1e>

0800384e <__sfputs_r>:
 800384e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003850:	0006      	movs	r6, r0
 8003852:	000f      	movs	r7, r1
 8003854:	0014      	movs	r4, r2
 8003856:	18d5      	adds	r5, r2, r3
 8003858:	42ac      	cmp	r4, r5
 800385a:	d101      	bne.n	8003860 <__sfputs_r+0x12>
 800385c:	2000      	movs	r0, #0
 800385e:	e007      	b.n	8003870 <__sfputs_r+0x22>
 8003860:	7821      	ldrb	r1, [r4, #0]
 8003862:	003a      	movs	r2, r7
 8003864:	0030      	movs	r0, r6
 8003866:	f7ff ffdd 	bl	8003824 <__sfputc_r>
 800386a:	3401      	adds	r4, #1
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d1f3      	bne.n	8003858 <__sfputs_r+0xa>
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003874 <_vfiprintf_r>:
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	b0a1      	sub	sp, #132	@ 0x84
 8003878:	000f      	movs	r7, r1
 800387a:	0015      	movs	r5, r2
 800387c:	001e      	movs	r6, r3
 800387e:	9003      	str	r0, [sp, #12]
 8003880:	2800      	cmp	r0, #0
 8003882:	d004      	beq.n	800388e <_vfiprintf_r+0x1a>
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <_vfiprintf_r+0x1a>
 800388a:	f7ff f995 	bl	8002bb8 <__sinit>
 800388e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003890:	07db      	lsls	r3, r3, #31
 8003892:	d405      	bmi.n	80038a0 <_vfiprintf_r+0x2c>
 8003894:	89bb      	ldrh	r3, [r7, #12]
 8003896:	059b      	lsls	r3, r3, #22
 8003898:	d402      	bmi.n	80038a0 <_vfiprintf_r+0x2c>
 800389a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800389c:	f7ff fb55 	bl	8002f4a <__retarget_lock_acquire_recursive>
 80038a0:	89bb      	ldrh	r3, [r7, #12]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	d502      	bpl.n	80038ac <_vfiprintf_r+0x38>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d113      	bne.n	80038d4 <_vfiprintf_r+0x60>
 80038ac:	0039      	movs	r1, r7
 80038ae:	9803      	ldr	r0, [sp, #12]
 80038b0:	f000 f93e 	bl	8003b30 <__swsetup_r>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00d      	beq.n	80038d4 <_vfiprintf_r+0x60>
 80038b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ba:	07db      	lsls	r3, r3, #31
 80038bc:	d503      	bpl.n	80038c6 <_vfiprintf_r+0x52>
 80038be:	2001      	movs	r0, #1
 80038c0:	4240      	negs	r0, r0
 80038c2:	b021      	add	sp, #132	@ 0x84
 80038c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c6:	89bb      	ldrh	r3, [r7, #12]
 80038c8:	059b      	lsls	r3, r3, #22
 80038ca:	d4f8      	bmi.n	80038be <_vfiprintf_r+0x4a>
 80038cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80038ce:	f7ff fb3d 	bl	8002f4c <__retarget_lock_release_recursive>
 80038d2:	e7f4      	b.n	80038be <_vfiprintf_r+0x4a>
 80038d4:	2300      	movs	r3, #0
 80038d6:	ac08      	add	r4, sp, #32
 80038d8:	6163      	str	r3, [r4, #20]
 80038da:	3320      	adds	r3, #32
 80038dc:	7663      	strb	r3, [r4, #25]
 80038de:	3310      	adds	r3, #16
 80038e0:	76a3      	strb	r3, [r4, #26]
 80038e2:	9607      	str	r6, [sp, #28]
 80038e4:	002e      	movs	r6, r5
 80038e6:	7833      	ldrb	r3, [r6, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <_vfiprintf_r+0x7c>
 80038ec:	2b25      	cmp	r3, #37	@ 0x25
 80038ee:	d148      	bne.n	8003982 <_vfiprintf_r+0x10e>
 80038f0:	1b73      	subs	r3, r6, r5
 80038f2:	9305      	str	r3, [sp, #20]
 80038f4:	42ae      	cmp	r6, r5
 80038f6:	d00b      	beq.n	8003910 <_vfiprintf_r+0x9c>
 80038f8:	002a      	movs	r2, r5
 80038fa:	0039      	movs	r1, r7
 80038fc:	9803      	ldr	r0, [sp, #12]
 80038fe:	f7ff ffa6 	bl	800384e <__sfputs_r>
 8003902:	3001      	adds	r0, #1
 8003904:	d100      	bne.n	8003908 <_vfiprintf_r+0x94>
 8003906:	e0ae      	b.n	8003a66 <_vfiprintf_r+0x1f2>
 8003908:	6963      	ldr	r3, [r4, #20]
 800390a:	9a05      	ldr	r2, [sp, #20]
 800390c:	189b      	adds	r3, r3, r2
 800390e:	6163      	str	r3, [r4, #20]
 8003910:	7833      	ldrb	r3, [r6, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d100      	bne.n	8003918 <_vfiprintf_r+0xa4>
 8003916:	e0a6      	b.n	8003a66 <_vfiprintf_r+0x1f2>
 8003918:	2201      	movs	r2, #1
 800391a:	2300      	movs	r3, #0
 800391c:	4252      	negs	r2, r2
 800391e:	6062      	str	r2, [r4, #4]
 8003920:	a904      	add	r1, sp, #16
 8003922:	3254      	adds	r2, #84	@ 0x54
 8003924:	1852      	adds	r2, r2, r1
 8003926:	1c75      	adds	r5, r6, #1
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	60e3      	str	r3, [r4, #12]
 800392c:	60a3      	str	r3, [r4, #8]
 800392e:	7013      	strb	r3, [r2, #0]
 8003930:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003932:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <_vfiprintf_r+0x224>)
 8003934:	2205      	movs	r2, #5
 8003936:	0018      	movs	r0, r3
 8003938:	7829      	ldrb	r1, [r5, #0]
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	f7ff ff31 	bl	80037a2 <memchr>
 8003940:	1c6e      	adds	r6, r5, #1
 8003942:	2800      	cmp	r0, #0
 8003944:	d11f      	bne.n	8003986 <_vfiprintf_r+0x112>
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	06d3      	lsls	r3, r2, #27
 800394a:	d504      	bpl.n	8003956 <_vfiprintf_r+0xe2>
 800394c:	2353      	movs	r3, #83	@ 0x53
 800394e:	a904      	add	r1, sp, #16
 8003950:	185b      	adds	r3, r3, r1
 8003952:	2120      	movs	r1, #32
 8003954:	7019      	strb	r1, [r3, #0]
 8003956:	0713      	lsls	r3, r2, #28
 8003958:	d504      	bpl.n	8003964 <_vfiprintf_r+0xf0>
 800395a:	2353      	movs	r3, #83	@ 0x53
 800395c:	a904      	add	r1, sp, #16
 800395e:	185b      	adds	r3, r3, r1
 8003960:	212b      	movs	r1, #43	@ 0x2b
 8003962:	7019      	strb	r1, [r3, #0]
 8003964:	782b      	ldrb	r3, [r5, #0]
 8003966:	2b2a      	cmp	r3, #42	@ 0x2a
 8003968:	d016      	beq.n	8003998 <_vfiprintf_r+0x124>
 800396a:	002e      	movs	r6, r5
 800396c:	2100      	movs	r1, #0
 800396e:	200a      	movs	r0, #10
 8003970:	68e3      	ldr	r3, [r4, #12]
 8003972:	7832      	ldrb	r2, [r6, #0]
 8003974:	1c75      	adds	r5, r6, #1
 8003976:	3a30      	subs	r2, #48	@ 0x30
 8003978:	2a09      	cmp	r2, #9
 800397a:	d950      	bls.n	8003a1e <_vfiprintf_r+0x1aa>
 800397c:	2900      	cmp	r1, #0
 800397e:	d111      	bne.n	80039a4 <_vfiprintf_r+0x130>
 8003980:	e017      	b.n	80039b2 <_vfiprintf_r+0x13e>
 8003982:	3601      	adds	r6, #1
 8003984:	e7af      	b.n	80038e6 <_vfiprintf_r+0x72>
 8003986:	9b05      	ldr	r3, [sp, #20]
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	1ac0      	subs	r0, r0, r3
 800398c:	2301      	movs	r3, #1
 800398e:	4083      	lsls	r3, r0
 8003990:	4313      	orrs	r3, r2
 8003992:	0035      	movs	r5, r6
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	e7cc      	b.n	8003932 <_vfiprintf_r+0xbe>
 8003998:	9b07      	ldr	r3, [sp, #28]
 800399a:	1d19      	adds	r1, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	9107      	str	r1, [sp, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db01      	blt.n	80039a8 <_vfiprintf_r+0x134>
 80039a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039a6:	e004      	b.n	80039b2 <_vfiprintf_r+0x13e>
 80039a8:	425b      	negs	r3, r3
 80039aa:	60e3      	str	r3, [r4, #12]
 80039ac:	2302      	movs	r3, #2
 80039ae:	4313      	orrs	r3, r2
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	7833      	ldrb	r3, [r6, #0]
 80039b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80039b6:	d10c      	bne.n	80039d2 <_vfiprintf_r+0x15e>
 80039b8:	7873      	ldrb	r3, [r6, #1]
 80039ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80039bc:	d134      	bne.n	8003a28 <_vfiprintf_r+0x1b4>
 80039be:	9b07      	ldr	r3, [sp, #28]
 80039c0:	3602      	adds	r6, #2
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	9207      	str	r2, [sp, #28]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	da01      	bge.n	80039d0 <_vfiprintf_r+0x15c>
 80039cc:	2301      	movs	r3, #1
 80039ce:	425b      	negs	r3, r3
 80039d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80039d2:	4d32      	ldr	r5, [pc, #200]	@ (8003a9c <_vfiprintf_r+0x228>)
 80039d4:	2203      	movs	r2, #3
 80039d6:	0028      	movs	r0, r5
 80039d8:	7831      	ldrb	r1, [r6, #0]
 80039da:	f7ff fee2 	bl	80037a2 <memchr>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d006      	beq.n	80039f0 <_vfiprintf_r+0x17c>
 80039e2:	2340      	movs	r3, #64	@ 0x40
 80039e4:	1b40      	subs	r0, r0, r5
 80039e6:	4083      	lsls	r3, r0
 80039e8:	6822      	ldr	r2, [r4, #0]
 80039ea:	3601      	adds	r6, #1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	6023      	str	r3, [r4, #0]
 80039f0:	7831      	ldrb	r1, [r6, #0]
 80039f2:	2206      	movs	r2, #6
 80039f4:	482a      	ldr	r0, [pc, #168]	@ (8003aa0 <_vfiprintf_r+0x22c>)
 80039f6:	1c75      	adds	r5, r6, #1
 80039f8:	7621      	strb	r1, [r4, #24]
 80039fa:	f7ff fed2 	bl	80037a2 <memchr>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d040      	beq.n	8003a84 <_vfiprintf_r+0x210>
 8003a02:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <_vfiprintf_r+0x230>)
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d122      	bne.n	8003a4e <_vfiprintf_r+0x1da>
 8003a08:	2207      	movs	r2, #7
 8003a0a:	9b07      	ldr	r3, [sp, #28]
 8003a0c:	3307      	adds	r3, #7
 8003a0e:	4393      	bics	r3, r2
 8003a10:	3308      	adds	r3, #8
 8003a12:	9307      	str	r3, [sp, #28]
 8003a14:	6963      	ldr	r3, [r4, #20]
 8003a16:	9a04      	ldr	r2, [sp, #16]
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	6163      	str	r3, [r4, #20]
 8003a1c:	e762      	b.n	80038e4 <_vfiprintf_r+0x70>
 8003a1e:	4343      	muls	r3, r0
 8003a20:	002e      	movs	r6, r5
 8003a22:	2101      	movs	r1, #1
 8003a24:	189b      	adds	r3, r3, r2
 8003a26:	e7a4      	b.n	8003972 <_vfiprintf_r+0xfe>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	200a      	movs	r0, #10
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	3601      	adds	r6, #1
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	7832      	ldrb	r2, [r6, #0]
 8003a34:	1c75      	adds	r5, r6, #1
 8003a36:	3a30      	subs	r2, #48	@ 0x30
 8003a38:	2a09      	cmp	r2, #9
 8003a3a:	d903      	bls.n	8003a44 <_vfiprintf_r+0x1d0>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0c8      	beq.n	80039d2 <_vfiprintf_r+0x15e>
 8003a40:	9109      	str	r1, [sp, #36]	@ 0x24
 8003a42:	e7c6      	b.n	80039d2 <_vfiprintf_r+0x15e>
 8003a44:	4341      	muls	r1, r0
 8003a46:	002e      	movs	r6, r5
 8003a48:	2301      	movs	r3, #1
 8003a4a:	1889      	adds	r1, r1, r2
 8003a4c:	e7f1      	b.n	8003a32 <_vfiprintf_r+0x1be>
 8003a4e:	aa07      	add	r2, sp, #28
 8003a50:	9200      	str	r2, [sp, #0]
 8003a52:	0021      	movs	r1, r4
 8003a54:	003a      	movs	r2, r7
 8003a56:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <_vfiprintf_r+0x234>)
 8003a58:	9803      	ldr	r0, [sp, #12]
 8003a5a:	e000      	b.n	8003a5e <_vfiprintf_r+0x1ea>
 8003a5c:	bf00      	nop
 8003a5e:	9004      	str	r0, [sp, #16]
 8003a60:	9b04      	ldr	r3, [sp, #16]
 8003a62:	3301      	adds	r3, #1
 8003a64:	d1d6      	bne.n	8003a14 <_vfiprintf_r+0x1a0>
 8003a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a68:	07db      	lsls	r3, r3, #31
 8003a6a:	d405      	bmi.n	8003a78 <_vfiprintf_r+0x204>
 8003a6c:	89bb      	ldrh	r3, [r7, #12]
 8003a6e:	059b      	lsls	r3, r3, #22
 8003a70:	d402      	bmi.n	8003a78 <_vfiprintf_r+0x204>
 8003a72:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a74:	f7ff fa6a 	bl	8002f4c <__retarget_lock_release_recursive>
 8003a78:	89bb      	ldrh	r3, [r7, #12]
 8003a7a:	065b      	lsls	r3, r3, #25
 8003a7c:	d500      	bpl.n	8003a80 <_vfiprintf_r+0x20c>
 8003a7e:	e71e      	b.n	80038be <_vfiprintf_r+0x4a>
 8003a80:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003a82:	e71e      	b.n	80038c2 <_vfiprintf_r+0x4e>
 8003a84:	aa07      	add	r2, sp, #28
 8003a86:	9200      	str	r2, [sp, #0]
 8003a88:	0021      	movs	r1, r4
 8003a8a:	003a      	movs	r2, r7
 8003a8c:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <_vfiprintf_r+0x234>)
 8003a8e:	9803      	ldr	r0, [sp, #12]
 8003a90:	f7ff fca4 	bl	80033dc <_printf_i>
 8003a94:	e7e3      	b.n	8003a5e <_vfiprintf_r+0x1ea>
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	08004049 	.word	0x08004049
 8003a9c:	0800404f 	.word	0x0800404f
 8003aa0:	08004053 	.word	0x08004053
 8003aa4:	00000000 	.word	0x00000000
 8003aa8:	0800384f 	.word	0x0800384f

08003aac <__swbuf_r>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	0006      	movs	r6, r0
 8003ab0:	000d      	movs	r5, r1
 8003ab2:	0014      	movs	r4, r2
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d004      	beq.n	8003ac2 <__swbuf_r+0x16>
 8003ab8:	6a03      	ldr	r3, [r0, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <__swbuf_r+0x16>
 8003abe:	f7ff f87b 	bl	8002bb8 <__sinit>
 8003ac2:	69a3      	ldr	r3, [r4, #24]
 8003ac4:	60a3      	str	r3, [r4, #8]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	d502      	bpl.n	8003ad2 <__swbuf_r+0x26>
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <__swbuf_r+0x3a>
 8003ad2:	0021      	movs	r1, r4
 8003ad4:	0030      	movs	r0, r6
 8003ad6:	f000 f82b 	bl	8003b30 <__swsetup_r>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d003      	beq.n	8003ae6 <__swbuf_r+0x3a>
 8003ade:	2501      	movs	r5, #1
 8003ae0:	426d      	negs	r5, r5
 8003ae2:	0028      	movs	r0, r5
 8003ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	b2ef      	uxtb	r7, r5
 8003aec:	1ac0      	subs	r0, r0, r3
 8003aee:	6963      	ldr	r3, [r4, #20]
 8003af0:	b2ed      	uxtb	r5, r5
 8003af2:	4283      	cmp	r3, r0
 8003af4:	dc05      	bgt.n	8003b02 <__swbuf_r+0x56>
 8003af6:	0021      	movs	r1, r4
 8003af8:	0030      	movs	r0, r6
 8003afa:	f7ff fe03 	bl	8003704 <_fflush_r>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d1ed      	bne.n	8003ade <__swbuf_r+0x32>
 8003b02:	68a3      	ldr	r3, [r4, #8]
 8003b04:	3001      	adds	r0, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60a3      	str	r3, [r4, #8]
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	6022      	str	r2, [r4, #0]
 8003b10:	701f      	strb	r7, [r3, #0]
 8003b12:	6963      	ldr	r3, [r4, #20]
 8003b14:	4283      	cmp	r3, r0
 8003b16:	d004      	beq.n	8003b22 <__swbuf_r+0x76>
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	07db      	lsls	r3, r3, #31
 8003b1c:	d5e1      	bpl.n	8003ae2 <__swbuf_r+0x36>
 8003b1e:	2d0a      	cmp	r5, #10
 8003b20:	d1df      	bne.n	8003ae2 <__swbuf_r+0x36>
 8003b22:	0021      	movs	r1, r4
 8003b24:	0030      	movs	r0, r6
 8003b26:	f7ff fded 	bl	8003704 <_fflush_r>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d0d9      	beq.n	8003ae2 <__swbuf_r+0x36>
 8003b2e:	e7d6      	b.n	8003ade <__swbuf_r+0x32>

08003b30 <__swsetup_r>:
 8003b30:	4b2d      	ldr	r3, [pc, #180]	@ (8003be8 <__swsetup_r+0xb8>)
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	0005      	movs	r5, r0
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	000c      	movs	r4, r1
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d004      	beq.n	8003b48 <__swsetup_r+0x18>
 8003b3e:	6a03      	ldr	r3, [r0, #32]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <__swsetup_r+0x18>
 8003b44:	f7ff f838 	bl	8002bb8 <__sinit>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	5ee2      	ldrsh	r2, [r4, r3]
 8003b4c:	0713      	lsls	r3, r2, #28
 8003b4e:	d423      	bmi.n	8003b98 <__swsetup_r+0x68>
 8003b50:	06d3      	lsls	r3, r2, #27
 8003b52:	d407      	bmi.n	8003b64 <__swsetup_r+0x34>
 8003b54:	2309      	movs	r3, #9
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	2340      	movs	r3, #64	@ 0x40
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	81a3      	strh	r3, [r4, #12]
 8003b60:	4240      	negs	r0, r0
 8003b62:	e03a      	b.n	8003bda <__swsetup_r+0xaa>
 8003b64:	0752      	lsls	r2, r2, #29
 8003b66:	d513      	bpl.n	8003b90 <__swsetup_r+0x60>
 8003b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	d008      	beq.n	8003b80 <__swsetup_r+0x50>
 8003b6e:	0023      	movs	r3, r4
 8003b70:	3344      	adds	r3, #68	@ 0x44
 8003b72:	4299      	cmp	r1, r3
 8003b74:	d002      	beq.n	8003b7c <__swsetup_r+0x4c>
 8003b76:	0028      	movs	r0, r5
 8003b78:	f7ff fa18 	bl	8002fac <_free_r>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b80:	2224      	movs	r2, #36	@ 0x24
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	4393      	bics	r3, r2
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6063      	str	r3, [r4, #4]
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	2308      	movs	r3, #8
 8003b92:	89a2      	ldrh	r2, [r4, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	6923      	ldr	r3, [r4, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <__swsetup_r+0x86>
 8003b9e:	21a0      	movs	r1, #160	@ 0xa0
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	0089      	lsls	r1, r1, #2
 8003ba6:	0092      	lsls	r2, r2, #2
 8003ba8:	400b      	ands	r3, r1
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <__swsetup_r+0x86>
 8003bae:	0021      	movs	r1, r4
 8003bb0:	0028      	movs	r0, r5
 8003bb2:	f000 f897 	bl	8003ce4 <__smakebuf_r>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	5ee2      	ldrsh	r2, [r4, r3]
 8003bba:	2101      	movs	r1, #1
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	420a      	tst	r2, r1
 8003bc2:	d00b      	beq.n	8003bdc <__swsetup_r+0xac>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60a3      	str	r3, [r4, #8]
 8003bc8:	6963      	ldr	r3, [r4, #20]
 8003bca:	425b      	negs	r3, r3
 8003bcc:	61a3      	str	r3, [r4, #24]
 8003bce:	2000      	movs	r0, #0
 8003bd0:	6923      	ldr	r3, [r4, #16]
 8003bd2:	4283      	cmp	r3, r0
 8003bd4:	d101      	bne.n	8003bda <__swsetup_r+0xaa>
 8003bd6:	0613      	lsls	r3, r2, #24
 8003bd8:	d4be      	bmi.n	8003b58 <__swsetup_r+0x28>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	0791      	lsls	r1, r2, #30
 8003bde:	d400      	bmi.n	8003be2 <__swsetup_r+0xb2>
 8003be0:	6963      	ldr	r3, [r4, #20]
 8003be2:	60a3      	str	r3, [r4, #8]
 8003be4:	e7f3      	b.n	8003bce <__swsetup_r+0x9e>
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	20000018 	.word	0x20000018

08003bec <_raise_r>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	0004      	movs	r4, r0
 8003bf0:	000d      	movs	r5, r1
 8003bf2:	291f      	cmp	r1, #31
 8003bf4:	d904      	bls.n	8003c00 <_raise_r+0x14>
 8003bf6:	2316      	movs	r3, #22
 8003bf8:	6003      	str	r3, [r0, #0]
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	4240      	negs	r0, r0
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <_raise_r+0x24>
 8003c06:	008a      	lsls	r2, r1, #2
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2a00      	cmp	r2, #0
 8003c0e:	d108      	bne.n	8003c22 <_raise_r+0x36>
 8003c10:	0020      	movs	r0, r4
 8003c12:	f000 f831 	bl	8003c78 <_getpid_r>
 8003c16:	002a      	movs	r2, r5
 8003c18:	0001      	movs	r1, r0
 8003c1a:	0020      	movs	r0, r4
 8003c1c:	f000 f81a 	bl	8003c54 <_kill_r>
 8003c20:	e7ed      	b.n	8003bfe <_raise_r+0x12>
 8003c22:	2a01      	cmp	r2, #1
 8003c24:	d009      	beq.n	8003c3a <_raise_r+0x4e>
 8003c26:	1c51      	adds	r1, r2, #1
 8003c28:	d103      	bne.n	8003c32 <_raise_r+0x46>
 8003c2a:	2316      	movs	r3, #22
 8003c2c:	6003      	str	r3, [r0, #0]
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e7e5      	b.n	8003bfe <_raise_r+0x12>
 8003c32:	2100      	movs	r1, #0
 8003c34:	0028      	movs	r0, r5
 8003c36:	6019      	str	r1, [r3, #0]
 8003c38:	4790      	blx	r2
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e7df      	b.n	8003bfe <_raise_r+0x12>
	...

08003c40 <raise>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <raise+0x10>)
 8003c44:	0001      	movs	r1, r0
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	f7ff ffd0 	bl	8003bec <_raise_r>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	20000018 	.word	0x20000018

08003c54 <_kill_r>:
 8003c54:	2300      	movs	r3, #0
 8003c56:	b570      	push	{r4, r5, r6, lr}
 8003c58:	4d06      	ldr	r5, [pc, #24]	@ (8003c74 <_kill_r+0x20>)
 8003c5a:	0004      	movs	r4, r0
 8003c5c:	0008      	movs	r0, r1
 8003c5e:	0011      	movs	r1, r2
 8003c60:	602b      	str	r3, [r5, #0]
 8003c62:	f7fd f82d 	bl	8000cc0 <_kill>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	d103      	bne.n	8003c72 <_kill_r+0x1e>
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d000      	beq.n	8003c72 <_kill_r+0x1e>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	2000050c 	.word	0x2000050c

08003c78 <_getpid_r>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	f7fd f81f 	bl	8000cbc <_getpid>
 8003c7e:	bd10      	pop	{r4, pc}

08003c80 <_malloc_usable_size_r>:
 8003c80:	1f0b      	subs	r3, r1, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	1f18      	subs	r0, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da01      	bge.n	8003c8e <_malloc_usable_size_r+0xe>
 8003c8a:	580b      	ldr	r3, [r1, r0]
 8003c8c:	18c0      	adds	r0, r0, r3
 8003c8e:	4770      	bx	lr

08003c90 <__swhatbuf_r>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	000e      	movs	r6, r1
 8003c94:	001d      	movs	r5, r3
 8003c96:	230e      	movs	r3, #14
 8003c98:	5ec9      	ldrsh	r1, [r1, r3]
 8003c9a:	0014      	movs	r4, r2
 8003c9c:	b096      	sub	sp, #88	@ 0x58
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	da0c      	bge.n	8003cbc <__swhatbuf_r+0x2c>
 8003ca2:	89b2      	ldrh	r2, [r6, #12]
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	4019      	ands	r1, r3
 8003caa:	421a      	tst	r2, r3
 8003cac:	d114      	bne.n	8003cd8 <__swhatbuf_r+0x48>
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	6029      	str	r1, [r5, #0]
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	b016      	add	sp, #88	@ 0x58
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	466a      	mov	r2, sp
 8003cbe:	f000 f853 	bl	8003d68 <_fstat_r>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	dbed      	blt.n	8003ca2 <__swhatbuf_r+0x12>
 8003cc6:	23f0      	movs	r3, #240	@ 0xf0
 8003cc8:	9901      	ldr	r1, [sp, #4]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4019      	ands	r1, r3
 8003cce:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <__swhatbuf_r+0x50>)
 8003cd0:	18c9      	adds	r1, r1, r3
 8003cd2:	424b      	negs	r3, r1
 8003cd4:	4159      	adcs	r1, r3
 8003cd6:	e7ea      	b.n	8003cae <__swhatbuf_r+0x1e>
 8003cd8:	2100      	movs	r1, #0
 8003cda:	2340      	movs	r3, #64	@ 0x40
 8003cdc:	e7e9      	b.n	8003cb2 <__swhatbuf_r+0x22>
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	ffffe000 	.word	0xffffe000

08003ce4 <__smakebuf_r>:
 8003ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce6:	2602      	movs	r6, #2
 8003ce8:	898b      	ldrh	r3, [r1, #12]
 8003cea:	0005      	movs	r5, r0
 8003cec:	000c      	movs	r4, r1
 8003cee:	b085      	sub	sp, #20
 8003cf0:	4233      	tst	r3, r6
 8003cf2:	d007      	beq.n	8003d04 <__smakebuf_r+0x20>
 8003cf4:	0023      	movs	r3, r4
 8003cf6:	3347      	adds	r3, #71	@ 0x47
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	6163      	str	r3, [r4, #20]
 8003d00:	b005      	add	sp, #20
 8003d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d04:	ab03      	add	r3, sp, #12
 8003d06:	aa02      	add	r2, sp, #8
 8003d08:	f7ff ffc2 	bl	8003c90 <__swhatbuf_r>
 8003d0c:	9f02      	ldr	r7, [sp, #8]
 8003d0e:	9001      	str	r0, [sp, #4]
 8003d10:	0039      	movs	r1, r7
 8003d12:	0028      	movs	r0, r5
 8003d14:	f7fe fd9a 	bl	800284c <_malloc_r>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d108      	bne.n	8003d2e <__smakebuf_r+0x4a>
 8003d1c:	220c      	movs	r2, #12
 8003d1e:	5ea3      	ldrsh	r3, [r4, r2]
 8003d20:	059a      	lsls	r2, r3, #22
 8003d22:	d4ed      	bmi.n	8003d00 <__smakebuf_r+0x1c>
 8003d24:	2203      	movs	r2, #3
 8003d26:	4393      	bics	r3, r2
 8003d28:	431e      	orrs	r6, r3
 8003d2a:	81a6      	strh	r6, [r4, #12]
 8003d2c:	e7e2      	b.n	8003cf4 <__smakebuf_r+0x10>
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	89a2      	ldrh	r2, [r4, #12]
 8003d32:	6020      	str	r0, [r4, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	81a3      	strh	r3, [r4, #12]
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	6120      	str	r0, [r4, #16]
 8003d3c:	6167      	str	r7, [r4, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <__smakebuf_r+0x78>
 8003d42:	0028      	movs	r0, r5
 8003d44:	230e      	movs	r3, #14
 8003d46:	5ee1      	ldrsh	r1, [r4, r3]
 8003d48:	f000 f820 	bl	8003d8c <_isatty_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d005      	beq.n	8003d5c <__smakebuf_r+0x78>
 8003d50:	2303      	movs	r3, #3
 8003d52:	89a2      	ldrh	r2, [r4, #12]
 8003d54:	439a      	bics	r2, r3
 8003d56:	3b02      	subs	r3, #2
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	81a3      	strh	r3, [r4, #12]
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	9a01      	ldr	r2, [sp, #4]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	e7cc      	b.n	8003d00 <__smakebuf_r+0x1c>
	...

08003d68 <_fstat_r>:
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	4d06      	ldr	r5, [pc, #24]	@ (8003d88 <_fstat_r+0x20>)
 8003d6e:	0004      	movs	r4, r0
 8003d70:	0008      	movs	r0, r1
 8003d72:	0011      	movs	r1, r2
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	f7fc ffce 	bl	8000d16 <_fstat>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d103      	bne.n	8003d86 <_fstat_r+0x1e>
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <_fstat_r+0x1e>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	2000050c 	.word	0x2000050c

08003d8c <_isatty_r>:
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	b570      	push	{r4, r5, r6, lr}
 8003d90:	4d06      	ldr	r5, [pc, #24]	@ (8003dac <_isatty_r+0x20>)
 8003d92:	0004      	movs	r4, r0
 8003d94:	0008      	movs	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7fc ffc2 	bl	8000d20 <_isatty>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d103      	bne.n	8003da8 <_isatty_r+0x1c>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d000      	beq.n	8003da8 <_isatty_r+0x1c>
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	2000050c 	.word	0x2000050c

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
